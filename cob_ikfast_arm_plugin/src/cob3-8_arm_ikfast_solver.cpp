/// autogenerated analytical inverse kinematics code from ikfast program part of OpenRAVE
/// \author Rosen Diankov
///
/// Licensed under the Apache License, Version 2.0 (the "License");
/// you may not use this file except in compliance with the License.
/// You may obtain a copy of the License at
///     http://www.apache.org/licenses/LICENSE-2.0
/// 
/// Unless required by applicable law or agreed to in writing, software
/// distributed under the License is distributed on an "AS IS" BASIS,
/// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
/// See the License for the specific language governing permissions and
/// limitations under the License.
///
/// ikfast version 61 generated on 2014-09-18 13:50:41.931669
/// To compile with gcc:
///     gcc -lstdc++ ik.cpp
/// To compile without any main function as a shared object (might need -llapack):
///     gcc -fPIC -lstdc++ -DIKFAST_NO_MAIN -DIKFAST_CLIBRARY -shared -Wl,-soname,libik.so -o libik.so ik.cpp
#define IKFAST_HAS_LIBRARY
#include "ikfast.h" // found inside share/openrave-X.Y/python/ikfast.h
using namespace ikfast;

// check if the included ikfast version matches what this file was compiled with
#define IKFAST_COMPILE_ASSERT(x) extern int __dummy[(int)x]
IKFAST_COMPILE_ASSERT(IKFAST_VERSION==61);

#include <cmath>
#include <vector>
#include <limits>
#include <algorithm>
#include <complex>

#define IKFAST_STRINGIZE2(s) #s
#define IKFAST_STRINGIZE(s) IKFAST_STRINGIZE2(s)

#ifndef IKFAST_ASSERT
#include <stdexcept>
#include <sstream>
#include <iostream>

#ifdef _MSC_VER
#ifndef __PRETTY_FUNCTION__
#define __PRETTY_FUNCTION__ __FUNCDNAME__
#endif
#endif

#ifndef __PRETTY_FUNCTION__
#define __PRETTY_FUNCTION__ __func__
#endif

#define IKFAST_ASSERT(b) { if( !(b) ) { std::stringstream ss; ss << "ikfast exception: " << __FILE__ << ":" << __LINE__ << ": " <<__PRETTY_FUNCTION__ << ": Assertion '" << #b << "' failed"; throw std::runtime_error(ss.str()); } }

#endif

#if defined(_MSC_VER)
#define IKFAST_ALIGNED16(x) __declspec(align(16)) x
#else
#define IKFAST_ALIGNED16(x) x __attribute((aligned(16)))
#endif

#define IK2PI  ((IkReal)6.28318530717959)
#define IKPI  ((IkReal)3.14159265358979)
#define IKPI_2  ((IkReal)1.57079632679490)

#ifdef _MSC_VER
#ifndef isnan
#define isnan _isnan
#endif
#endif // _MSC_VER

// lapack routines
extern "C" {
  void dgetrf_ (const int* m, const int* n, double* a, const int* lda, int* ipiv, int* info);
  void zgetrf_ (const int* m, const int* n, std::complex<double>* a, const int* lda, int* ipiv, int* info);
  void dgetri_(const int* n, const double* a, const int* lda, int* ipiv, double* work, const int* lwork, int* info);
  void dgesv_ (const int* n, const int* nrhs, double* a, const int* lda, int* ipiv, double* b, const int* ldb, int* info);
  void dgetrs_(const char *trans, const int *n, const int *nrhs, double *a, const int *lda, int *ipiv, double *b, const int *ldb, int *info);
  void dgeev_(const char *jobvl, const char *jobvr, const int *n, double *a, const int *lda, double *wr, double *wi,double *vl, const int *ldvl, double *vr, const int *ldvr, double *work, const int *lwork, int *info);
}

using namespace std; // necessary to get std math routines

#ifdef IKFAST_NAMESPACE
namespace IKFAST_NAMESPACE {
#endif

inline float IKabs(float f) { return fabsf(f); }
inline double IKabs(double f) { return fabs(f); }

inline float IKsqr(float f) { return f*f; }
inline double IKsqr(double f) { return f*f; }

inline float IKlog(float f) { return logf(f); }
inline double IKlog(double f) { return log(f); }

// allows asin and acos to exceed 1
#ifndef IKFAST_SINCOS_THRESH
#define IKFAST_SINCOS_THRESH ((IkReal)0.000001)
#endif

// used to check input to atan2 for degenerate cases
#ifndef IKFAST_ATAN2_MAGTHRESH
#define IKFAST_ATAN2_MAGTHRESH ((IkReal)2e-6)
#endif

// minimum distance of separate solutions
#ifndef IKFAST_SOLUTION_THRESH
#define IKFAST_SOLUTION_THRESH ((IkReal)1e-6)
#endif

inline float IKasin(float f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return float(-IKPI_2);
else if( f >= 1 ) return float(IKPI_2);
return asinf(f);
}
inline double IKasin(double f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return -IKPI_2;
else if( f >= 1 ) return IKPI_2;
return asin(f);
}

// return positive value in [0,y)
inline float IKfmod(float x, float y)
{
    while(x < 0) {
        x += y;
    }
    return fmodf(x,y);
}

// return positive value in [0,y)
inline double IKfmod(double x, double y)
{
    while(x < 0) {
        x += y;
    }
    return fmod(x,y);
}

inline float IKacos(float f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return float(IKPI);
else if( f >= 1 ) return float(0);
return acosf(f);
}
inline double IKacos(double f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return IKPI;
else if( f >= 1 ) return 0;
return acos(f);
}
inline float IKsin(float f) { return sinf(f); }
inline double IKsin(double f) { return sin(f); }
inline float IKcos(float f) { return cosf(f); }
inline double IKcos(double f) { return cos(f); }
inline float IKtan(float f) { return tanf(f); }
inline double IKtan(double f) { return tan(f); }
inline float IKsqrt(float f) { if( f <= 0.0f ) return 0.0f; return sqrtf(f); }
inline double IKsqrt(double f) { if( f <= 0.0 ) return 0.0; return sqrt(f); }
inline float IKatan2(float fy, float fx) {
    if( isnan(fy) ) {
        IKFAST_ASSERT(!isnan(fx)); // if both are nan, probably wrong value will be returned
        return float(IKPI_2);
    }
    else if( isnan(fx) ) {
        return 0;
    }
    return atan2f(fy,fx);
}
inline double IKatan2(double fy, double fx) {
    if( isnan(fy) ) {
        IKFAST_ASSERT(!isnan(fx)); // if both are nan, probably wrong value will be returned
        return IKPI_2;
    }
    else if( isnan(fx) ) {
        return 0;
    }
    return atan2(fy,fx);
}

inline float IKsign(float f) {
    if( f > 0 ) {
        return float(1);
    }
    else if( f < 0 ) {
        return float(-1);
    }
    return 0;
}

inline double IKsign(double f) {
    if( f > 0 ) {
        return 1.0;
    }
    else if( f < 0 ) {
        return -1.0;
    }
    return 0;
}

/// solves the forward kinematics equations.
/// \param pfree is an array specifying the free joints of the chain.
IKFAST_API void ComputeFk(const IkReal* j, IkReal* eetrans, IkReal* eerot) {
IkReal x0,x1,x2,x3,x4,x5,x6,x7,x8,x9,x10,x11,x12,x13,x14,x15,x16,x17,x18,x19,x20,x21,x22,x23,x24,x25,x26,x27,x28,x29,x30,x31,x32,x33,x34,x35,x36,x37,x38,x39,x40,x41,x42,x43,x44,x45,x46,x47,x48,x49,x50,x51,x52,x53,x54,x55,x56,x57,x58,x59,x60,x61,x62,x63,x64,x65,x66,x67,x68,x69,x70,x71,x72,x73,x74,x75,x76,x77,x78,x79,x80,x81,x82,x83,x84,x85,x86,x87,x88,x89,x90,x91,x92,x93,x94,x95,x96,x97,x98,x99;
x0=IKsin(j[1]);
x1=IKcos(j[2]);
x2=IKsin(j[3]);
x3=IKcos(j[1]);
x4=IKcos(j[3]);
x5=IKsin(j[4]);
x6=IKcos(j[4]);
x7=IKsin(j[2]);
x8=IKcos(j[6]);
x9=IKsin(j[5]);
x10=IKcos(j[0]);
x11=IKcos(j[5]);
x12=IKsin(j[0]);
x13=IKsin(j[6]);
x14=((IkReal(0.708525901187587))*(x13));
x15=((IkReal(0.295200191076838))*(x8));
x16=((IkReal(1.00000000000000))*(x10));
x17=((IkReal(0.724359664232532))*(x13));
x18=((IkReal(1.00000000000000))*(x4));
x19=((IkReal(0.685580383903944))*(x8));
x20=((IkReal(0.0726815935368420))*(x8));
x21=((IkReal(0.952666905664904))*(x13));
x22=((IkReal(0.167244086748793))*(x13));
x23=((IkReal(1.00000000000000))*(x3));
x24=((IkReal(1.00000000000000))*(x6));
x25=((IkReal(0.253880251887417))*(x8));
x26=((IkReal(0.724359664232532))*(x8));
x27=((IkReal(1.00000000000000))*(x11));
x28=((IkReal(0.640974176183811))*(x13));
x29=((IkReal(0.167244086748793))*(x8));
x30=((IkReal(1.00000000000000))*(x5));
x31=((IkReal(0.0726815935368420))*(x13));
x32=((IkReal(0.253880251887417))*(x13));
x33=((IkReal(0.952666905664904))*(x8));
x34=((IkReal(0.295200191076838))*(x13));
x35=((IkReal(1.00000000000000))*(x9));
x36=((IkReal(0.685580383903944))*(x13));
x37=((IkReal(1.00000000000000))*(x12));
x38=((IkReal(0.708525901187587))*(x8));
x39=((IkReal(0.640974176183811))*(x8));
x40=((x0)*(x2));
x41=((x0)*(x12));
x42=((IkReal(-1.00000000000000))*(x9));
x43=((x3)*(x4));
x44=((IkReal(-1.00000000000000))*(x11));
x45=((x12)*(x7));
x46=((x10)*(x7));
x47=((x1)*(x10));
x48=((x0)*(x10));
x49=((x0)*(x7));
x50=((x37)*(x7));
x51=((x1)*(x12)*(x3));
x52=((x49)*(x5));
x53=((x4)*(x48));
x54=((x23)*(x45));
x55=((((IkReal(-1.00000000000000))*(x18)*(x3)))+(((x1)*(x40))));
x56=((x47)+(((IkReal(-1.00000000000000))*(x54))));
x57=((((IkReal(-0.323000000000000))*(x3)*(x47)))+(((IkReal(0.323000000000000))*(x45))));
x58=((((IkReal(-1.00000000000000))*(x0)*(x1)*(x18)))+(((IkReal(-1.00000000000000))*(x2)*(x23))));
x59=((((x16)*(x3)*(x7)))+(((x1)*(x37))));
x60=((IkReal(-1.00000000000000))*(x59));
x61=((((IkReal(-0.323000000000000))*(x51)))+(((IkReal(-0.323000000000000))*(x46))));
x62=((x55)*(x9));
x63=((x11)*(x55));
x64=((x2)*(x57));
x65=((x5)*(x58));
x66=((x2)*(x61));
x67=((x5)*(x60));
x68=((((IkReal(-1.00000000000000))*(x16)*(x40)))+(((x4)*(((((x3)*(x47)))+(((IkReal(-1.00000000000000))*(x50))))))));
x69=((((IkReal(-1.00000000000000))*(x37)*(x40)))+(((x4)*(((x46)+(x51))))));
IkReal x100=((IkReal(1.00000000000000))*(x16));
x70=((((IkReal(-1.00000000000000))*(x0)*(x100)*(x4)))+(((x2)*(((x50)+(((IkReal(-1.00000000000000))*(x1)*(x100)*(x3))))))));
x71=((x52)+(((x58)*(x6))));
x72=((((IkReal(-1.00000000000000))*(x18)*(x41)))+(((x2)*(((((IkReal(-1.00000000000000))*(x16)*(x7)))+(((IkReal(-1.00000000000000))*(x1)*(x12)*(x23))))))));
x73=((((IkReal(-1.00000000000000))*(x24)*(x49)))+(x65));
x74=((((IkReal(-1.00000000000000))*(x49)*(x6)))+(x65));
x75=((x11)*(x70));
x76=((x70)*(x9));
x77=((((IkReal(-1.00000000000000))*(x30)*(x49)))+(((IkReal(-1.00000000000000))*(x24)*(x58))));
x78=((x72)*(x9));
x79=((x11)*(x72));
x80=((x77)*(x9));
x81=((((x6)*(x69)))+(((x5)*(x56))));
x82=((((x6)*(((((IkReal(-1.00000000000000))*(x1)*(x16)))+(x54)))))+(((x5)*(x69))));
x83=((((x5)*(x68)))+(((x59)*(x6))));
x84=((((x6)*(x68)))+(x67));
x85=((x62)+(((x11)*(x71))));
x86=((((IkReal(-1.00000000000000))*(x30)*(x56)))+(((IkReal(-1.00000000000000))*(x24)*(x69))));
x87=((x11)*(x81));
x88=((x13)*(x82));
x89=((((IkReal(-1.00000000000000))*(x30)*(x60)))+(((IkReal(-1.00000000000000))*(x24)*(x68))));
x90=((x13)*(x83));
x91=((x8)*(x83));
x92=((x8)*(x85));
x93=((x86)*(x9));
x94=((((x42)*(x55)))+(((x44)*(x71))));
x95=((x89)*(x9));
x96=((x78)+(x87));
x97=((((x11)*(x84)))+(x76));
x98=((((IkReal(-1.00000000000000))*(x35)*(x72)))+(((IkReal(-1.00000000000000))*(x27)*(x81))));
x99=((((x42)*(x70)))+(((x44)*(x84))));
eerot[0]=((((x32)*(x74)))+(((IkReal(-1.00000000000000))*(x21)*(x82)))+(((x25)*(x85)))+(((IkReal(-1.00000000000000))*(x29)*(x97)))+(((IkReal(-1.00000000000000))*(x33)*(x96)))+(((IkReal(-1.00000000000000))*(x22)*(x83))));
eerot[1]=((((IkReal(-1.00000000000000))*(x21)*(((((x42)*(x72)))+(((x44)*(x81)))))))+(((IkReal(-1.00000000000000))*(x29)*(x83)))+(((IkReal(-1.00000000000000))*(x33)*(x82)))+(((IkReal(-1.00000000000000))*(x22)*(x99)))+(((x25)*(x73)))+(((x32)*(x94))));
eerot[2]=((((IkReal(-0.952666905664904))*(x93)))+(((IkReal(0.253880251887417))*(x80)))+(((IkReal(-0.167244086748793))*(x95)))+(((IkReal(-0.952666905664904))*(x79)))+(((IkReal(0.253880251887417))*(x63)))+(((IkReal(-0.167244086748793))*(x75))));
eetrans[0]=((IkReal(-0.0361640755662251))+(((IkReal(0.307711410529764))*(x4)*(x41)))+(((IkReal(-0.167244086748793))*(x64)))+(((IkReal(0.0548560604536042))*(x48)))+(((IkReal(-0.0832727226190727))*(x3)))+(((IkReal(0.0820033213596356))*(x1)*(x40)))+(((IkReal(-0.0820033213596356))*(x43)))+(((IkReal(-0.952666905664904))*(x66)))+(((IkReal(0.312474745058089))*(x41)))+(((IkReal(0.0540198400198603))*(x53))));
eerot[3]=((((IkReal(-1.00000000000000))*(x14)*(x83)))+(((x34)*(x82)))+(((x15)*(x96)))+(((IkReal(-1.00000000000000))*(x38)*(x97)))+(((x39)*(x85)))+(((x28)*(x74))));
IkReal x101=((IkReal(1.00000000000000))*(x27));
IkReal x102=((IkReal(1.00000000000000))*(x35));
eerot[4]=((((x34)*(x98)))+(((IkReal(-1.00000000000000))*(x38)*(x83)))+(((x15)*(x82)))+(((x28)*(((((IkReal(-1.00000000000000))*(x101)*(x71)))+(((IkReal(-1.00000000000000))*(x102)*(x55)))))))+(((x39)*(x74)))+(((IkReal(-1.00000000000000))*(x14)*(((((IkReal(-1.00000000000000))*(x101)*(x84)))+(((IkReal(-1.00000000000000))*(x102)*(x70))))))));
eerot[5]=((((IkReal(0.640974176183811))*(x63)))+(((IkReal(-0.708525901187587))*(x95)))+(((IkReal(0.640974176183811))*(x80)))+(((IkReal(-0.708525901187587))*(x75)))+(((IkReal(0.295200191076838))*(x79)))+(((IkReal(0.295200191076838))*(x93))));
eetrans[1]=((IkReal(-0.197292252855143))+(((IkReal(-0.207034658907371))*(x43)))+(((IkReal(-0.210239529788290))*(x3)))+(((IkReal(0.207034658907371))*(x1)*(x40)))+(((IkReal(0.228853866083591))*(x53)))+(((IkReal(-0.0968256626732028))*(x41)))+(((IkReal(0.232396495589529))*(x48)))+(((IkReal(-0.0953496617178186))*(x4)*(x41)))+(((IkReal(-0.708525901187587))*(x64)))+(((IkReal(0.295200191076838))*(x66))));
eerot[6]=((((IkReal(-1.00000000000000))*(x36)*(x83)))+(((IkReal(-1.00000000000000))*(x20)*(x96)))+(((IkReal(-1.00000000000000))*(x17)*(x74)))+(((IkReal(-1.00000000000000))*(x31)*(x82)))+(((IkReal(-1.00000000000000))*(x19)*(x97)))+(((IkReal(-1.00000000000000))*(x26)*(x85))));
eerot[7]=((((IkReal(-1.00000000000000))*(x17)*(x94)))+(((IkReal(-1.00000000000000))*(x26)*(x73)))+(((IkReal(-1.00000000000000))*(x20)*(x82)))+(((IkReal(-1.00000000000000))*(x31)*(x98)))+(((IkReal(-1.00000000000000))*(x36)*(x99)))+(((IkReal(-1.00000000000000))*(x19)*(x83))));
eerot[8]=((((IkReal(-0.724359664232532))*(x63)))+(((IkReal(-0.685580383903944))*(x75)))+(((IkReal(-0.685580383903944))*(x95)))+(((IkReal(-0.0726815935368420))*(x79)))+(((IkReal(-0.724359664232532))*(x80)))+(((IkReal(-0.0726815935368420))*(x93))));
eetrans[2]=((IkReal(1.05367789926976))+(((IkReal(-0.0726815935368420))*(x66)))+(((IkReal(0.0234761547124000))*(x4)*(x41)))+(((IkReal(0.224870365920494))*(x48)))+(((IkReal(0.221442464000974))*(x53)))+(((IkReal(-0.233968171547108))*(x1)*(x40)))+(((IkReal(0.237589969868270))*(x3)))+(((IkReal(-0.685580383903944))*(x64)))+(((IkReal(0.0238395626800842))*(x41)))+(((IkReal(0.233968171547108))*(x43))));
}

IKFAST_API int GetNumFreeParameters() { return 1; }
IKFAST_API int* GetFreeParameters() { static int freeparams[] = {5}; return freeparams; }
IKFAST_API int GetNumJoints() { return 7; }

IKFAST_API int GetIkRealSize() { return sizeof(IkReal); }

IKFAST_API int GetIkType() { return 0x67000001; }

class IKSolver {
public:
IkReal j0,cj0,sj0,htj0,j1,cj1,sj1,htj1,j2,cj2,sj2,htj2,j3,cj3,sj3,htj3,j4,cj4,sj4,htj4,j6,cj6,sj6,htj6,j5,cj5,sj5,htj5,new_r00,r00,rxp0_0,new_r01,r01,rxp0_1,new_r02,r02,rxp0_2,new_r10,r10,rxp1_0,new_r11,r11,rxp1_1,new_r12,r12,rxp1_2,new_r20,r20,rxp2_0,new_r21,r21,rxp2_1,new_r22,r22,rxp2_2,new_px,px,npx,new_py,py,npy,new_pz,pz,npz,pp;
unsigned char _ij0[2], _nj0,_ij1[2], _nj1,_ij2[2], _nj2,_ij3[2], _nj3,_ij4[2], _nj4,_ij6[2], _nj6,_ij5[2], _nj5;

bool ComputeIk(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions) {
j0=numeric_limits<IkReal>::quiet_NaN(); _ij0[0] = -1; _ij0[1] = -1; _nj0 = -1; j1=numeric_limits<IkReal>::quiet_NaN(); _ij1[0] = -1; _ij1[1] = -1; _nj1 = -1; j2=numeric_limits<IkReal>::quiet_NaN(); _ij2[0] = -1; _ij2[1] = -1; _nj2 = -1; j3=numeric_limits<IkReal>::quiet_NaN(); _ij3[0] = -1; _ij3[1] = -1; _nj3 = -1; j4=numeric_limits<IkReal>::quiet_NaN(); _ij4[0] = -1; _ij4[1] = -1; _nj4 = -1; j6=numeric_limits<IkReal>::quiet_NaN(); _ij6[0] = -1; _ij6[1] = -1; _nj6 = -1;  _ij5[0] = -1; _ij5[1] = -1; _nj5 = 0; 
for(int dummyiter = 0; dummyiter < 1; ++dummyiter) {
    solutions.Clear();
j5=pfree[0]; cj5=cos(pfree[0]); sj5=sin(pfree[0]);
r00 = eerot[0*3+0];
r01 = eerot[0*3+1];
r02 = eerot[0*3+2];
r10 = eerot[1*3+0];
r11 = eerot[1*3+1];
r12 = eerot[1*3+2];
r20 = eerot[2*3+0];
r21 = eerot[2*3+1];
r22 = eerot[2*3+2];
px = eetrans[0]; py = eetrans[1]; pz = eetrans[2];

new_r00=((((IkReal(-0.708525901187588))*(r10)))+(((IkReal(-0.685580383903944))*(r20)))+(((IkReal(-0.167244086748793))*(r00))));
new_r01=((((IkReal(-0.708525901187588))*(r11)))+(((IkReal(-0.685580383903944))*(r21)))+(((IkReal(-0.167244086748793))*(r01))));
new_r02=((((IkReal(-0.708525901187588))*(r12)))+(((IkReal(-0.685580383903944))*(r22)))+(((IkReal(-0.167244086748793))*(r02))));
new_px=((IkReal(0.576545999649756))+(((IkReal(-0.685580383903944))*(pz)))+(((IkReal(-0.167244086748793))*(px)))+(((IkReal(-0.708525901187588))*(py))));
new_r10=((((IkReal(-0.0726815935368420))*(r20)))+(((IkReal(-0.952666905664904))*(r00)))+(((IkReal(0.295200191076838))*(r10))));
new_r11=((((IkReal(-0.0726815935368420))*(r21)))+(((IkReal(-0.952666905664904))*(r01)))+(((IkReal(0.295200191076838))*(r11))));
new_r12=((((IkReal(-0.0726815935368420))*(r22)))+(((IkReal(-0.952666905664904))*(r02)))+(((IkReal(0.295200191076838))*(r12))));
new_py=((IkReal(0.100371381568389))+(((IkReal(0.295200191076838))*(py)))+(((IkReal(-0.952666905664904))*(px)))+(((IkReal(-0.0726815935368420))*(pz))));
new_r20=((((IkReal(-0.724359664232532))*(r20)))+(((IkReal(0.640974176183811))*(r10)))+(((IkReal(0.253880251887417))*(r00))));
new_r21=((((IkReal(-0.724359664232532))*(r21)))+(((IkReal(0.640974176183811))*(r11)))+(((IkReal(0.253880251887417))*(r01))));
new_r22=((((IkReal(-0.724359664232532))*(r22)))+(((IkReal(0.640974176183811))*(r12)))+(((IkReal(0.253880251887417))*(r02))));
new_pz=((IkReal(0.898882353179585))+(((IkReal(0.253880251887417))*(px)))+(((IkReal(0.640974176183811))*(py)))+(((IkReal(-0.724359664232532))*(pz))));
r00 = new_r00; r01 = new_r01; r02 = new_r02; r10 = new_r10; r11 = new_r11; r12 = new_r12; r20 = new_r20; r21 = new_r21; r22 = new_r22; px = new_px; py = new_py; pz = new_pz;
pp=(((px)*(px))+((py)*(py))+((pz)*(pz)));
npx=((((px)*(r00)))+(((py)*(r10)))+(((pz)*(r20))));
npy=((((px)*(r01)))+(((py)*(r11)))+(((pz)*(r21))));
npz=((((px)*(r02)))+(((py)*(r12)))+(((pz)*(r22))));
rxp0_0=((((IkReal(-1.00000000000000))*(py)*(r20)))+(((pz)*(r10))));
rxp0_1=((((px)*(r20)))+(((IkReal(-1.00000000000000))*(pz)*(r00))));
rxp0_2=((((IkReal(-1.00000000000000))*(px)*(r10)))+(((py)*(r00))));
rxp1_0=((((IkReal(-1.00000000000000))*(py)*(r21)))+(((pz)*(r11))));
rxp1_1=((((px)*(r21)))+(((IkReal(-1.00000000000000))*(pz)*(r01))));
rxp1_2=((((IkReal(-1.00000000000000))*(px)*(r11)))+(((py)*(r01))));
rxp2_0=((((IkReal(-1.00000000000000))*(py)*(r22)))+(((pz)*(r12))));
rxp2_1=((((px)*(r22)))+(((IkReal(-1.00000000000000))*(pz)*(r02))));
rxp2_2=((((IkReal(-1.00000000000000))*(px)*(r12)))+(((py)*(r02))));
{
IkReal j3array[2], cj3array[2], sj3array[2];
bool j3valid[2]={false};
_nj3 = 2;
cj3array[0]=((IkReal(-1.00011798686098))+(((IkReal(4.71947443932644))*(pp))));
if( cj3array[0] >= -1-IKFAST_SINCOS_THRESH && cj3array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j3valid[0] = j3valid[1] = true;
    j3array[0] = IKacos(cj3array[0]);
    sj3array[0] = IKsin(j3array[0]);
    cj3array[1] = cj3array[0];
    j3array[1] = -j3array[0];
    sj3array[1] = -sj3array[0];
}
else if( isnan(cj3array[0]) )
{
    // probably any value will work
    j3valid[0] = true;
    cj3array[0] = 1; sj3array[0] = 0; j3array[0] = 0;
}
for(int ij3 = 0; ij3 < 2; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 2; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];

{
IkReal dummyeval[1];
IkReal x103=(sj5)*(sj5);
dummyeval[0]=((((x103)*((npy)*(npy))))+(((x103)*((npx)*(npx)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal x104=(sj5)*(sj5);
dummyeval[0]=((((x104)*((npy)*(npy))))+(((x104)*((npx)*(npx)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[2];
dummyeval[0]=sj3;
dummyeval[1]=sj5;
if( IKabs(dummyeval[0]) < 0.0000010000000000  || IKabs(dummyeval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[4];
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(j3)), IkReal(6.28318530717959))));
evalcond[1]=((IkReal(-0.423801000000000))+(pp));
evalcond[2]=((((IkReal(-1.00000000000000))*(npz)))+(((IkReal(0.651000000000000))*(cj5))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst16;
gconst16=IKsign(((((IkReal(-1000.00000000000))*((npx)*(npx))))+(((IkReal(-1000.00000000000))*((npy)*(npy))))));
dummyeval[0]=((((IkReal(-1.00000000000000))*((npy)*(npy))))+(((IkReal(-1.00000000000000))*((npx)*(npx)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst17;
gconst17=IKsign(((((sj5)*((npy)*(npy))))+(((sj5)*((npx)*(npx))))));
dummyeval[0]=((((sj5)*((npy)*(npy))))+(((sj5)*((npx)*(npx)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[4];
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(j5)), IkReal(6.28318530717959))));
evalcond[1]=((IkReal(-0.423801000000000))+(pp));
evalcond[2]=((IkReal(0.651000000000000))+(((IkReal(-1.00000000000000))*(npz))));
evalcond[3]=((IkReal(-0.651000000000000))+(npz));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
{
IkReal j6array[2], cj6array[2], sj6array[2];
bool j6valid[2]={false};
_nj6 = 2;
if( IKabs(((IkReal(-1.00000000000000))*(npx))) < IKFAST_ATAN2_MAGTHRESH && IKabs(npy) < IKFAST_ATAN2_MAGTHRESH )
    continue;
IkReal x105=IKatan2(((IkReal(-1.00000000000000))*(npx)), npy);
j6array[0]=((IkReal(-1.00000000000000))*(x105));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
j6array[1]=((IkReal(3.14159265358979))+(((IkReal(-1.00000000000000))*(x105))));
sj6array[1]=IKsin(j6array[1]);
cj6array[1]=IKcos(j6array[1]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
if( j6array[1] > IKPI )
{
    j6array[1]-=IK2PI;
}
else if( j6array[1] < -IKPI )
{    j6array[1]+=IK2PI;
}
j6valid[1] = true;
for(int ij6 = 0; ij6 < 2; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 2; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[1];
evalcond[0]=((((IkReal(-1.00000000000000))*(npy)*(IKcos(j6))))+(((IkReal(-1.00000000000000))*(npx)*(IKsin(j6)))));
if( IKabs(evalcond[0]) > 0.000001  )
{
continue;
}
}

{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
if( IKabs(((((cj6)*(npy)))+(((npx)*(sj6))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((IkReal(-1.00000000000000))*(cj6)*(npx)))+(((npy)*(sj6))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
IkReal x106=IKatan2(((((cj6)*(npy)))+(((npx)*(sj6)))), ((((IkReal(-1.00000000000000))*(cj6)*(npx)))+(((npy)*(sj6)))));
j4array[0]=((IkReal(-1.00000000000000))*(x106));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
j4array[1]=((IkReal(3.14159265358979))+(((IkReal(-1.00000000000000))*(x106))));
sj4array[1]=IKsin(j4array[1]);
cj4array[1]=IKcos(j4array[1]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
if( j4array[1] > IKPI )
{
    j4array[1]-=IK2PI;
}
else if( j4array[1] < -IKPI )
{    j4array[1]+=IK2PI;
}
j4valid[1] = true;
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[1];
IkReal x107=IKcos(j4);
IkReal x108=IKsin(j4);
IkReal x109=((IkReal(1.00000000000000))*(npx));
evalcond[0]=((((IkReal(-1.00000000000000))*(sj6)*(x108)*(x109)))+(((IkReal(-1.00000000000000))*(cj6)*(npy)*(x108)))+(((IkReal(-1.00000000000000))*(cj6)*(x107)*(x109)))+(((npy)*(sj6)*(x107))));
if( IKabs(evalcond[0]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}
}
}

} else
{
IkReal x272=((IkReal(-0.651000000000000))+(((IkReal(-1.00000000000000))*(npz))));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(1.11022302462516e-16))+(j5)), IkReal(6.28318530717959))));
evalcond[1]=((IkReal(-0.423801000000000))+(pp));
evalcond[2]=x272;
evalcond[3]=x272;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
{
IkReal j6array[2], cj6array[2], sj6array[2];
bool j6valid[2]={false};
_nj6 = 2;
if( IKabs(((IkReal(-1.00000000000000))*(npx))) < IKFAST_ATAN2_MAGTHRESH && IKabs(npy) < IKFAST_ATAN2_MAGTHRESH )
    continue;
IkReal x273=IKatan2(((IkReal(-1.00000000000000))*(npx)), npy);
j6array[0]=((IkReal(-1.00000000000000))*(x273));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
j6array[1]=((IkReal(3.14159265358979))+(((IkReal(-1.00000000000000))*(x273))));
sj6array[1]=IKsin(j6array[1]);
cj6array[1]=IKcos(j6array[1]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
if( j6array[1] > IKPI )
{
    j6array[1]-=IK2PI;
}
else if( j6array[1] < -IKPI )
{    j6array[1]+=IK2PI;
}
j6valid[1] = true;
for(int ij6 = 0; ij6 < 2; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 2; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[1];
evalcond[0]=((((IkReal(-1.00000000000000))*(npy)*(IKcos(j6))))+(((IkReal(-1.00000000000000))*(npx)*(IKsin(j6)))));
if( IKabs(evalcond[0]) > 0.000001  )
{
continue;
}
}

{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
if( IKabs(((((cj6)*(npy)))+(((npx)*(sj6))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((cj6)*(npx)))+(((IkReal(-1.00000000000000))*(npy)*(sj6))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
IkReal x274=IKatan2(((((cj6)*(npy)))+(((npx)*(sj6)))), ((((cj6)*(npx)))+(((IkReal(-1.00000000000000))*(npy)*(sj6)))));
j4array[0]=((IkReal(-1.00000000000000))*(x274));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
j4array[1]=((IkReal(3.14159265358979))+(((IkReal(-1.00000000000000))*(x274))));
sj4array[1]=IKsin(j4array[1]);
cj4array[1]=IKcos(j4array[1]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
if( j4array[1] > IKPI )
{
    j4array[1]-=IK2PI;
}
else if( j4array[1] < -IKPI )
{    j4array[1]+=IK2PI;
}
j4valid[1] = true;
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[1];
IkReal x275=IKcos(j4);
IkReal x276=IKsin(j4);
IkReal x277=((IkReal(1.00000000000000))*(sj6));
evalcond[0]=((((IkReal(-1.00000000000000))*(npy)*(x275)*(x277)))+(((cj6)*(npx)*(x275)))+(((IkReal(-1.00000000000000))*(cj6)*(npy)*(x276)))+(((IkReal(-1.00000000000000))*(npx)*(x276)*(x277))));
if( IKabs(evalcond[0]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}
}
}

} else
{
if( 1 )
{
continue;

} else
{
}
}
}
}

} else
{
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
IkReal x278=((cj5)*(npz));
if( IKabs(((gconst17)*(((((npy)*(x278)))+(((IkReal(-0.651000000000000))*(npy))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst17)*(((((IkReal(0.651000000000000))*(npx)))+(((IkReal(-1.00000000000000))*(npx)*(x278))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j6array[0]=IKatan2(((gconst17)*(((((npy)*(x278)))+(((IkReal(-0.651000000000000))*(npy)))))), ((gconst17)*(((((IkReal(0.651000000000000))*(npx)))+(((IkReal(-1.00000000000000))*(npx)*(x278)))))));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[3];
IkReal x279=IKcos(j6);
IkReal x280=IKsin(j6);
IkReal x281=((IkReal(1.00000000000000))*(npx));
IkReal x282=((npy)*(x280));
evalcond[0]=((((IkReal(-1.00000000000000))*(x280)*(x281)))+(((IkReal(-1.00000000000000))*(npy)*(x279))));
evalcond[1]=((IkReal(-0.651000000000000))+(((IkReal(-1.00000000000000))*(sj5)*(x282)))+(((cj5)*(npz)))+(((npx)*(sj5)*(x279))));
evalcond[2]=((((IkReal(0.651000000000000))*(sj5)))+(x282)+(((IkReal(-1.00000000000000))*(x279)*(x281))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  )
{
continue;
}
}

{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
if( IKabs(((((cj6)*(npy)))+(((npx)*(sj6))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((npz)*(sj5)))+(((cj5)*(npy)*(sj6)))+(((IkReal(-1.00000000000000))*(cj5)*(cj6)*(npx))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
IkReal x283=IKatan2(((((cj6)*(npy)))+(((npx)*(sj6)))), ((((npz)*(sj5)))+(((cj5)*(npy)*(sj6)))+(((IkReal(-1.00000000000000))*(cj5)*(cj6)*(npx)))));
j4array[0]=((IkReal(-1.00000000000000))*(x283));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
j4array[1]=((IkReal(3.14159265358979))+(((IkReal(-1.00000000000000))*(x283))));
sj4array[1]=IKsin(j4array[1]);
cj4array[1]=IKcos(j4array[1]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
if( j4array[1] > IKPI )
{
    j4array[1]-=IK2PI;
}
else if( j4array[1] < -IKPI )
{    j4array[1]+=IK2PI;
}
j4valid[1] = true;
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[1];
IkReal x284=IKcos(j4);
IkReal x285=IKsin(j4);
IkReal x286=((IkReal(1.00000000000000))*(npx));
IkReal x287=((cj5)*(x284));
evalcond[0]=((((IkReal(-1.00000000000000))*(cj6)*(x286)*(x287)))+(((npz)*(sj5)*(x284)))+(((IkReal(-1.00000000000000))*(cj6)*(npy)*(x285)))+(((npy)*(sj6)*(x287)))+(((IkReal(-1.00000000000000))*(sj6)*(x285)*(x286))));
if( IKabs(evalcond[0]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}
}
}

}

}

} else
{
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
IkReal x288=((gconst16)*(sj5));
if( IKabs(((IkReal(651.000000000000))*(npy)*(x288))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(-651.000000000000))*(npx)*(x288))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j6array[0]=IKatan2(((IkReal(651.000000000000))*(npy)*(x288)), ((IkReal(-651.000000000000))*(npx)*(x288)));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[3];
IkReal x289=IKcos(j6);
IkReal x290=IKsin(j6);
IkReal x291=((IkReal(1.00000000000000))*(npx));
IkReal x292=((npy)*(x290));
evalcond[0]=((((IkReal(-1.00000000000000))*(x290)*(x291)))+(((IkReal(-1.00000000000000))*(npy)*(x289))));
evalcond[1]=((IkReal(-0.651000000000000))+(((npx)*(sj5)*(x289)))+(((cj5)*(npz)))+(((IkReal(-1.00000000000000))*(sj5)*(x292))));
evalcond[2]=((((IkReal(0.651000000000000))*(sj5)))+(((IkReal(-1.00000000000000))*(x289)*(x291)))+(x292));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  )
{
continue;
}
}

{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
if( IKabs(((((cj6)*(npy)))+(((npx)*(sj6))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((npz)*(sj5)))+(((cj5)*(npy)*(sj6)))+(((IkReal(-1.00000000000000))*(cj5)*(cj6)*(npx))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
IkReal x293=IKatan2(((((cj6)*(npy)))+(((npx)*(sj6)))), ((((npz)*(sj5)))+(((cj5)*(npy)*(sj6)))+(((IkReal(-1.00000000000000))*(cj5)*(cj6)*(npx)))));
j4array[0]=((IkReal(-1.00000000000000))*(x293));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
j4array[1]=((IkReal(3.14159265358979))+(((IkReal(-1.00000000000000))*(x293))));
sj4array[1]=IKsin(j4array[1]);
cj4array[1]=IKcos(j4array[1]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
if( j4array[1] > IKPI )
{
    j4array[1]-=IK2PI;
}
else if( j4array[1] < -IKPI )
{    j4array[1]+=IK2PI;
}
j4valid[1] = true;
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[1];
IkReal x294=IKcos(j4);
IkReal x295=IKsin(j4);
IkReal x296=((IkReal(1.00000000000000))*(npx));
IkReal x297=((cj5)*(x294));
evalcond[0]=((((npy)*(sj6)*(x297)))+(((IkReal(-1.00000000000000))*(cj6)*(x296)*(x297)))+(((npz)*(sj5)*(x294)))+(((IkReal(-1.00000000000000))*(sj6)*(x295)*(x296)))+(((IkReal(-1.00000000000000))*(cj6)*(npy)*(x295))));
if( IKabs(evalcond[0]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}
}
}

}

}

} else
{
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(1.11022302462516e-16))+(j3)), IkReal(6.28318530717959))));
evalcond[1]=((IkReal(-2.50000000000000e-5))+(pp));
evalcond[2]=((((IkReal(-1.00000000000000))*(npz)))+(((IkReal(-0.00500000000000000))*(cj5))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst18;
gconst18=IKsign(((((IkReal(200.000000000000))*((npx)*(npx))))+(((IkReal(200.000000000000))*((npy)*(npy))))));
dummyeval[0]=(((npx)*(npx))+((npy)*(npy)));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst19;
gconst19=IKsign(((((sj5)*((npy)*(npy))))+(((sj5)*((npx)*(npx))))));
dummyeval[0]=((((sj5)*((npy)*(npy))))+(((sj5)*((npx)*(npx)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[4];
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(j5)), IkReal(6.28318530717959))));
evalcond[1]=((IkReal(-2.50000000000000e-5))+(pp));
evalcond[2]=((IkReal(-0.00500000000000000))+(((IkReal(-1.00000000000000))*(npz))));
evalcond[3]=((IkReal(0.00500000000000000))+(npz));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
{
IkReal j6array[2], cj6array[2], sj6array[2];
bool j6valid[2]={false};
_nj6 = 2;
if( IKabs(((IkReal(-1.00000000000000))*(npx))) < IKFAST_ATAN2_MAGTHRESH && IKabs(npy) < IKFAST_ATAN2_MAGTHRESH )
    continue;
IkReal x298=IKatan2(((IkReal(-1.00000000000000))*(npx)), npy);
j6array[0]=((IkReal(-1.00000000000000))*(x298));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
j6array[1]=((IkReal(3.14159265358979))+(((IkReal(-1.00000000000000))*(x298))));
sj6array[1]=IKsin(j6array[1]);
cj6array[1]=IKcos(j6array[1]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
if( j6array[1] > IKPI )
{
    j6array[1]-=IK2PI;
}
else if( j6array[1] < -IKPI )
{    j6array[1]+=IK2PI;
}
j6valid[1] = true;
for(int ij6 = 0; ij6 < 2; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 2; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[1];
evalcond[0]=((((IkReal(-1.00000000000000))*(npy)*(IKcos(j6))))+(((IkReal(-1.00000000000000))*(npx)*(IKsin(j6)))));
if( IKabs(evalcond[0]) > 0.000001  )
{
continue;
}
}

{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
if( IKabs(((((cj6)*(npy)))+(((npx)*(sj6))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((IkReal(-1.00000000000000))*(cj6)*(npx)))+(((npy)*(sj6))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
IkReal x299=IKatan2(((((cj6)*(npy)))+(((npx)*(sj6)))), ((((IkReal(-1.00000000000000))*(cj6)*(npx)))+(((npy)*(sj6)))));
j4array[0]=((IkReal(-1.00000000000000))*(x299));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
j4array[1]=((IkReal(3.14159265358979))+(((IkReal(-1.00000000000000))*(x299))));
sj4array[1]=IKsin(j4array[1]);
cj4array[1]=IKcos(j4array[1]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
if( j4array[1] > IKPI )
{
    j4array[1]-=IK2PI;
}
else if( j4array[1] < -IKPI )
{    j4array[1]+=IK2PI;
}
j4valid[1] = true;
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[1];
IkReal x300=IKcos(j4);
IkReal x301=IKsin(j4);
IkReal x302=((IkReal(1.00000000000000))*(npx));
evalcond[0]=((((npy)*(sj6)*(x300)))+(((IkReal(-1.00000000000000))*(cj6)*(x300)*(x302)))+(((IkReal(-1.00000000000000))*(sj6)*(x301)*(x302)))+(((IkReal(-1.00000000000000))*(cj6)*(npy)*(x301))));
if( IKabs(evalcond[0]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}
}
}

} else
{
IkReal x303=((IkReal(0.00500000000000000))+(((IkReal(-1.00000000000000))*(npz))));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(1.11022302462516e-16))+(j5)), IkReal(6.28318530717959))));
evalcond[1]=((IkReal(-2.50000000000000e-5))+(pp));
evalcond[2]=x303;
evalcond[3]=x303;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
{
IkReal j6array[2], cj6array[2], sj6array[2];
bool j6valid[2]={false};
_nj6 = 2;
if( IKabs(((IkReal(-1.00000000000000))*(npx))) < IKFAST_ATAN2_MAGTHRESH && IKabs(npy) < IKFAST_ATAN2_MAGTHRESH )
    continue;
IkReal x304=IKatan2(((IkReal(-1.00000000000000))*(npx)), npy);
j6array[0]=((IkReal(-1.00000000000000))*(x304));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
j6array[1]=((IkReal(3.14159265358979))+(((IkReal(-1.00000000000000))*(x304))));
sj6array[1]=IKsin(j6array[1]);
cj6array[1]=IKcos(j6array[1]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
if( j6array[1] > IKPI )
{
    j6array[1]-=IK2PI;
}
else if( j6array[1] < -IKPI )
{    j6array[1]+=IK2PI;
}
j6valid[1] = true;
for(int ij6 = 0; ij6 < 2; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 2; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[1];
evalcond[0]=((((IkReal(-1.00000000000000))*(npy)*(IKcos(j6))))+(((IkReal(-1.00000000000000))*(npx)*(IKsin(j6)))));
if( IKabs(evalcond[0]) > 0.000001  )
{
continue;
}
}

{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
if( IKabs(((((cj6)*(npy)))+(((npx)*(sj6))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((cj6)*(npx)))+(((IkReal(-1.00000000000000))*(npy)*(sj6))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
IkReal x305=IKatan2(((((cj6)*(npy)))+(((npx)*(sj6)))), ((((cj6)*(npx)))+(((IkReal(-1.00000000000000))*(npy)*(sj6)))));
j4array[0]=((IkReal(-1.00000000000000))*(x305));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
j4array[1]=((IkReal(3.14159265358979))+(((IkReal(-1.00000000000000))*(x305))));
sj4array[1]=IKsin(j4array[1]);
cj4array[1]=IKcos(j4array[1]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
if( j4array[1] > IKPI )
{
    j4array[1]-=IK2PI;
}
else if( j4array[1] < -IKPI )
{    j4array[1]+=IK2PI;
}
j4valid[1] = true;
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[1];
IkReal x306=IKcos(j4);
IkReal x307=IKsin(j4);
IkReal x308=((IkReal(1.00000000000000))*(sj6));
evalcond[0]=((((IkReal(-1.00000000000000))*(npy)*(x306)*(x308)))+(((cj6)*(npx)*(x306)))+(((IkReal(-1.00000000000000))*(cj6)*(npy)*(x307)))+(((IkReal(-1.00000000000000))*(npx)*(x307)*(x308))));
if( IKabs(evalcond[0]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}
}
}

} else
{
if( 1 )
{
continue;

} else
{
}
}
}
}

} else
{
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
IkReal x309=((cj5)*(npz));
if( IKabs(((gconst19)*(((((npy)*(x309)))+(((IkReal(0.00500000000000000))*(npy))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst19)*(((((IkReal(-0.00500000000000000))*(npx)))+(((IkReal(-1.00000000000000))*(npx)*(x309))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j6array[0]=IKatan2(((gconst19)*(((((npy)*(x309)))+(((IkReal(0.00500000000000000))*(npy)))))), ((gconst19)*(((((IkReal(-0.00500000000000000))*(npx)))+(((IkReal(-1.00000000000000))*(npx)*(x309)))))));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[3];
IkReal x310=IKcos(j6);
IkReal x311=IKsin(j6);
IkReal x312=((IkReal(1.00000000000000))*(npx));
IkReal x313=((npy)*(x311));
evalcond[0]=((((IkReal(-1.00000000000000))*(npy)*(x310)))+(((IkReal(-1.00000000000000))*(x311)*(x312))));
evalcond[1]=((IkReal(0.00500000000000000))+(((cj5)*(npz)))+(((IkReal(-1.00000000000000))*(sj5)*(x313)))+(((npx)*(sj5)*(x310))));
evalcond[2]=((((IkReal(-1.00000000000000))*(x310)*(x312)))+(x313)+(((IkReal(-0.00500000000000000))*(sj5))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  )
{
continue;
}
}

{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
if( IKabs(((((cj6)*(npy)))+(((npx)*(sj6))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((npz)*(sj5)))+(((cj5)*(npy)*(sj6)))+(((IkReal(-1.00000000000000))*(cj5)*(cj6)*(npx))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
IkReal x314=IKatan2(((((cj6)*(npy)))+(((npx)*(sj6)))), ((((npz)*(sj5)))+(((cj5)*(npy)*(sj6)))+(((IkReal(-1.00000000000000))*(cj5)*(cj6)*(npx)))));
j4array[0]=((IkReal(-1.00000000000000))*(x314));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
j4array[1]=((IkReal(3.14159265358979))+(((IkReal(-1.00000000000000))*(x314))));
sj4array[1]=IKsin(j4array[1]);
cj4array[1]=IKcos(j4array[1]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
if( j4array[1] > IKPI )
{
    j4array[1]-=IK2PI;
}
else if( j4array[1] < -IKPI )
{    j4array[1]+=IK2PI;
}
j4valid[1] = true;
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[1];
IkReal x315=IKcos(j4);
IkReal x316=IKsin(j4);
IkReal x317=((IkReal(1.00000000000000))*(npx));
IkReal x318=((cj5)*(x315));
evalcond[0]=((((IkReal(-1.00000000000000))*(sj6)*(x316)*(x317)))+(((npy)*(sj6)*(x318)))+(((npz)*(sj5)*(x315)))+(((IkReal(-1.00000000000000))*(cj6)*(npy)*(x316)))+(((IkReal(-1.00000000000000))*(cj6)*(x317)*(x318))));
if( IKabs(evalcond[0]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}
}
}

}

}

} else
{
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
IkReal x319=((gconst18)*(sj5));
if( IKabs(((npy)*(x319))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(-1.00000000000000))*(npx)*(x319))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j6array[0]=IKatan2(((npy)*(x319)), ((IkReal(-1.00000000000000))*(npx)*(x319)));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[3];
IkReal x320=IKcos(j6);
IkReal x321=IKsin(j6);
IkReal x322=((IkReal(1.00000000000000))*(npx));
IkReal x323=((npy)*(x321));
evalcond[0]=((((IkReal(-1.00000000000000))*(x321)*(x322)))+(((IkReal(-1.00000000000000))*(npy)*(x320))));
evalcond[1]=((IkReal(0.00500000000000000))+(((IkReal(-1.00000000000000))*(sj5)*(x323)))+(((npx)*(sj5)*(x320)))+(((cj5)*(npz))));
evalcond[2]=((((IkReal(-1.00000000000000))*(x320)*(x322)))+(x323)+(((IkReal(-0.00500000000000000))*(sj5))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  )
{
continue;
}
}

{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
if( IKabs(((((cj6)*(npy)))+(((npx)*(sj6))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((npz)*(sj5)))+(((cj5)*(npy)*(sj6)))+(((IkReal(-1.00000000000000))*(cj5)*(cj6)*(npx))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
IkReal x324=IKatan2(((((cj6)*(npy)))+(((npx)*(sj6)))), ((((npz)*(sj5)))+(((cj5)*(npy)*(sj6)))+(((IkReal(-1.00000000000000))*(cj5)*(cj6)*(npx)))));
j4array[0]=((IkReal(-1.00000000000000))*(x324));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
j4array[1]=((IkReal(3.14159265358979))+(((IkReal(-1.00000000000000))*(x324))));
sj4array[1]=IKsin(j4array[1]);
cj4array[1]=IKcos(j4array[1]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
if( j4array[1] > IKPI )
{
    j4array[1]-=IK2PI;
}
else if( j4array[1] < -IKPI )
{    j4array[1]+=IK2PI;
}
j4valid[1] = true;
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[1];
IkReal x325=IKcos(j4);
IkReal x326=IKsin(j4);
IkReal x327=((IkReal(1.00000000000000))*(npx));
IkReal x328=((cj5)*(x325));
evalcond[0]=((((IkReal(-1.00000000000000))*(cj6)*(npy)*(x326)))+(((IkReal(-1.00000000000000))*(cj6)*(x327)*(x328)))+(((IkReal(-1.00000000000000))*(sj6)*(x326)*(x327)))+(((npy)*(sj6)*(x328)))+(((npz)*(sj5)*(x325))));
if( IKabs(evalcond[0]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}
}
}

}

}

} else
{
IkReal x329=((IkReal(0.328000000000000))*(cj3));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(j5)), IkReal(6.28318530717959))));
evalcond[1]=((IkReal(-0.211913000000000))+(pp)+(((IkReal(-0.211888000000000))*(cj3))));
evalcond[2]=((IkReal(0.323000000000000))+(((IkReal(-1.00000000000000))*(npz)))+(x329));
evalcond[3]=((IkReal(-0.323000000000000))+(((IkReal(-1.00000000000000))*(x329)))+(npz));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=((((IkReal(-9.29506246281975))*(npy)*((npx)*(npx))))+(((npy)*((sj3)*(sj3))))+(((IkReal(-9.29506246281975))*((npy)*(npy)*(npy)))));
if( IKabs(dummyeval[0]) < 0.0000001000000000  )
{
continue;

} else
{
IkReal op[6+1], zeror[6];
int numroots;
IkReal x330=(sj3)*(sj3);
IkReal x331=(npy)*(npy);
IkReal x332=(npx)*(npx)*(npx);
IkReal x333=((npx)*(x331));
IkReal x334=((npx)*(x330));
IkReal x335=((IkReal(0.430336000000000))*(npy)*(x330));
IkReal x336=((((IkReal(4.00000000000000))*(npy)*((npx)*(npx))))+(((IkReal(4.00000000000000))*((npy)*(npy)*(npy)))));
IkReal x337=((x335)+(((IkReal(-1.00000000000000))*(x336))));
IkReal x338=((((IkReal(8.00000000000000))*(x332)))+(((IkReal(8.00000000000000))*(x333)))+(((IkReal(-0.860672000000000))*(x334))));
IkReal x339=((x336)+(((IkReal(-1.00000000000000))*(x335))));
op[0]=x337;
op[1]=x338;
op[2]=x337;
op[3]=((((IkReal(16.0000000000000))*(x332)))+(((IkReal(16.0000000000000))*(x333)))+(((IkReal(-1.72134400000000))*(x334))));
op[4]=x339;
op[5]=x338;
op[6]=x339;
polyroots6(op,zeror,numroots);
IkReal j6array[6], cj6array[6], sj6array[6], tempj6array[1];
int numsolutions = 0;
for(int ij6 = 0; ij6 < numroots; ++ij6)
{
IkReal htj6 = zeror[ij6];
tempj6array[0]=((IkReal(2.00000000000000))*(atan(htj6)));
for(int kj6 = 0; kj6 < 1; ++kj6)
{
j6array[numsolutions] = tempj6array[kj6];
if( j6array[numsolutions] > IKPI )
{
    j6array[numsolutions]-=IK2PI;
}
else if( j6array[numsolutions] < -IKPI )
{
    j6array[numsolutions]+=IK2PI;
}
sj6array[numsolutions] = IKsin(j6array[numsolutions]);
cj6array[numsolutions] = IKcos(j6array[numsolutions]);
numsolutions++;
}
}
bool j6valid[6]={true,true,true,true,true,true};
_nj6 = 6;
for(int ij6 = 0; ij6 < numsolutions; ++ij6)
    {
if( !j6valid[ij6] )
{
    continue;
}
    j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
htj6 = IKtan(j6/2);

_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < numsolutions; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
{
IkReal dummyeval[1];
IkReal gconst20;
gconst20=IKsign(sj3);
dummyeval[0]=sj3;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[2];
IkReal x340=((IkReal(1.00000000000000))*(sj3));
dummyeval[0]=((((IkReal(-1.00000000000000))*(cj6)*(npy)*(x340)))+(((IkReal(-1.00000000000000))*(npx)*(sj6)*(x340))));
dummyeval[1]=sj3;
if( IKabs(dummyeval[0]) < 0.0000010000000000  || IKabs(dummyeval[1]) < 0.0000010000000000  )
{
{
IkReal dummyeval[2];
dummyeval[0]=((((npy)*(sj3)*(sj6)))+(((IkReal(-1.00000000000000))*(cj6)*(npx)*(sj3))));
dummyeval[1]=sj3;
if( IKabs(dummyeval[0]) < 0.0000010000000000  || IKabs(dummyeval[1]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x341=((npy)*(sj6));
IkReal x342=((IkReal(41.0000000000000))*(sj3));
IkReal x343=((cj6)*(npx));
IkReal x344=((IkReal(125.000000000000))*(npx)*(npy));
IkReal x345=((IkReal(125.000000000000))*(cj6)*(sj6));
if( IKabs(((((IKabs(((((x341)*(x342)))+(((IkReal(-1.00000000000000))*(x342)*(x343))))) != 0)?((IkReal)1/(((((x341)*(x342)))+(((IkReal(-1.00000000000000))*(x342)*(x343)))))):(IkReal)1.0e30))*(((((IkReal(125.000000000000))*(cj6)*(npy)*(x341)))+(((IkReal(-125.000000000000))*(npx)*(sj6)*(x343)))+(((IkReal(-125.000000000000))*(cj6)*(npy)*(x343)))+(((IkReal(125.000000000000))*(npx)*(sj6)*(x341))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(0.0243902439024390))*(((IKabs(sj3) != 0)?((IkReal)1/(sj3)):(IkReal)1.0e30))*(((((IkReal(-125.000000000000))*(x341)))+(((IkReal(125.000000000000))*(x343))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((IKabs(((((x341)*(x342)))+(((IkReal(-1.00000000000000))*(x342)*(x343))))) != 0)?((IkReal)1/(((((x341)*(x342)))+(((IkReal(-1.00000000000000))*(x342)*(x343)))))):(IkReal)1.0e30))*(((((IkReal(125.000000000000))*(cj6)*(npy)*(x341)))+(((IkReal(-125.000000000000))*(npx)*(sj6)*(x343)))+(((IkReal(-125.000000000000))*(cj6)*(npy)*(x343)))+(((IkReal(125.000000000000))*(npx)*(sj6)*(x341)))))))+IKsqr(((IkReal(0.0243902439024390))*(((IKabs(sj3) != 0)?((IkReal)1/(sj3)):(IkReal)1.0e30))*(((((IkReal(-125.000000000000))*(x341)))+(((IkReal(125.000000000000))*(x343)))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((((IKabs(((((x341)*(x342)))+(((IkReal(-1.00000000000000))*(x342)*(x343))))) != 0)?((IkReal)1/(((((x341)*(x342)))+(((IkReal(-1.00000000000000))*(x342)*(x343)))))):(IkReal)1.0e30))*(((((IkReal(125.000000000000))*(cj6)*(npy)*(x341)))+(((IkReal(-125.000000000000))*(npx)*(sj6)*(x343)))+(((IkReal(-125.000000000000))*(cj6)*(npy)*(x343)))+(((IkReal(125.000000000000))*(npx)*(sj6)*(x341)))))), ((IkReal(0.0243902439024390))*(((IKabs(sj3) != 0)?((IkReal)1/(sj3)):(IkReal)1.0e30))*(((((IkReal(-125.000000000000))*(x341)))+(((IkReal(125.000000000000))*(x343)))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[4];
IkReal x346=IKcos(j4);
IkReal x347=IKsin(j4);
IkReal x348=((IkReal(0.328000000000000))*(sj3));
IkReal x349=((IkReal(1.00000000000000))*(cj6));
IkReal x350=((npx)*(sj6));
IkReal x351=((npy)*(sj6));
evalcond[0]=((((IkReal(-1.00000000000000))*(npy)*(x349)))+(((IkReal(-1.00000000000000))*(x350)))+(((x347)*(x348))));
evalcond[1]=((((IkReal(-1.00000000000000))*(npx)*(x349)))+(x351)+(((x346)*(x348))));
evalcond[2]=((((x346)*(x350)))+(((IkReal(-1.00000000000000))*(npx)*(x347)*(x349)))+(((x347)*(x351)))+(((cj6)*(npy)*(x346))));
evalcond[3]=((((IkReal(-1.00000000000000))*(x347)*(x350)))+(((IkReal(-1.00000000000000))*(npx)*(x346)*(x349)))+(((x346)*(x351)))+(x348)+(((IkReal(-1.00000000000000))*(npy)*(x347)*(x349))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x352=((npy)*(sj6));
IkReal x353=((IkReal(5125.00000000000))*(sj3));
IkReal x354=((cj6)*(npx));
if( IKabs(((((IKabs(((((IkReal(-1.00000000000000))*(cj6)*(npy)*(x353)))+(((IkReal(-1.00000000000000))*(npx)*(sj6)*(x353))))) != 0)?((IkReal)1/(((((IkReal(-1.00000000000000))*(cj6)*(npy)*(x353)))+(((IkReal(-1.00000000000000))*(npx)*(sj6)*(x353)))))):(IkReal)1.0e30))*(((((IkReal(15625.0000000000))*((x354)*(x354))))+(((IkReal(-31250.0000000000))*(x352)*(x354)))+(((IkReal(15625.0000000000))*((x352)*(x352))))+(((IkReal(-1681.00000000000))*((sj3)*(sj3)))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(0.0243902439024390))*(((IKabs(sj3) != 0)?((IkReal)1/(sj3)):(IkReal)1.0e30))*(((((IkReal(125.000000000000))*(x354)))+(((IkReal(-125.000000000000))*(x352))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((IKabs(((((IkReal(-1.00000000000000))*(cj6)*(npy)*(x353)))+(((IkReal(-1.00000000000000))*(npx)*(sj6)*(x353))))) != 0)?((IkReal)1/(((((IkReal(-1.00000000000000))*(cj6)*(npy)*(x353)))+(((IkReal(-1.00000000000000))*(npx)*(sj6)*(x353)))))):(IkReal)1.0e30))*(((((IkReal(15625.0000000000))*((x354)*(x354))))+(((IkReal(-31250.0000000000))*(x352)*(x354)))+(((IkReal(15625.0000000000))*((x352)*(x352))))+(((IkReal(-1681.00000000000))*((sj3)*(sj3))))))))+IKsqr(((IkReal(0.0243902439024390))*(((IKabs(sj3) != 0)?((IkReal)1/(sj3)):(IkReal)1.0e30))*(((((IkReal(125.000000000000))*(x354)))+(((IkReal(-125.000000000000))*(x352)))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((((IKabs(((((IkReal(-1.00000000000000))*(cj6)*(npy)*(x353)))+(((IkReal(-1.00000000000000))*(npx)*(sj6)*(x353))))) != 0)?((IkReal)1/(((((IkReal(-1.00000000000000))*(cj6)*(npy)*(x353)))+(((IkReal(-1.00000000000000))*(npx)*(sj6)*(x353)))))):(IkReal)1.0e30))*(((((IkReal(15625.0000000000))*((x354)*(x354))))+(((IkReal(-31250.0000000000))*(x352)*(x354)))+(((IkReal(15625.0000000000))*((x352)*(x352))))+(((IkReal(-1681.00000000000))*((sj3)*(sj3))))))), ((IkReal(0.0243902439024390))*(((IKabs(sj3) != 0)?((IkReal)1/(sj3)):(IkReal)1.0e30))*(((((IkReal(125.000000000000))*(x354)))+(((IkReal(-125.000000000000))*(x352)))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[4];
IkReal x355=IKcos(j4);
IkReal x356=IKsin(j4);
IkReal x357=((IkReal(0.328000000000000))*(sj3));
IkReal x358=((IkReal(1.00000000000000))*(cj6));
IkReal x359=((npx)*(sj6));
IkReal x360=((npy)*(sj6));
evalcond[0]=((((x356)*(x357)))+(((IkReal(-1.00000000000000))*(npy)*(x358)))+(((IkReal(-1.00000000000000))*(x359))));
evalcond[1]=((((IkReal(-1.00000000000000))*(npx)*(x358)))+(((x355)*(x357)))+(x360));
evalcond[2]=((((IkReal(-1.00000000000000))*(npx)*(x356)*(x358)))+(((x355)*(x359)))+(((cj6)*(npy)*(x355)))+(((x356)*(x360))));
evalcond[3]=((((IkReal(-1.00000000000000))*(npx)*(x355)*(x358)))+(((x355)*(x360)))+(x357)+(((IkReal(-1.00000000000000))*(x356)*(x359)))+(((IkReal(-1.00000000000000))*(npy)*(x356)*(x358))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x361=((IkReal(125.000000000000))*(npy));
IkReal x362=((IkReal(125.000000000000))*(npx));
if( IKabs(((gconst20)*(((((sj6)*(x362)))+(((cj6)*(x361))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst20)*(((((cj6)*(x362)))+(((IkReal(-1.00000000000000))*(sj6)*(x361))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j4array[0]=IKatan2(((gconst20)*(((((sj6)*(x362)))+(((cj6)*(x361)))))), ((gconst20)*(((((cj6)*(x362)))+(((IkReal(-1.00000000000000))*(sj6)*(x361)))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[4];
IkReal x363=IKcos(j4);
IkReal x364=IKsin(j4);
IkReal x365=((IkReal(0.328000000000000))*(sj3));
IkReal x366=((IkReal(1.00000000000000))*(cj6));
IkReal x367=((npx)*(sj6));
IkReal x368=((npy)*(sj6));
evalcond[0]=((((IkReal(-1.00000000000000))*(x367)))+(((x364)*(x365)))+(((IkReal(-1.00000000000000))*(npy)*(x366))));
evalcond[1]=((x368)+(((IkReal(-1.00000000000000))*(npx)*(x366)))+(((x363)*(x365))));
evalcond[2]=((((x364)*(x368)))+(((cj6)*(npy)*(x363)))+(((x363)*(x367)))+(((IkReal(-1.00000000000000))*(npx)*(x364)*(x366))));
evalcond[3]=((((IkReal(-1.00000000000000))*(x364)*(x367)))+(x365)+(((IkReal(-1.00000000000000))*(npx)*(x363)*(x366)))+(((IkReal(-1.00000000000000))*(npy)*(x364)*(x366)))+(((x363)*(x368))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}
    }

}

}

} else
{
IkReal x369=((IkReal(-0.323000000000000))+(((IkReal(-1.00000000000000))*(npz)))+(((IkReal(-0.328000000000000))*(cj3))));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(1.11022302462516e-16))+(j5)), IkReal(6.28318530717959))));
evalcond[1]=((IkReal(-0.211913000000000))+(pp)+(((IkReal(-0.211888000000000))*(cj3))));
evalcond[2]=x369;
evalcond[3]=x369;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=((((IkReal(-9.29506246281975))*(npy)*((npx)*(npx))))+(((npy)*((sj3)*(sj3))))+(((IkReal(-9.29506246281975))*((npy)*(npy)*(npy)))));
if( IKabs(dummyeval[0]) < 0.0000001000000000  )
{
continue;

} else
{
IkReal op[6+1], zeror[6];
int numroots;
IkReal x370=(sj3)*(sj3);
IkReal x371=(npy)*(npy);
IkReal x372=(npx)*(npx)*(npx);
IkReal x373=((npx)*(x371));
IkReal x374=((npx)*(x370));
IkReal x375=((IkReal(0.430336000000000))*(npy)*(x370));
IkReal x376=((((IkReal(4.00000000000000))*(npy)*((npx)*(npx))))+(((IkReal(4.00000000000000))*((npy)*(npy)*(npy)))));
IkReal x377=((((IkReal(-1.00000000000000))*(x376)))+(x375));
IkReal x378=((((IkReal(-0.860672000000000))*(x374)))+(((IkReal(8.00000000000000))*(x373)))+(((IkReal(8.00000000000000))*(x372))));
IkReal x379=((((IkReal(-1.00000000000000))*(x375)))+(x376));
op[0]=x377;
op[1]=x378;
op[2]=x377;
op[3]=((((IkReal(-1.72134400000000))*(x374)))+(((IkReal(16.0000000000000))*(x372)))+(((IkReal(16.0000000000000))*(x373))));
op[4]=x379;
op[5]=x378;
op[6]=x379;
polyroots6(op,zeror,numroots);
IkReal j6array[6], cj6array[6], sj6array[6], tempj6array[1];
int numsolutions = 0;
for(int ij6 = 0; ij6 < numroots; ++ij6)
{
IkReal htj6 = zeror[ij6];
tempj6array[0]=((IkReal(2.00000000000000))*(atan(htj6)));
for(int kj6 = 0; kj6 < 1; ++kj6)
{
j6array[numsolutions] = tempj6array[kj6];
if( j6array[numsolutions] > IKPI )
{
    j6array[numsolutions]-=IK2PI;
}
else if( j6array[numsolutions] < -IKPI )
{
    j6array[numsolutions]+=IK2PI;
}
sj6array[numsolutions] = IKsin(j6array[numsolutions]);
cj6array[numsolutions] = IKcos(j6array[numsolutions]);
numsolutions++;
}
}
bool j6valid[6]={true,true,true,true,true,true};
_nj6 = 6;
for(int ij6 = 0; ij6 < numsolutions; ++ij6)
    {
if( !j6valid[ij6] )
{
    continue;
}
    j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
htj6 = IKtan(j6/2);

_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < numsolutions; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
{
IkReal dummyeval[1];
IkReal gconst21;
gconst21=IKsign(sj3);
dummyeval[0]=sj3;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[2];
IkReal x380=((IkReal(1.00000000000000))*(sj3));
dummyeval[0]=((((IkReal(-1.00000000000000))*(npx)*(sj6)*(x380)))+(((IkReal(-1.00000000000000))*(cj6)*(npy)*(x380))));
dummyeval[1]=sj3;
if( IKabs(dummyeval[0]) < 0.0000010000000000  || IKabs(dummyeval[1]) < 0.0000010000000000  )
{
{
IkReal dummyeval[2];
dummyeval[0]=((((IkReal(-1.00000000000000))*(npy)*(sj3)*(sj6)))+(((cj6)*(npx)*(sj3))));
dummyeval[1]=sj3;
if( IKabs(dummyeval[0]) < 0.0000010000000000  || IKabs(dummyeval[1]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x381=((npy)*(sj6));
IkReal x382=((IkReal(41.0000000000000))*(sj3));
IkReal x383=((cj6)*(npx));
IkReal x384=((IkReal(125.000000000000))*(npx)*(npy));
IkReal x385=((IkReal(125.000000000000))*(cj6)*(sj6));
if( IKabs(((((IKabs(((((IkReal(-1.00000000000000))*(x381)*(x382)))+(((x382)*(x383))))) != 0)?((IkReal)1/(((((IkReal(-1.00000000000000))*(x381)*(x382)))+(((x382)*(x383)))))):(IkReal)1.0e30))*(((((IkReal(-125.000000000000))*(npx)*(sj6)*(x381)))+(((IkReal(-125.000000000000))*(cj6)*(npy)*(x381)))+(((IkReal(125.000000000000))*(cj6)*(npy)*(x383)))+(((IkReal(125.000000000000))*(npx)*(sj6)*(x383))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(0.0243902439024390))*(((IKabs(sj3) != 0)?((IkReal)1/(sj3)):(IkReal)1.0e30))*(((((IkReal(125.000000000000))*(x381)))+(((IkReal(-125.000000000000))*(x383))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((IKabs(((((IkReal(-1.00000000000000))*(x381)*(x382)))+(((x382)*(x383))))) != 0)?((IkReal)1/(((((IkReal(-1.00000000000000))*(x381)*(x382)))+(((x382)*(x383)))))):(IkReal)1.0e30))*(((((IkReal(-125.000000000000))*(npx)*(sj6)*(x381)))+(((IkReal(-125.000000000000))*(cj6)*(npy)*(x381)))+(((IkReal(125.000000000000))*(cj6)*(npy)*(x383)))+(((IkReal(125.000000000000))*(npx)*(sj6)*(x383)))))))+IKsqr(((IkReal(0.0243902439024390))*(((IKabs(sj3) != 0)?((IkReal)1/(sj3)):(IkReal)1.0e30))*(((((IkReal(125.000000000000))*(x381)))+(((IkReal(-125.000000000000))*(x383)))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((((IKabs(((((IkReal(-1.00000000000000))*(x381)*(x382)))+(((x382)*(x383))))) != 0)?((IkReal)1/(((((IkReal(-1.00000000000000))*(x381)*(x382)))+(((x382)*(x383)))))):(IkReal)1.0e30))*(((((IkReal(-125.000000000000))*(npx)*(sj6)*(x381)))+(((IkReal(-125.000000000000))*(cj6)*(npy)*(x381)))+(((IkReal(125.000000000000))*(cj6)*(npy)*(x383)))+(((IkReal(125.000000000000))*(npx)*(sj6)*(x383)))))), ((IkReal(0.0243902439024390))*(((IKabs(sj3) != 0)?((IkReal)1/(sj3)):(IkReal)1.0e30))*(((((IkReal(125.000000000000))*(x381)))+(((IkReal(-125.000000000000))*(x383)))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[4];
IkReal x386=IKcos(j4);
IkReal x387=IKsin(j4);
IkReal x388=((IkReal(0.328000000000000))*(sj3));
IkReal x389=((cj6)*(npx));
IkReal x390=((IkReal(1.00000000000000))*(npy));
IkReal x391=((sj6)*(x386));
IkReal x392=((IkReal(1.00000000000000))*(npx)*(sj6));
evalcond[0]=((((IkReal(-1.00000000000000))*(x392)))+(((x387)*(x388)))+(((IkReal(-1.00000000000000))*(cj6)*(x390))));
evalcond[1]=((((npy)*(sj6)))+(((IkReal(-1.00000000000000))*(x389)))+(((IkReal(-1.00000000000000))*(x386)*(x388))));
evalcond[2]=((((x387)*(x389)))+(((IkReal(-1.00000000000000))*(sj6)*(x387)*(x390)))+(((npx)*(x391)))+(((cj6)*(npy)*(x386))));
evalcond[3]=((((IkReal(-1.00000000000000))*(x387)*(x392)))+(((x386)*(x389)))+(x388)+(((IkReal(-1.00000000000000))*(cj6)*(x387)*(x390)))+(((IkReal(-1.00000000000000))*(x390)*(x391))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x393=((npy)*(sj6));
IkReal x394=((IkReal(5125.00000000000))*(sj3));
IkReal x395=((cj6)*(npx));
if( IKabs(((((IKabs(((((IkReal(-1.00000000000000))*(npx)*(sj6)*(x394)))+(((IkReal(-1.00000000000000))*(cj6)*(npy)*(x394))))) != 0)?((IkReal)1/(((((IkReal(-1.00000000000000))*(npx)*(sj6)*(x394)))+(((IkReal(-1.00000000000000))*(cj6)*(npy)*(x394)))))):(IkReal)1.0e30))*(((((IkReal(15625.0000000000))*((x395)*(x395))))+(((IkReal(15625.0000000000))*((x393)*(x393))))+(((IkReal(-1681.00000000000))*((sj3)*(sj3))))+(((IkReal(-31250.0000000000))*(x393)*(x395))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(0.0243902439024390))*(((IKabs(sj3) != 0)?((IkReal)1/(sj3)):(IkReal)1.0e30))*(((((IkReal(-125.000000000000))*(x395)))+(((IkReal(125.000000000000))*(x393))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((IKabs(((((IkReal(-1.00000000000000))*(npx)*(sj6)*(x394)))+(((IkReal(-1.00000000000000))*(cj6)*(npy)*(x394))))) != 0)?((IkReal)1/(((((IkReal(-1.00000000000000))*(npx)*(sj6)*(x394)))+(((IkReal(-1.00000000000000))*(cj6)*(npy)*(x394)))))):(IkReal)1.0e30))*(((((IkReal(15625.0000000000))*((x395)*(x395))))+(((IkReal(15625.0000000000))*((x393)*(x393))))+(((IkReal(-1681.00000000000))*((sj3)*(sj3))))+(((IkReal(-31250.0000000000))*(x393)*(x395)))))))+IKsqr(((IkReal(0.0243902439024390))*(((IKabs(sj3) != 0)?((IkReal)1/(sj3)):(IkReal)1.0e30))*(((((IkReal(-125.000000000000))*(x395)))+(((IkReal(125.000000000000))*(x393)))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((((IKabs(((((IkReal(-1.00000000000000))*(npx)*(sj6)*(x394)))+(((IkReal(-1.00000000000000))*(cj6)*(npy)*(x394))))) != 0)?((IkReal)1/(((((IkReal(-1.00000000000000))*(npx)*(sj6)*(x394)))+(((IkReal(-1.00000000000000))*(cj6)*(npy)*(x394)))))):(IkReal)1.0e30))*(((((IkReal(15625.0000000000))*((x395)*(x395))))+(((IkReal(15625.0000000000))*((x393)*(x393))))+(((IkReal(-1681.00000000000))*((sj3)*(sj3))))+(((IkReal(-31250.0000000000))*(x393)*(x395)))))), ((IkReal(0.0243902439024390))*(((IKabs(sj3) != 0)?((IkReal)1/(sj3)):(IkReal)1.0e30))*(((((IkReal(-125.000000000000))*(x395)))+(((IkReal(125.000000000000))*(x393)))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[4];
IkReal x396=IKcos(j4);
IkReal x397=IKsin(j4);
IkReal x398=((IkReal(0.328000000000000))*(sj3));
IkReal x399=((cj6)*(npx));
IkReal x400=((IkReal(1.00000000000000))*(npy));
IkReal x401=((sj6)*(x396));
IkReal x402=((IkReal(1.00000000000000))*(npx)*(sj6));
evalcond[0]=((((IkReal(-1.00000000000000))*(cj6)*(x400)))+(((x397)*(x398)))+(((IkReal(-1.00000000000000))*(x402))));
evalcond[1]=((((IkReal(-1.00000000000000))*(x399)))+(((npy)*(sj6)))+(((IkReal(-1.00000000000000))*(x396)*(x398))));
evalcond[2]=((((cj6)*(npy)*(x396)))+(((IkReal(-1.00000000000000))*(sj6)*(x397)*(x400)))+(((x397)*(x399)))+(((npx)*(x401))));
evalcond[3]=((((IkReal(-1.00000000000000))*(cj6)*(x397)*(x400)))+(((x396)*(x399)))+(x398)+(((IkReal(-1.00000000000000))*(x400)*(x401)))+(((IkReal(-1.00000000000000))*(x397)*(x402))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x403=((IkReal(125.000000000000))*(npy));
IkReal x404=((IkReal(125.000000000000))*(npx));
if( IKabs(((gconst21)*(((((sj6)*(x404)))+(((cj6)*(x403))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst21)*(((((IkReal(-1.00000000000000))*(cj6)*(x404)))+(((sj6)*(x403))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j4array[0]=IKatan2(((gconst21)*(((((sj6)*(x404)))+(((cj6)*(x403)))))), ((gconst21)*(((((IkReal(-1.00000000000000))*(cj6)*(x404)))+(((sj6)*(x403)))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[4];
IkReal x405=IKcos(j4);
IkReal x406=IKsin(j4);
IkReal x407=((IkReal(0.328000000000000))*(sj3));
IkReal x408=((cj6)*(npx));
IkReal x409=((IkReal(1.00000000000000))*(npy));
IkReal x410=((sj6)*(x405));
IkReal x411=((IkReal(1.00000000000000))*(npx)*(sj6));
evalcond[0]=((((IkReal(-1.00000000000000))*(cj6)*(x409)))+(((x406)*(x407)))+(((IkReal(-1.00000000000000))*(x411))));
evalcond[1]=((((npy)*(sj6)))+(((IkReal(-1.00000000000000))*(x405)*(x407)))+(((IkReal(-1.00000000000000))*(x408))));
evalcond[2]=((((cj6)*(npy)*(x405)))+(((x406)*(x408)))+(((npx)*(x410)))+(((IkReal(-1.00000000000000))*(sj6)*(x406)*(x409))));
evalcond[3]=((((IkReal(-1.00000000000000))*(x406)*(x411)))+(((x405)*(x408)))+(x407)+(((IkReal(-1.00000000000000))*(cj6)*(x406)*(x409)))+(((IkReal(-1.00000000000000))*(x409)*(x410))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}
    }

}

}

} else
{
if( 1 )
{
continue;

} else
{
}
}
}
}
}
}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
cj4array[0]=((IkReal(3.04878048780488))*(((IKabs(sj3) != 0)?((IkReal)1/(sj3)):(IkReal)1.0e30))*(((IKabs(sj5) != 0)?((IkReal)1/(sj5)):(IkReal)1.0e30))*(((((IkReal(-1.00000000000000))*(npz)))+(((IkReal(0.323000000000000))*(cj5)))+(((IkReal(0.328000000000000))*(cj3)*(cj5))))));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];

{
IkReal dummyeval[1];
IkReal gconst0;
IkReal x412=((IkReal(125.000000000000))*(sj5));
gconst0=IKsign(((((x412)*((npx)*(npx))))+(((x412)*((npy)*(npy))))));
dummyeval[0]=((((sj5)*((npy)*(npy))))+(((sj5)*((npx)*(npx)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst1;
gconst1=IKsign(((((IkReal(125.000000000000))*((npx)*(npx))))+(((IkReal(125.000000000000))*((npy)*(npy))))));
dummyeval[0]=(((npx)*(npx))+((npy)*(npy)));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[4];
IkReal x413=((IkReal(0.328000000000000))*(cj3));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(j5)), IkReal(6.28318530717959))));
evalcond[1]=((IkReal(-0.211913000000000))+(pp)+(((IkReal(-0.211888000000000))*(cj3))));
evalcond[2]=((IkReal(0.323000000000000))+(((IkReal(-1.00000000000000))*(npz)))+(x413));
evalcond[3]=((IkReal(-0.323000000000000))+(npz)+(((IkReal(-1.00000000000000))*(x413))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst2;
gconst2=IKsign(((((IkReal(125.000000000000))*((npx)*(npx))))+(((IkReal(125.000000000000))*((npy)*(npy))))));
dummyeval[0]=(((npx)*(npx))+((npy)*(npy)));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst3;
IkReal x414=((IkReal(125.000000000000))*(cj4));
gconst3=IKsign(((((IkReal(-1.00000000000000))*(x414)*((npy)*(npy))))+(((IkReal(-1.00000000000000))*(x414)*((npx)*(npx))))));
IkReal x415=((IkReal(1.00000000000000))*(cj4));
dummyeval[0]=((((IkReal(-1.00000000000000))*(x415)*((npx)*(npx))))+(((IkReal(-1.00000000000000))*(x415)*((npy)*(npy)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[4];
IkReal x416=((IkReal(0.328000000000000))*(cj3));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(1.57079632679490))+(j4)), IkReal(6.28318530717959))));
evalcond[1]=((IkReal(-0.211913000000000))+(pp)+(((IkReal(-0.211888000000000))*(cj3))));
evalcond[2]=((IkReal(0.323000000000000))+(((IkReal(-1.00000000000000))*(npz)))+(x416));
evalcond[3]=((IkReal(-0.323000000000000))+(npz)+(((IkReal(-1.00000000000000))*(x416))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst4;
gconst4=IKsign(((((IkReal(125.000000000000))*((npx)*(npx))))+(((IkReal(125.000000000000))*((npy)*(npy))))));
dummyeval[0]=(((npx)*(npx))+((npy)*(npy)));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
IkReal x417=((IkReal(41.0000000000000))*(gconst4)*(sj3));
if( IKabs(((npx)*(x417))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((npy)*(x417))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j6array[0]=IKatan2(((npx)*(x417)), ((npy)*(x417)));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[2];
IkReal x418=IKsin(j6);
IkReal x419=IKcos(j6);
IkReal x420=((IkReal(1.00000000000000))*(npx));
evalcond[0]=((((IkReal(0.328000000000000))*(sj3)))+(((IkReal(-1.00000000000000))*(npy)*(x419)))+(((IkReal(-1.00000000000000))*(x418)*(x420))));
evalcond[1]=((((npy)*(x418)))+(((IkReal(-1.00000000000000))*(x419)*(x420))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
IkReal x421=((IkReal(0.328000000000000))*(cj3));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(4.71238898038469))+(j4)), IkReal(6.28318530717959))));
evalcond[1]=((IkReal(-0.211913000000000))+(pp)+(((IkReal(-0.211888000000000))*(cj3))));
evalcond[2]=((IkReal(0.323000000000000))+(((IkReal(-1.00000000000000))*(npz)))+(x421));
evalcond[3]=((IkReal(-0.323000000000000))+(((IkReal(-1.00000000000000))*(x421)))+(npz));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst5;
gconst5=IKsign(((((IkReal(-125.000000000000))*((npy)*(npy))))+(((IkReal(-125.000000000000))*((npx)*(npx))))));
dummyeval[0]=((((IkReal(-1.00000000000000))*((npy)*(npy))))+(((IkReal(-1.00000000000000))*((npx)*(npx)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
IkReal x422=((IkReal(41.0000000000000))*(gconst5)*(sj3));
if( IKabs(((npx)*(x422))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((npy)*(x422))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j6array[0]=IKatan2(((npx)*(x422)), ((npy)*(x422)));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[2];
IkReal x423=IKsin(j6);
IkReal x424=IKcos(j6);
IkReal x425=((IkReal(1.00000000000000))*(npx));
evalcond[0]=((((IkReal(-0.328000000000000))*(sj3)))+(((IkReal(-1.00000000000000))*(npy)*(x424)))+(((IkReal(-1.00000000000000))*(x423)*(x425))));
evalcond[1]=((((npy)*(x423)))+(((IkReal(-1.00000000000000))*(x424)*(x425))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
if( 1 )
{
continue;

} else
{
}
}
}
}

} else
{
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
IkReal x426=(cj4)*(cj4);
IkReal x427=((IkReal(41.0000000000000))*(sj3));
IkReal x428=((cj4)*(sj4));
if( IKabs(((gconst3)*(((((IkReal(-1.00000000000000))*(npx)*(x427)*(x428)))+(((npy)*(x426)*(x427))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst3)*(((((IkReal(-1.00000000000000))*(npy)*(x427)*(x428)))+(((IkReal(-1.00000000000000))*(npx)*(x426)*(x427))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j6array[0]=IKatan2(((gconst3)*(((((IkReal(-1.00000000000000))*(npx)*(x427)*(x428)))+(((npy)*(x426)*(x427)))))), ((gconst3)*(((((IkReal(-1.00000000000000))*(npy)*(x427)*(x428)))+(((IkReal(-1.00000000000000))*(npx)*(x426)*(x427)))))));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[4];
IkReal x429=IKsin(j6);
IkReal x430=IKcos(j6);
IkReal x431=((IkReal(1.00000000000000))*(npx));
IkReal x432=((IkReal(0.328000000000000))*(sj3));
IkReal x433=((IkReal(1.00000000000000))*(npy));
IkReal x434=((npy)*(x429));
IkReal x435=((sj4)*(x430));
IkReal x436=((cj4)*(x430));
evalcond[0]=((((IkReal(-1.00000000000000))*(x430)*(x433)))+(((sj4)*(x432)))+(((IkReal(-1.00000000000000))*(x429)*(x431))));
evalcond[1]=((((IkReal(-1.00000000000000))*(x430)*(x431)))+(((cj4)*(x432)))+(x434));
evalcond[2]=((((sj4)*(x434)))+(((IkReal(-1.00000000000000))*(x431)*(x435)))+(((cj4)*(npx)*(x429)))+(((npy)*(x436))));
evalcond[3]=((((IkReal(-1.00000000000000))*(x433)*(x435)))+(((IkReal(-1.00000000000000))*(x431)*(x436)))+(((cj4)*(x434)))+(((IkReal(-1.00000000000000))*(sj4)*(x429)*(x431)))+(x432));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
IkReal x437=((IkReal(41.0000000000000))*(cj4)*(sj3));
IkReal x438=((IkReal(41.0000000000000))*(sj3)*(sj4));
if( IKabs(((gconst2)*(((((npx)*(x438)))+(((IkReal(-1.00000000000000))*(npy)*(x437))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst2)*(((((npx)*(x437)))+(((npy)*(x438))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j6array[0]=IKatan2(((gconst2)*(((((npx)*(x438)))+(((IkReal(-1.00000000000000))*(npy)*(x437)))))), ((gconst2)*(((((npx)*(x437)))+(((npy)*(x438)))))));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[4];
IkReal x439=IKsin(j6);
IkReal x440=IKcos(j6);
IkReal x441=((IkReal(1.00000000000000))*(npx));
IkReal x442=((IkReal(0.328000000000000))*(sj3));
IkReal x443=((IkReal(1.00000000000000))*(npy));
IkReal x444=((npy)*(x439));
IkReal x445=((sj4)*(x440));
IkReal x446=((cj4)*(x440));
evalcond[0]=((((sj4)*(x442)))+(((IkReal(-1.00000000000000))*(x439)*(x441)))+(((IkReal(-1.00000000000000))*(x440)*(x443))));
evalcond[1]=((((cj4)*(x442)))+(x444)+(((IkReal(-1.00000000000000))*(x440)*(x441))));
evalcond[2]=((((sj4)*(x444)))+(((npy)*(x446)))+(((cj4)*(npx)*(x439)))+(((IkReal(-1.00000000000000))*(x441)*(x445))));
evalcond[3]=((((IkReal(-1.00000000000000))*(sj4)*(x439)*(x441)))+(((cj4)*(x444)))+(((IkReal(-1.00000000000000))*(x443)*(x445)))+(x442)+(((IkReal(-1.00000000000000))*(x441)*(x446))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
IkReal x447=((IkReal(-0.323000000000000))+(((IkReal(-1.00000000000000))*(npz)))+(((IkReal(-0.328000000000000))*(cj3))));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(1.11022302462516e-16))+(j5)), IkReal(6.28318530717959))));
evalcond[1]=((IkReal(-0.211913000000000))+(pp)+(((IkReal(-0.211888000000000))*(cj3))));
evalcond[2]=x447;
evalcond[3]=x447;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst6;
gconst6=IKsign(((((IkReal(125.000000000000))*((npx)*(npx))))+(((IkReal(125.000000000000))*((npy)*(npy))))));
dummyeval[0]=(((npx)*(npx))+((npy)*(npy)));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst7;
IkReal x448=((IkReal(125.000000000000))*(cj4));
gconst7=IKsign(((((x448)*((npx)*(npx))))+(((x448)*((npy)*(npy))))));
dummyeval[0]=((((cj4)*((npx)*(npx))))+(((cj4)*((npy)*(npy)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[4];
IkReal x449=x447;
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(1.57079632679490))+(j4)), IkReal(6.28318530717959))));
evalcond[1]=((IkReal(-0.211913000000000))+(pp)+(((IkReal(-0.211888000000000))*(cj3))));
evalcond[2]=x449;
evalcond[3]=x449;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst8;
gconst8=IKsign(((((IkReal(125.000000000000))*((npx)*(npx))))+(((IkReal(125.000000000000))*((npy)*(npy))))));
dummyeval[0]=(((npx)*(npx))+((npy)*(npy)));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
IkReal x450=((IkReal(41.0000000000000))*(gconst8)*(sj3));
if( IKabs(((npx)*(x450))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((npy)*(x450))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j6array[0]=IKatan2(((npx)*(x450)), ((npy)*(x450)));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[2];
IkReal x451=IKsin(j6);
IkReal x452=IKcos(j6);
IkReal x453=((IkReal(1.00000000000000))*(npx));
evalcond[0]=((((IkReal(-1.00000000000000))*(npy)*(x452)))+(((IkReal(0.328000000000000))*(sj3)))+(((IkReal(-1.00000000000000))*(x451)*(x453))));
evalcond[1]=((((npy)*(x451)))+(((IkReal(-1.00000000000000))*(x452)*(x453))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
IkReal x454=x447;
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(4.71238898038469))+(j4)), IkReal(6.28318530717959))));
evalcond[1]=((IkReal(-0.211913000000000))+(pp)+(((IkReal(-0.211888000000000))*(cj3))));
evalcond[2]=x454;
evalcond[3]=x454;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst9;
gconst9=IKsign(((((IkReal(-125.000000000000))*((npy)*(npy))))+(((IkReal(-125.000000000000))*((npx)*(npx))))));
dummyeval[0]=((((IkReal(-1.00000000000000))*((npy)*(npy))))+(((IkReal(-1.00000000000000))*((npx)*(npx)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
IkReal x455=((IkReal(41.0000000000000))*(gconst9)*(sj3));
if( IKabs(((npx)*(x455))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((npy)*(x455))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j6array[0]=IKatan2(((npx)*(x455)), ((npy)*(x455)));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[2];
IkReal x456=IKsin(j6);
IkReal x457=IKcos(j6);
IkReal x458=((IkReal(1.00000000000000))*(npx));
evalcond[0]=((((IkReal(-1.00000000000000))*(npy)*(x457)))+(((IkReal(-0.328000000000000))*(sj3)))+(((IkReal(-1.00000000000000))*(x456)*(x458))));
evalcond[1]=((((npy)*(x456)))+(((IkReal(-1.00000000000000))*(x457)*(x458))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
if( 1 )
{
continue;

} else
{
}
}
}
}

} else
{
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
IkReal x459=(cj4)*(cj4);
IkReal x460=((IkReal(41.0000000000000))*(sj3));
IkReal x461=((cj4)*(sj4));
if( IKabs(((gconst7)*(((((npy)*(x459)*(x460)))+(((npx)*(x460)*(x461))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst7)*(((((npy)*(x460)*(x461)))+(((IkReal(-1.00000000000000))*(npx)*(x459)*(x460))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j6array[0]=IKatan2(((gconst7)*(((((npy)*(x459)*(x460)))+(((npx)*(x460)*(x461)))))), ((gconst7)*(((((npy)*(x460)*(x461)))+(((IkReal(-1.00000000000000))*(npx)*(x459)*(x460)))))));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[4];
IkReal x462=IKsin(j6);
IkReal x463=IKcos(j6);
IkReal x464=((IkReal(1.00000000000000))*(npx));
IkReal x465=((IkReal(0.328000000000000))*(sj3));
IkReal x466=((IkReal(1.00000000000000))*(npy));
IkReal x467=((npy)*(x462));
IkReal x468=((sj4)*(x463));
IkReal x469=((cj4)*(x463));
evalcond[0]=((((IkReal(-1.00000000000000))*(x462)*(x464)))+(((IkReal(-1.00000000000000))*(x463)*(x466)))+(((sj4)*(x465))));
evalcond[1]=((((IkReal(-1.00000000000000))*(x463)*(x464)))+(((IkReal(-1.00000000000000))*(cj4)*(x465)))+(x467));
evalcond[2]=((((cj4)*(npx)*(x462)))+(((npx)*(x468)))+(((IkReal(-1.00000000000000))*(sj4)*(x462)*(x466)))+(((npy)*(x469))));
evalcond[3]=((((IkReal(-1.00000000000000))*(x466)*(x468)))+(((IkReal(-1.00000000000000))*(cj4)*(x462)*(x466)))+(((npx)*(x469)))+(((IkReal(-1.00000000000000))*(sj4)*(x462)*(x464)))+(x465));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
IkReal x470=((IkReal(41.0000000000000))*(cj4)*(sj3));
IkReal x471=((IkReal(41.0000000000000))*(sj3)*(sj4));
if( IKabs(((gconst6)*(((((npy)*(x470)))+(((npx)*(x471))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst6)*(((((IkReal(-1.00000000000000))*(npx)*(x470)))+(((npy)*(x471))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j6array[0]=IKatan2(((gconst6)*(((((npy)*(x470)))+(((npx)*(x471)))))), ((gconst6)*(((((IkReal(-1.00000000000000))*(npx)*(x470)))+(((npy)*(x471)))))));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[4];
IkReal x472=IKsin(j6);
IkReal x473=IKcos(j6);
IkReal x474=((IkReal(1.00000000000000))*(npx));
IkReal x475=((IkReal(0.328000000000000))*(sj3));
IkReal x476=((IkReal(1.00000000000000))*(npy));
IkReal x477=((npy)*(x472));
IkReal x478=((sj4)*(x473));
IkReal x479=((cj4)*(x473));
evalcond[0]=((((sj4)*(x475)))+(((IkReal(-1.00000000000000))*(x472)*(x474)))+(((IkReal(-1.00000000000000))*(x473)*(x476))));
evalcond[1]=((((IkReal(-1.00000000000000))*(cj4)*(x475)))+(((IkReal(-1.00000000000000))*(x473)*(x474)))+(x477));
evalcond[2]=((((cj4)*(npx)*(x472)))+(((npy)*(x479)))+(((IkReal(-1.00000000000000))*(sj4)*(x472)*(x476)))+(((npx)*(x478))));
evalcond[3]=((((IkReal(-1.00000000000000))*(cj4)*(x472)*(x476)))+(((IkReal(-1.00000000000000))*(sj4)*(x472)*(x474)))+(((IkReal(-1.00000000000000))*(x476)*(x478)))+(((npx)*(x479)))+(x475));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
if( 1 )
{
continue;

} else
{
}
}
}
}

} else
{
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
IkReal x480=((IkReal(40.3750000000000))*(sj5));
IkReal x481=((IkReal(41.0000000000000))*(sj3));
IkReal x482=((cj4)*(cj5));
IkReal x483=((IkReal(41.0000000000000))*(cj3)*(sj5));
if( IKabs(((gconst1)*(((((IkReal(-1.00000000000000))*(npy)*(x480)))+(((IkReal(-1.00000000000000))*(npy)*(x483)))+(((npx)*(sj4)*(x481)))+(((IkReal(-1.00000000000000))*(npy)*(x481)*(x482))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst1)*(((((npy)*(sj4)*(x481)))+(((npx)*(x480)))+(((npx)*(x483)))+(((npx)*(x481)*(x482))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j6array[0]=IKatan2(((gconst1)*(((((IkReal(-1.00000000000000))*(npy)*(x480)))+(((IkReal(-1.00000000000000))*(npy)*(x483)))+(((npx)*(sj4)*(x481)))+(((IkReal(-1.00000000000000))*(npy)*(x481)*(x482)))))), ((gconst1)*(((((npy)*(sj4)*(x481)))+(((npx)*(x480)))+(((npx)*(x483)))+(((npx)*(x481)*(x482)))))));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[5];
IkReal x484=IKcos(j6);
IkReal x485=IKsin(j6);
IkReal x486=((IkReal(0.328000000000000))*(cj3));
IkReal x487=((IkReal(1.00000000000000))*(sj4));
IkReal x488=((npz)*(sj5));
IkReal x489=((IkReal(0.328000000000000))*(sj3));
IkReal x490=((cj4)*(cj5));
IkReal x491=((IkReal(1.00000000000000))*(npx));
IkReal x492=((npy)*(x485));
IkReal x493=((npy)*(x484));
IkReal x494=((npx)*(x484));
IkReal x495=((npx)*(x485));
evalcond[0]=((((sj4)*(x489)))+(((IkReal(-1.00000000000000))*(x493)))+(((IkReal(-1.00000000000000))*(x485)*(x491))));
evalcond[1]=((IkReal(-0.323000000000000))+(((IkReal(-1.00000000000000))*(x486)))+(((IkReal(-1.00000000000000))*(sj5)*(x492)))+(((cj5)*(npz)))+(((sj5)*(x494))));
evalcond[2]=((((x489)*(x490)))+(((IkReal(0.323000000000000))*(sj5)))+(x492)+(((sj5)*(x486)))+(((IkReal(-1.00000000000000))*(x484)*(x491))));
evalcond[3]=((((cj5)*(sj4)*(x492)))+(((sj4)*(x488)))+(((cj4)*(x495)))+(((cj4)*(x493)))+(((IkReal(-1.00000000000000))*(cj5)*(x487)*(x494))));
evalcond[4]=((((x490)*(x492)))+(((cj4)*(x488)))+(x489)+(((IkReal(-1.00000000000000))*(x487)*(x493)))+(((IkReal(-1.00000000000000))*(x487)*(x495)))+(((IkReal(-1.00000000000000))*(x484)*(x490)*(x491))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
IkReal x496=((IkReal(41.0000000000000))*(npy));
IkReal x497=((IkReal(41.0000000000000))*(npx));
IkReal x498=((IkReal(125.000000000000))*(cj5)*(npz));
IkReal x499=((sj3)*(sj4)*(sj5));
if( IKabs(((gconst0)*(((((IkReal(-1.00000000000000))*(cj3)*(x496)))+(((IkReal(-40.3750000000000))*(npy)))+(((x497)*(x499)))+(((npy)*(x498))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst0)*(((((x496)*(x499)))+(((IkReal(40.3750000000000))*(npx)))+(((IkReal(-1.00000000000000))*(npx)*(x498)))+(((cj3)*(x497))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j6array[0]=IKatan2(((gconst0)*(((((IkReal(-1.00000000000000))*(cj3)*(x496)))+(((IkReal(-40.3750000000000))*(npy)))+(((x497)*(x499)))+(((npy)*(x498)))))), ((gconst0)*(((((x496)*(x499)))+(((IkReal(40.3750000000000))*(npx)))+(((IkReal(-1.00000000000000))*(npx)*(x498)))+(((cj3)*(x497)))))));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[5];
IkReal x500=IKcos(j6);
IkReal x501=IKsin(j6);
IkReal x502=((IkReal(0.328000000000000))*(cj3));
IkReal x503=((IkReal(1.00000000000000))*(sj4));
IkReal x504=((npz)*(sj5));
IkReal x505=((IkReal(0.328000000000000))*(sj3));
IkReal x506=((cj4)*(cj5));
IkReal x507=((IkReal(1.00000000000000))*(npx));
IkReal x508=((npy)*(x501));
IkReal x509=((npy)*(x500));
IkReal x510=((npx)*(x500));
IkReal x511=((npx)*(x501));
evalcond[0]=((((IkReal(-1.00000000000000))*(x501)*(x507)))+(((sj4)*(x505)))+(((IkReal(-1.00000000000000))*(x509))));
evalcond[1]=((IkReal(-0.323000000000000))+(((IkReal(-1.00000000000000))*(x502)))+(((cj5)*(npz)))+(((sj5)*(x510)))+(((IkReal(-1.00000000000000))*(sj5)*(x508))));
evalcond[2]=((((sj5)*(x502)))+(((IkReal(0.323000000000000))*(sj5)))+(((x505)*(x506)))+(x508)+(((IkReal(-1.00000000000000))*(x500)*(x507))));
evalcond[3]=((((cj4)*(x511)))+(((cj4)*(x509)))+(((cj5)*(sj4)*(x508)))+(((sj4)*(x504)))+(((IkReal(-1.00000000000000))*(cj5)*(x503)*(x510))));
evalcond[4]=((((IkReal(-1.00000000000000))*(x503)*(x511)))+(((x506)*(x508)))+(((IkReal(-1.00000000000000))*(x500)*(x506)*(x507)))+(((IkReal(-1.00000000000000))*(x503)*(x509)))+(((cj4)*(x504)))+(x505));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}
}
}

}

}

} else
{
{
IkReal j6array[2], cj6array[2], sj6array[2];
bool j6valid[2]={false};
_nj6 = 2;
IkReal x512=(sj5)*(sj5);
if( IKabs(((npx)*(sj5))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(-1.00000000000000))*(npy)*(sj5))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
IkReal x513=((IkReal(1.00000000000000))*(IKatan2(((npx)*(sj5)), ((IkReal(-1.00000000000000))*(npy)*(sj5)))));
if( (((((x512)*((npx)*(npx))))+(((x512)*((npy)*(npy)))))) < (IkReal)-0.00001 )
    continue;
if( (((((IKabs(IKabs(IKsqrt(((((x512)*((npx)*(npx))))+(((x512)*((npy)*(npy)))))))) != 0)?((IkReal)1/(IKabs(IKsqrt(((((x512)*((npx)*(npx))))+(((x512)*((npy)*(npy))))))))):(IkReal)1.0e30))*(((IkReal(-0.323000000000000))+(((cj5)*(npz)))+(((IkReal(-0.328000000000000))*(cj3))))))) < -1-IKFAST_SINCOS_THRESH || (((((IKabs(IKabs(IKsqrt(((((x512)*((npx)*(npx))))+(((x512)*((npy)*(npy)))))))) != 0)?((IkReal)1/(IKabs(IKsqrt(((((x512)*((npx)*(npx))))+(((x512)*((npy)*(npy))))))))):(IkReal)1.0e30))*(((IkReal(-0.323000000000000))+(((cj5)*(npz)))+(((IkReal(-0.328000000000000))*(cj3))))))) > 1+IKFAST_SINCOS_THRESH )
    continue;
IkReal x514=IKasin(((((IKabs(IKabs(IKsqrt(((((x512)*((npx)*(npx))))+(((x512)*((npy)*(npy)))))))) != 0)?((IkReal)1/(IKabs(IKsqrt(((((x512)*((npx)*(npx))))+(((x512)*((npy)*(npy))))))))):(IkReal)1.0e30))*(((IkReal(-0.323000000000000))+(((cj5)*(npz)))+(((IkReal(-0.328000000000000))*(cj3)))))));
j6array[0]=((((IkReal(-1.00000000000000))*(x514)))+(((IkReal(-1.00000000000000))*(x513))));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
j6array[1]=((IkReal(3.14159265358979))+(x514)+(((IkReal(-1.00000000000000))*(x513))));
sj6array[1]=IKsin(j6array[1]);
cj6array[1]=IKcos(j6array[1]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
if( j6array[1] > IKPI )
{
    j6array[1]-=IK2PI;
}
else if( j6array[1] < -IKPI )
{    j6array[1]+=IK2PI;
}
j6valid[1] = true;
for(int ij6 = 0; ij6 < 2; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 2; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];

{
IkReal dummyeval[2];
dummyeval[0]=sj3;
dummyeval[1]=((((cj6)*(npy)*(sj3)))+(((npx)*(sj3)*(sj6))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  || IKabs(dummyeval[1]) < 0.0000010000000000  )
{
{
IkReal dummyeval[2];
dummyeval[0]=sj3;
dummyeval[1]=sj5;
if( IKabs(dummyeval[0]) < 0.0000010000000000  || IKabs(dummyeval[1]) < 0.0000010000000000  )
{
{
IkReal dummyeval[2];
dummyeval[0]=sj3;
dummyeval[1]=cj5;
if( IKabs(dummyeval[0]) < 0.0000010000000000  || IKabs(dummyeval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[6];
IkReal x515=((IkReal(1.00000000000000))*(npy));
IkReal x516=((IkReal(1.00000000000000))*(npx));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(j3)), IkReal(6.28318530717959))));
evalcond[1]=((IkReal(-0.423801000000000))+(pp));
evalcond[2]=((((IkReal(-1.00000000000000))*(cj6)*(x515)))+(((IkReal(-1.00000000000000))*(sj6)*(x516))));
evalcond[3]=((((IkReal(-1.00000000000000))*(npz)))+(((IkReal(0.651000000000000))*(cj5))));
evalcond[4]=((IkReal(-0.651000000000000))+(((cj5)*(npz)))+(((IkReal(-1.00000000000000))*(sj5)*(sj6)*(x515)))+(((cj6)*(npx)*(sj5))));
evalcond[5]=((((IkReal(0.651000000000000))*(sj5)))+(((IkReal(-1.00000000000000))*(cj6)*(x516)))+(((npy)*(sj6))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  )
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
if( IKabs(((((cj6)*(npy)))+(((npx)*(sj6))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((npz)*(sj5)))+(((cj5)*(npy)*(sj6)))+(((IkReal(-1.00000000000000))*(cj5)*(cj6)*(npx))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
IkReal x517=IKatan2(((((cj6)*(npy)))+(((npx)*(sj6)))), ((((npz)*(sj5)))+(((cj5)*(npy)*(sj6)))+(((IkReal(-1.00000000000000))*(cj5)*(cj6)*(npx)))));
j4array[0]=((IkReal(-1.00000000000000))*(x517));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
j4array[1]=((IkReal(3.14159265358979))+(((IkReal(-1.00000000000000))*(x517))));
sj4array[1]=IKsin(j4array[1]);
cj4array[1]=IKcos(j4array[1]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
if( j4array[1] > IKPI )
{
    j4array[1]-=IK2PI;
}
else if( j4array[1] < -IKPI )
{    j4array[1]+=IK2PI;
}
j4valid[1] = true;
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[1];
IkReal x518=IKcos(j4);
IkReal x519=IKsin(j4);
IkReal x520=((IkReal(1.00000000000000))*(npx));
IkReal x521=((cj5)*(x518));
evalcond[0]=((((IkReal(-1.00000000000000))*(sj6)*(x519)*(x520)))+(((npz)*(sj5)*(x518)))+(((npy)*(sj6)*(x521)))+(((IkReal(-1.00000000000000))*(cj6)*(npy)*(x519)))+(((IkReal(-1.00000000000000))*(cj6)*(x520)*(x521))));
if( IKabs(evalcond[0]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

} else
{
IkReal x522=((IkReal(1.00000000000000))*(npy));
IkReal x523=((IkReal(1.00000000000000))*(npx));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(1.11022302462516e-16))+(j3)), IkReal(6.28318530717959))));
evalcond[1]=((IkReal(-2.50000000000000e-5))+(pp));
evalcond[2]=((((IkReal(-1.00000000000000))*(sj6)*(x523)))+(((IkReal(-1.00000000000000))*(cj6)*(x522))));
evalcond[3]=((((IkReal(-1.00000000000000))*(npz)))+(((IkReal(-0.00500000000000000))*(cj5))));
evalcond[4]=((IkReal(0.00500000000000000))+(((IkReal(-1.00000000000000))*(sj5)*(sj6)*(x522)))+(((cj5)*(npz)))+(((cj6)*(npx)*(sj5))));
evalcond[5]=((((IkReal(-1.00000000000000))*(cj6)*(x523)))+(((npy)*(sj6)))+(((IkReal(-0.00500000000000000))*(sj5))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  )
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
if( IKabs(((((cj6)*(npy)))+(((npx)*(sj6))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((npz)*(sj5)))+(((cj5)*(npy)*(sj6)))+(((IkReal(-1.00000000000000))*(cj5)*(cj6)*(npx))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
IkReal x524=IKatan2(((((cj6)*(npy)))+(((npx)*(sj6)))), ((((npz)*(sj5)))+(((cj5)*(npy)*(sj6)))+(((IkReal(-1.00000000000000))*(cj5)*(cj6)*(npx)))));
j4array[0]=((IkReal(-1.00000000000000))*(x524));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
j4array[1]=((IkReal(3.14159265358979))+(((IkReal(-1.00000000000000))*(x524))));
sj4array[1]=IKsin(j4array[1]);
cj4array[1]=IKcos(j4array[1]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
if( j4array[1] > IKPI )
{
    j4array[1]-=IK2PI;
}
else if( j4array[1] < -IKPI )
{    j4array[1]+=IK2PI;
}
j4valid[1] = true;
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[1];
IkReal x525=IKcos(j4);
IkReal x526=IKsin(j4);
IkReal x527=((IkReal(1.00000000000000))*(npx));
IkReal x528=((cj5)*(x525));
evalcond[0]=((((IkReal(-1.00000000000000))*(cj6)*(x527)*(x528)))+(((npy)*(sj6)*(x528)))+(((IkReal(-1.00000000000000))*(cj6)*(npy)*(x526)))+(((IkReal(-1.00000000000000))*(sj6)*(x526)*(x527)))+(((npz)*(sj5)*(x525))));
if( IKabs(evalcond[0]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

} else
{
IkReal x529=((IkReal(0.328000000000000))*(cj3));
IkReal x530=((cj6)*(npx));
IkReal x531=((npy)*(sj6));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(1.57079632679490))+(j5)), IkReal(6.28318530717959))));
evalcond[1]=((IkReal(-0.211913000000000))+(pp)+(((IkReal(-0.211888000000000))*(cj3))));
evalcond[2]=((IkReal(-0.323000000000000))+(((IkReal(-1.00000000000000))*(x531)))+(((IkReal(-1.00000000000000))*(x529)))+(x530));
evalcond[3]=((IkReal(0.323000000000000))+(((IkReal(-1.00000000000000))*(x530)))+(x531)+(x529));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst10;
gconst10=IKsign(sj3);
dummyeval[0]=sj3;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst11;
gconst11=IKsign(sj3);
dummyeval[0]=sj3;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[6];
IkReal x532=((IkReal(1.00000000000000))*(cj6));
IkReal x533=((npy)*(sj6));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(j3)), IkReal(6.28318530717959))));
evalcond[1]=((IkReal(-0.423801000000000))+(pp));
evalcond[2]=((((IkReal(-1.00000000000000))*(npy)*(x532)))+(((IkReal(-1.00000000000000))*(npx)*(sj6))));
evalcond[3]=((IkReal(-1.00000000000000))*(npz));
evalcond[4]=((IkReal(-0.651000000000000))+(((cj6)*(npx)))+(((IkReal(-1.00000000000000))*(x533))));
evalcond[5]=((IkReal(0.651000000000000))+(((IkReal(-1.00000000000000))*(npx)*(x532)))+(x533));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  )
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
if( IKabs(((((cj6)*(npy)))+(((npx)*(sj6))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(npz) < IKFAST_ATAN2_MAGTHRESH )
    continue;
IkReal x534=IKatan2(((((cj6)*(npy)))+(((npx)*(sj6)))), npz);
j4array[0]=((IkReal(-1.00000000000000))*(x534));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
j4array[1]=((IkReal(3.14159265358979))+(((IkReal(-1.00000000000000))*(x534))));
sj4array[1]=IKsin(j4array[1]);
cj4array[1]=IKcos(j4array[1]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
if( j4array[1] > IKPI )
{
    j4array[1]-=IK2PI;
}
else if( j4array[1] < -IKPI )
{    j4array[1]+=IK2PI;
}
j4valid[1] = true;
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[1];
IkReal x535=IKsin(j4);
IkReal x536=((IkReal(1.00000000000000))*(x535));
evalcond[0]=((((IkReal(-1.00000000000000))*(npx)*(sj6)*(x536)))+(((npz)*(IKcos(j4))))+(((IkReal(-1.00000000000000))*(cj6)*(npy)*(x536))));
if( IKabs(evalcond[0]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

} else
{
IkReal x537=((IkReal(1.00000000000000))*(cj6));
IkReal x538=((npy)*(sj6));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(1.11022302462516e-16))+(j3)), IkReal(6.28318530717959))));
evalcond[1]=((IkReal(-2.50000000000000e-5))+(pp));
evalcond[2]=((((IkReal(-1.00000000000000))*(npy)*(x537)))+(((IkReal(-1.00000000000000))*(npx)*(sj6))));
evalcond[3]=((IkReal(-1.00000000000000))*(npz));
evalcond[4]=((IkReal(0.00500000000000000))+(((cj6)*(npx)))+(((IkReal(-1.00000000000000))*(x538))));
evalcond[5]=((IkReal(-0.00500000000000000))+(((IkReal(-1.00000000000000))*(npx)*(x537)))+(x538));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  )
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
if( IKabs(((((cj6)*(npy)))+(((npx)*(sj6))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(npz) < IKFAST_ATAN2_MAGTHRESH )
    continue;
IkReal x539=IKatan2(((((cj6)*(npy)))+(((npx)*(sj6)))), npz);
j4array[0]=((IkReal(-1.00000000000000))*(x539));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
j4array[1]=((IkReal(3.14159265358979))+(((IkReal(-1.00000000000000))*(x539))));
sj4array[1]=IKsin(j4array[1]);
cj4array[1]=IKcos(j4array[1]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
if( j4array[1] > IKPI )
{
    j4array[1]-=IK2PI;
}
else if( j4array[1] < -IKPI )
{    j4array[1]+=IK2PI;
}
j4valid[1] = true;
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[1];
IkReal x540=IKsin(j4);
IkReal x541=((IkReal(1.00000000000000))*(x540));
evalcond[0]=((((IkReal(-1.00000000000000))*(npx)*(sj6)*(x541)))+(((IkReal(-1.00000000000000))*(cj6)*(npy)*(x541)))+(((npz)*(IKcos(j4)))));
if( IKabs(evalcond[0]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

} else
{
if( 1 )
{
continue;

} else
{
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
if( IKabs(((gconst11)*(((((IkReal(125.000000000000))*(cj6)*(npy)))+(((IkReal(125.000000000000))*(npx)*(sj6))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(-125.000000000000))*(gconst11)*(npz))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j4array[0]=IKatan2(((gconst11)*(((((IkReal(125.000000000000))*(cj6)*(npy)))+(((IkReal(125.000000000000))*(npx)*(sj6)))))), ((IkReal(-125.000000000000))*(gconst11)*(npz)));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[4];
IkReal x542=IKsin(j4);
IkReal x543=IKcos(j4);
IkReal x544=((IkReal(0.328000000000000))*(sj3));
IkReal x545=((npx)*(sj6));
IkReal x546=((cj6)*(npy));
IkReal x547=((IkReal(1.00000000000000))*(x542));
evalcond[0]=((((IkReal(-1.00000000000000))*(x545)))+(((IkReal(-1.00000000000000))*(x546)))+(((x542)*(x544))));
evalcond[1]=((((IkReal(-1.00000000000000))*(npz)))+(((IkReal(-1.00000000000000))*(x543)*(x544))));
evalcond[2]=((((npz)*(x542)))+(((x543)*(x545)))+(((x543)*(x546))));
evalcond[3]=((((IkReal(-1.00000000000000))*(x545)*(x547)))+(((npz)*(x543)))+(x544)+(((IkReal(-1.00000000000000))*(x546)*(x547))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
if( IKabs(((gconst10)*(((((IkReal(125.000000000000))*(cj6)*(npy)))+(((IkReal(125.000000000000))*(npx)*(sj6))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(-125.000000000000))*(gconst10)*(npz))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j4array[0]=IKatan2(((gconst10)*(((((IkReal(125.000000000000))*(cj6)*(npy)))+(((IkReal(125.000000000000))*(npx)*(sj6)))))), ((IkReal(-125.000000000000))*(gconst10)*(npz)));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[4];
IkReal x548=IKsin(j4);
IkReal x549=IKcos(j4);
IkReal x550=((IkReal(0.328000000000000))*(sj3));
IkReal x551=((npx)*(sj6));
IkReal x552=((cj6)*(npy));
IkReal x553=((IkReal(1.00000000000000))*(x548));
evalcond[0]=((((x548)*(x550)))+(((IkReal(-1.00000000000000))*(x551)))+(((IkReal(-1.00000000000000))*(x552))));
evalcond[1]=((((IkReal(-1.00000000000000))*(npz)))+(((IkReal(-1.00000000000000))*(x549)*(x550))));
evalcond[2]=((((npz)*(x548)))+(((x549)*(x552)))+(((x549)*(x551))));
evalcond[3]=((((npz)*(x549)))+(((IkReal(-1.00000000000000))*(x551)*(x553)))+(((IkReal(-1.00000000000000))*(x552)*(x553)))+(x550));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
IkReal x554=((IkReal(-0.323000000000000))+(((IkReal(-1.00000000000000))*(cj6)*(npx)))+(((npy)*(sj6)))+(((IkReal(-0.328000000000000))*(cj3))));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(4.71238898038469))+(j5)), IkReal(6.28318530717959))));
evalcond[1]=((IkReal(-0.211913000000000))+(pp)+(((IkReal(-0.211888000000000))*(cj3))));
evalcond[2]=x554;
evalcond[3]=x554;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst12;
gconst12=IKsign(sj3);
dummyeval[0]=sj3;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst13;
gconst13=IKsign(sj3);
dummyeval[0]=sj3;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[6];
IkReal x555=((IkReal(1.00000000000000))*(npx));
IkReal x556=((IkReal(-0.651000000000000))+(((IkReal(-1.00000000000000))*(cj6)*(x555)))+(((npy)*(sj6))));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(j3)), IkReal(6.28318530717959))));
evalcond[1]=((IkReal(-0.423801000000000))+(pp));
evalcond[2]=((((IkReal(-1.00000000000000))*(cj6)*(npy)))+(((IkReal(-1.00000000000000))*(sj6)*(x555))));
evalcond[3]=((IkReal(-1.00000000000000))*(npz));
evalcond[4]=x556;
evalcond[5]=x556;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  )
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
if( IKabs(((((cj6)*(npy)))+(((npx)*(sj6))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(-1.00000000000000))*(npz))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
IkReal x557=IKatan2(((((cj6)*(npy)))+(((npx)*(sj6)))), ((IkReal(-1.00000000000000))*(npz)));
j4array[0]=((IkReal(-1.00000000000000))*(x557));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
j4array[1]=((IkReal(3.14159265358979))+(((IkReal(-1.00000000000000))*(x557))));
sj4array[1]=IKsin(j4array[1]);
cj4array[1]=IKcos(j4array[1]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
if( j4array[1] > IKPI )
{
    j4array[1]-=IK2PI;
}
else if( j4array[1] < -IKPI )
{    j4array[1]+=IK2PI;
}
j4valid[1] = true;
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[1];
IkReal x558=IKsin(j4);
IkReal x559=((IkReal(1.00000000000000))*(x558));
evalcond[0]=((((IkReal(-1.00000000000000))*(npx)*(sj6)*(x559)))+(((IkReal(-1.00000000000000))*(cj6)*(npy)*(x559)))+(((IkReal(-1.00000000000000))*(npz)*(IKcos(j4)))));
if( IKabs(evalcond[0]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

} else
{
IkReal x560=((IkReal(1.00000000000000))*(npx));
IkReal x561=((IkReal(0.00500000000000000))+(((npy)*(sj6)))+(((IkReal(-1.00000000000000))*(cj6)*(x560))));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(1.11022302462516e-16))+(j3)), IkReal(6.28318530717959))));
evalcond[1]=((IkReal(-2.50000000000000e-5))+(pp));
evalcond[2]=((((IkReal(-1.00000000000000))*(sj6)*(x560)))+(((IkReal(-1.00000000000000))*(cj6)*(npy))));
evalcond[3]=((IkReal(-1.00000000000000))*(npz));
evalcond[4]=x561;
evalcond[5]=x561;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  )
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
if( IKabs(((((cj6)*(npy)))+(((npx)*(sj6))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(-1.00000000000000))*(npz))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
IkReal x562=IKatan2(((((cj6)*(npy)))+(((npx)*(sj6)))), ((IkReal(-1.00000000000000))*(npz)));
j4array[0]=((IkReal(-1.00000000000000))*(x562));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
j4array[1]=((IkReal(3.14159265358979))+(((IkReal(-1.00000000000000))*(x562))));
sj4array[1]=IKsin(j4array[1]);
cj4array[1]=IKcos(j4array[1]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
if( j4array[1] > IKPI )
{
    j4array[1]-=IK2PI;
}
else if( j4array[1] < -IKPI )
{    j4array[1]+=IK2PI;
}
j4valid[1] = true;
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[1];
IkReal x563=IKsin(j4);
IkReal x564=((IkReal(1.00000000000000))*(x563));
evalcond[0]=((((IkReal(-1.00000000000000))*(npx)*(sj6)*(x564)))+(((IkReal(-1.00000000000000))*(cj6)*(npy)*(x564)))+(((IkReal(-1.00000000000000))*(npz)*(IKcos(j4)))));
if( IKabs(evalcond[0]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

} else
{
if( 1 )
{
continue;

} else
{
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
if( IKabs(((gconst13)*(((((IkReal(125.000000000000))*(cj6)*(npy)))+(((IkReal(125.000000000000))*(npx)*(sj6))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(125.000000000000))*(gconst13)*(npz))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j4array[0]=IKatan2(((gconst13)*(((((IkReal(125.000000000000))*(cj6)*(npy)))+(((IkReal(125.000000000000))*(npx)*(sj6)))))), ((IkReal(125.000000000000))*(gconst13)*(npz)));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[4];
IkReal x565=IKcos(j4);
IkReal x566=IKsin(j4);
IkReal x567=((IkReal(0.328000000000000))*(sj3));
IkReal x568=((IkReal(1.00000000000000))*(npz));
IkReal x569=((npx)*(sj6));
IkReal x570=((cj6)*(npy));
IkReal x571=((IkReal(1.00000000000000))*(x566));
evalcond[0]=((((x566)*(x567)))+(((IkReal(-1.00000000000000))*(x570)))+(((IkReal(-1.00000000000000))*(x569))));
evalcond[1]=((((x565)*(x567)))+(((IkReal(-1.00000000000000))*(x568))));
evalcond[2]=((((x565)*(x569)))+(((IkReal(-1.00000000000000))*(x566)*(x568)))+(((x565)*(x570))));
evalcond[3]=((((IkReal(-1.00000000000000))*(x569)*(x571)))+(((IkReal(-1.00000000000000))*(x570)*(x571)))+(x567)+(((IkReal(-1.00000000000000))*(x565)*(x568))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
if( IKabs(((gconst12)*(((((IkReal(125.000000000000))*(cj6)*(npy)))+(((IkReal(125.000000000000))*(npx)*(sj6))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(125.000000000000))*(gconst12)*(npz))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j4array[0]=IKatan2(((gconst12)*(((((IkReal(125.000000000000))*(cj6)*(npy)))+(((IkReal(125.000000000000))*(npx)*(sj6)))))), ((IkReal(125.000000000000))*(gconst12)*(npz)));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[4];
IkReal x572=IKcos(j4);
IkReal x573=IKsin(j4);
IkReal x574=((IkReal(0.328000000000000))*(sj3));
IkReal x575=((IkReal(1.00000000000000))*(npz));
IkReal x576=((npx)*(sj6));
IkReal x577=((cj6)*(npy));
IkReal x578=((IkReal(1.00000000000000))*(x573));
evalcond[0]=((((x573)*(x574)))+(((IkReal(-1.00000000000000))*(x576)))+(((IkReal(-1.00000000000000))*(x577))));
evalcond[1]=((((IkReal(-1.00000000000000))*(x575)))+(((x572)*(x574))));
evalcond[2]=((((IkReal(-1.00000000000000))*(x573)*(x575)))+(((x572)*(x577)))+(((x572)*(x576))));
evalcond[3]=((((IkReal(-1.00000000000000))*(x577)*(x578)))+(((IkReal(-1.00000000000000))*(x576)*(x578)))+(x574)+(((IkReal(-1.00000000000000))*(x572)*(x575))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
IkReal x579=((IkReal(0.328000000000000))*(cj3));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(j5)), IkReal(6.28318530717959))));
evalcond[1]=((IkReal(-0.211913000000000))+(pp)+(((IkReal(-0.211888000000000))*(cj3))));
evalcond[2]=((IkReal(0.323000000000000))+(((IkReal(-1.00000000000000))*(npz)))+(x579));
evalcond[3]=((IkReal(-0.323000000000000))+(npz)+(((IkReal(-1.00000000000000))*(x579))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst14;
gconst14=IKsign(sj3);
dummyeval[0]=sj3;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[2];
IkReal x580=((IkReal(1.00000000000000))*(sj3));
dummyeval[0]=((((IkReal(-1.00000000000000))*(npx)*(sj6)*(x580)))+(((IkReal(-1.00000000000000))*(cj6)*(npy)*(x580))));
dummyeval[1]=sj3;
if( IKabs(dummyeval[0]) < 0.0000010000000000  || IKabs(dummyeval[1]) < 0.0000010000000000  )
{
{
IkReal dummyeval[2];
dummyeval[0]=((((npy)*(sj3)*(sj6)))+(((IkReal(-1.00000000000000))*(cj6)*(npx)*(sj3))));
dummyeval[1]=sj3;
if( IKabs(dummyeval[0]) < 0.0000010000000000  || IKabs(dummyeval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[6];
IkReal x581=((IkReal(1.00000000000000))*(npx));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(j3)), IkReal(6.28318530717959))));
evalcond[1]=((IkReal(-0.423801000000000))+(pp));
evalcond[2]=((((IkReal(-1.00000000000000))*(sj6)*(x581)))+(((IkReal(-1.00000000000000))*(cj6)*(npy))));
evalcond[3]=((IkReal(0.651000000000000))+(((IkReal(-1.00000000000000))*(npz))));
evalcond[4]=((IkReal(-0.651000000000000))+(npz));
evalcond[5]=((((IkReal(-1.00000000000000))*(cj6)*(x581)))+(((npy)*(sj6))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  )
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
if( IKabs(((((cj6)*(npy)))+(((npx)*(sj6))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((IkReal(-1.00000000000000))*(cj6)*(npx)))+(((npy)*(sj6))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
IkReal x582=IKatan2(((((cj6)*(npy)))+(((npx)*(sj6)))), ((((IkReal(-1.00000000000000))*(cj6)*(npx)))+(((npy)*(sj6)))));
j4array[0]=((IkReal(-1.00000000000000))*(x582));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
j4array[1]=((IkReal(3.14159265358979))+(((IkReal(-1.00000000000000))*(x582))));
sj4array[1]=IKsin(j4array[1]);
cj4array[1]=IKcos(j4array[1]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
if( j4array[1] > IKPI )
{
    j4array[1]-=IK2PI;
}
else if( j4array[1] < -IKPI )
{    j4array[1]+=IK2PI;
}
j4valid[1] = true;
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[1];
IkReal x583=IKcos(j4);
IkReal x584=IKsin(j4);
IkReal x585=((IkReal(1.00000000000000))*(npx));
evalcond[0]=((((IkReal(-1.00000000000000))*(sj6)*(x584)*(x585)))+(((IkReal(-1.00000000000000))*(cj6)*(x583)*(x585)))+(((npy)*(sj6)*(x583)))+(((IkReal(-1.00000000000000))*(cj6)*(npy)*(x584))));
if( IKabs(evalcond[0]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

} else
{
IkReal x586=((IkReal(1.00000000000000))*(npx));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(1.11022302462516e-16))+(j3)), IkReal(6.28318530717959))));
evalcond[1]=((IkReal(-2.50000000000000e-5))+(pp));
evalcond[2]=((((IkReal(-1.00000000000000))*(sj6)*(x586)))+(((IkReal(-1.00000000000000))*(cj6)*(npy))));
evalcond[3]=((IkReal(-0.00500000000000000))+(((IkReal(-1.00000000000000))*(npz))));
evalcond[4]=((IkReal(0.00500000000000000))+(npz));
evalcond[5]=((((IkReal(-1.00000000000000))*(cj6)*(x586)))+(((npy)*(sj6))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  )
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
if( IKabs(((((cj6)*(npy)))+(((npx)*(sj6))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((IkReal(-1.00000000000000))*(cj6)*(npx)))+(((npy)*(sj6))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
IkReal x587=IKatan2(((((cj6)*(npy)))+(((npx)*(sj6)))), ((((IkReal(-1.00000000000000))*(cj6)*(npx)))+(((npy)*(sj6)))));
j4array[0]=((IkReal(-1.00000000000000))*(x587));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
j4array[1]=((IkReal(3.14159265358979))+(((IkReal(-1.00000000000000))*(x587))));
sj4array[1]=IKsin(j4array[1]);
cj4array[1]=IKcos(j4array[1]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
if( j4array[1] > IKPI )
{
    j4array[1]-=IK2PI;
}
else if( j4array[1] < -IKPI )
{    j4array[1]+=IK2PI;
}
j4valid[1] = true;
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[1];
IkReal x588=IKcos(j4);
IkReal x589=IKsin(j4);
IkReal x590=((IkReal(1.00000000000000))*(npx));
evalcond[0]=((((IkReal(-1.00000000000000))*(cj6)*(x588)*(x590)))+(((IkReal(-1.00000000000000))*(sj6)*(x589)*(x590)))+(((npy)*(sj6)*(x588)))+(((IkReal(-1.00000000000000))*(cj6)*(npy)*(x589))));
if( IKabs(evalcond[0]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

} else
{
if( 1 )
{
continue;

} else
{
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x591=((npy)*(sj6));
IkReal x592=((IkReal(41.0000000000000))*(sj3));
IkReal x593=((cj6)*(npx));
IkReal x594=((IkReal(125.000000000000))*(npx)*(npy));
IkReal x595=((IkReal(125.000000000000))*(cj6)*(sj6));
if( IKabs(((((IKabs(((((IkReal(-1.00000000000000))*(x592)*(x593)))+(((x591)*(x592))))) != 0)?((IkReal)1/(((((IkReal(-1.00000000000000))*(x592)*(x593)))+(((x591)*(x592)))))):(IkReal)1.0e30))*(((((IkReal(125.000000000000))*(cj6)*(npy)*(x591)))+(((IkReal(-125.000000000000))*(npx)*(sj6)*(x593)))+(((IkReal(125.000000000000))*(npx)*(sj6)*(x591)))+(((IkReal(-125.000000000000))*(cj6)*(npy)*(x593))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(0.0243902439024390))*(((IKabs(sj3) != 0)?((IkReal)1/(sj3)):(IkReal)1.0e30))*(((((IkReal(125.000000000000))*(x593)))+(((IkReal(-125.000000000000))*(x591))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((IKabs(((((IkReal(-1.00000000000000))*(x592)*(x593)))+(((x591)*(x592))))) != 0)?((IkReal)1/(((((IkReal(-1.00000000000000))*(x592)*(x593)))+(((x591)*(x592)))))):(IkReal)1.0e30))*(((((IkReal(125.000000000000))*(cj6)*(npy)*(x591)))+(((IkReal(-125.000000000000))*(npx)*(sj6)*(x593)))+(((IkReal(125.000000000000))*(npx)*(sj6)*(x591)))+(((IkReal(-125.000000000000))*(cj6)*(npy)*(x593)))))))+IKsqr(((IkReal(0.0243902439024390))*(((IKabs(sj3) != 0)?((IkReal)1/(sj3)):(IkReal)1.0e30))*(((((IkReal(125.000000000000))*(x593)))+(((IkReal(-125.000000000000))*(x591)))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((((IKabs(((((IkReal(-1.00000000000000))*(x592)*(x593)))+(((x591)*(x592))))) != 0)?((IkReal)1/(((((IkReal(-1.00000000000000))*(x592)*(x593)))+(((x591)*(x592)))))):(IkReal)1.0e30))*(((((IkReal(125.000000000000))*(cj6)*(npy)*(x591)))+(((IkReal(-125.000000000000))*(npx)*(sj6)*(x593)))+(((IkReal(125.000000000000))*(npx)*(sj6)*(x591)))+(((IkReal(-125.000000000000))*(cj6)*(npy)*(x593)))))), ((IkReal(0.0243902439024390))*(((IKabs(sj3) != 0)?((IkReal)1/(sj3)):(IkReal)1.0e30))*(((((IkReal(125.000000000000))*(x593)))+(((IkReal(-125.000000000000))*(x591)))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[4];
IkReal x596=IKcos(j4);
IkReal x597=IKsin(j4);
IkReal x598=((IkReal(0.328000000000000))*(sj3));
IkReal x599=((IkReal(1.00000000000000))*(cj6));
IkReal x600=((npx)*(sj6));
IkReal x601=((npy)*(sj6));
evalcond[0]=((((IkReal(-1.00000000000000))*(x600)))+(((x597)*(x598)))+(((IkReal(-1.00000000000000))*(npy)*(x599))));
evalcond[1]=((((IkReal(-1.00000000000000))*(npx)*(x599)))+(x601)+(((x596)*(x598))));
evalcond[2]=((((x597)*(x601)))+(((x596)*(x600)))+(((IkReal(-1.00000000000000))*(npx)*(x597)*(x599)))+(((cj6)*(npy)*(x596))));
evalcond[3]=((((IkReal(-1.00000000000000))*(npy)*(x597)*(x599)))+(((IkReal(-1.00000000000000))*(npx)*(x596)*(x599)))+(x598)+(((x596)*(x601)))+(((IkReal(-1.00000000000000))*(x597)*(x600))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x602=((npy)*(sj6));
IkReal x603=((IkReal(5125.00000000000))*(sj3));
IkReal x604=((cj6)*(npx));
if( IKabs(((((IKabs(((((IkReal(-1.00000000000000))*(cj6)*(npy)*(x603)))+(((IkReal(-1.00000000000000))*(npx)*(sj6)*(x603))))) != 0)?((IkReal)1/(((((IkReal(-1.00000000000000))*(cj6)*(npy)*(x603)))+(((IkReal(-1.00000000000000))*(npx)*(sj6)*(x603)))))):(IkReal)1.0e30))*(((((IkReal(-31250.0000000000))*(x602)*(x604)))+(((IkReal(15625.0000000000))*((x604)*(x604))))+(((IkReal(15625.0000000000))*((x602)*(x602))))+(((IkReal(-1681.00000000000))*((sj3)*(sj3)))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(0.0243902439024390))*(((IKabs(sj3) != 0)?((IkReal)1/(sj3)):(IkReal)1.0e30))*(((((IkReal(-125.000000000000))*(x602)))+(((IkReal(125.000000000000))*(x604))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((IKabs(((((IkReal(-1.00000000000000))*(cj6)*(npy)*(x603)))+(((IkReal(-1.00000000000000))*(npx)*(sj6)*(x603))))) != 0)?((IkReal)1/(((((IkReal(-1.00000000000000))*(cj6)*(npy)*(x603)))+(((IkReal(-1.00000000000000))*(npx)*(sj6)*(x603)))))):(IkReal)1.0e30))*(((((IkReal(-31250.0000000000))*(x602)*(x604)))+(((IkReal(15625.0000000000))*((x604)*(x604))))+(((IkReal(15625.0000000000))*((x602)*(x602))))+(((IkReal(-1681.00000000000))*((sj3)*(sj3))))))))+IKsqr(((IkReal(0.0243902439024390))*(((IKabs(sj3) != 0)?((IkReal)1/(sj3)):(IkReal)1.0e30))*(((((IkReal(-125.000000000000))*(x602)))+(((IkReal(125.000000000000))*(x604)))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((((IKabs(((((IkReal(-1.00000000000000))*(cj6)*(npy)*(x603)))+(((IkReal(-1.00000000000000))*(npx)*(sj6)*(x603))))) != 0)?((IkReal)1/(((((IkReal(-1.00000000000000))*(cj6)*(npy)*(x603)))+(((IkReal(-1.00000000000000))*(npx)*(sj6)*(x603)))))):(IkReal)1.0e30))*(((((IkReal(-31250.0000000000))*(x602)*(x604)))+(((IkReal(15625.0000000000))*((x604)*(x604))))+(((IkReal(15625.0000000000))*((x602)*(x602))))+(((IkReal(-1681.00000000000))*((sj3)*(sj3))))))), ((IkReal(0.0243902439024390))*(((IKabs(sj3) != 0)?((IkReal)1/(sj3)):(IkReal)1.0e30))*(((((IkReal(-125.000000000000))*(x602)))+(((IkReal(125.000000000000))*(x604)))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[4];
IkReal x605=IKcos(j4);
IkReal x606=IKsin(j4);
IkReal x607=((IkReal(0.328000000000000))*(sj3));
IkReal x608=((IkReal(1.00000000000000))*(cj6));
IkReal x609=((npx)*(sj6));
IkReal x610=((npy)*(sj6));
evalcond[0]=((((IkReal(-1.00000000000000))*(x609)))+(((x606)*(x607)))+(((IkReal(-1.00000000000000))*(npy)*(x608))));
evalcond[1]=((((x605)*(x607)))+(x610)+(((IkReal(-1.00000000000000))*(npx)*(x608))));
evalcond[2]=((((x605)*(x609)))+(((IkReal(-1.00000000000000))*(npx)*(x606)*(x608)))+(((cj6)*(npy)*(x605)))+(((x606)*(x610))));
evalcond[3]=((((x605)*(x610)))+(((IkReal(-1.00000000000000))*(npx)*(x605)*(x608)))+(((IkReal(-1.00000000000000))*(npy)*(x606)*(x608)))+(x607)+(((IkReal(-1.00000000000000))*(x606)*(x609))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x611=((IkReal(125.000000000000))*(npy));
IkReal x612=((IkReal(125.000000000000))*(npx));
if( IKabs(((gconst14)*(((((cj6)*(x611)))+(((sj6)*(x612))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst14)*(((((IkReal(-1.00000000000000))*(sj6)*(x611)))+(((cj6)*(x612))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j4array[0]=IKatan2(((gconst14)*(((((cj6)*(x611)))+(((sj6)*(x612)))))), ((gconst14)*(((((IkReal(-1.00000000000000))*(sj6)*(x611)))+(((cj6)*(x612)))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[4];
IkReal x613=IKcos(j4);
IkReal x614=IKsin(j4);
IkReal x615=((IkReal(0.328000000000000))*(sj3));
IkReal x616=((IkReal(1.00000000000000))*(cj6));
IkReal x617=((npx)*(sj6));
IkReal x618=((npy)*(sj6));
evalcond[0]=((((IkReal(-1.00000000000000))*(x617)))+(((x614)*(x615)))+(((IkReal(-1.00000000000000))*(npy)*(x616))));
evalcond[1]=((((x613)*(x615)))+(x618)+(((IkReal(-1.00000000000000))*(npx)*(x616))));
evalcond[2]=((((cj6)*(npy)*(x613)))+(((x613)*(x617)))+(((x614)*(x618)))+(((IkReal(-1.00000000000000))*(npx)*(x614)*(x616))));
evalcond[3]=((((IkReal(-1.00000000000000))*(x614)*(x617)))+(((IkReal(-1.00000000000000))*(npy)*(x614)*(x616)))+(((x613)*(x618)))+(((IkReal(-1.00000000000000))*(npx)*(x613)*(x616)))+(x615));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
IkReal x619=((IkReal(-0.323000000000000))+(((IkReal(-1.00000000000000))*(npz)))+(((IkReal(-0.328000000000000))*(cj3))));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(1.11022302462516e-16))+(j5)), IkReal(6.28318530717959))));
evalcond[1]=((IkReal(-0.211913000000000))+(pp)+(((IkReal(-0.211888000000000))*(cj3))));
evalcond[2]=x619;
evalcond[3]=x619;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst15;
gconst15=IKsign(sj3);
dummyeval[0]=sj3;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[2];
IkReal x620=((IkReal(1.00000000000000))*(sj3));
dummyeval[0]=((((IkReal(-1.00000000000000))*(npx)*(sj6)*(x620)))+(((IkReal(-1.00000000000000))*(cj6)*(npy)*(x620))));
dummyeval[1]=sj3;
if( IKabs(dummyeval[0]) < 0.0000010000000000  || IKabs(dummyeval[1]) < 0.0000010000000000  )
{
{
IkReal dummyeval[2];
dummyeval[0]=((((IkReal(-1.00000000000000))*(npy)*(sj3)*(sj6)))+(((cj6)*(npx)*(sj3))));
dummyeval[1]=sj3;
if( IKabs(dummyeval[0]) < 0.0000010000000000  || IKabs(dummyeval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[6];
IkReal x621=((IkReal(-0.651000000000000))+(((IkReal(-1.00000000000000))*(npz))));
IkReal x622=((IkReal(1.00000000000000))*(npx));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(j3)), IkReal(6.28318530717959))));
evalcond[1]=((IkReal(-0.423801000000000))+(pp));
evalcond[2]=((((IkReal(-1.00000000000000))*(cj6)*(npy)))+(((IkReal(-1.00000000000000))*(sj6)*(x622))));
evalcond[3]=x621;
evalcond[4]=x621;
evalcond[5]=((((npy)*(sj6)))+(((IkReal(-1.00000000000000))*(cj6)*(x622))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  )
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
if( IKabs(((((cj6)*(npy)))+(((npx)*(sj6))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((cj6)*(npx)))+(((IkReal(-1.00000000000000))*(npy)*(sj6))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
IkReal x623=IKatan2(((((cj6)*(npy)))+(((npx)*(sj6)))), ((((cj6)*(npx)))+(((IkReal(-1.00000000000000))*(npy)*(sj6)))));
j4array[0]=((IkReal(-1.00000000000000))*(x623));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
j4array[1]=((IkReal(3.14159265358979))+(((IkReal(-1.00000000000000))*(x623))));
sj4array[1]=IKsin(j4array[1]);
cj4array[1]=IKcos(j4array[1]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
if( j4array[1] > IKPI )
{
    j4array[1]-=IK2PI;
}
else if( j4array[1] < -IKPI )
{    j4array[1]+=IK2PI;
}
j4valid[1] = true;
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[1];
IkReal x624=IKcos(j4);
IkReal x625=IKsin(j4);
IkReal x626=((IkReal(1.00000000000000))*(sj6));
evalcond[0]=((((IkReal(-1.00000000000000))*(npx)*(x625)*(x626)))+(((IkReal(-1.00000000000000))*(cj6)*(npy)*(x625)))+(((cj6)*(npx)*(x624)))+(((IkReal(-1.00000000000000))*(npy)*(x624)*(x626))));
if( IKabs(evalcond[0]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

} else
{
IkReal x627=((IkReal(0.00500000000000000))+(((IkReal(-1.00000000000000))*(npz))));
IkReal x628=((IkReal(1.00000000000000))*(npx));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(1.11022302462516e-16))+(j3)), IkReal(6.28318530717959))));
evalcond[1]=((IkReal(-2.50000000000000e-5))+(pp));
evalcond[2]=((((IkReal(-1.00000000000000))*(cj6)*(npy)))+(((IkReal(-1.00000000000000))*(sj6)*(x628))));
evalcond[3]=x627;
evalcond[4]=x627;
evalcond[5]=((((npy)*(sj6)))+(((IkReal(-1.00000000000000))*(cj6)*(x628))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  )
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
if( IKabs(((((cj6)*(npy)))+(((npx)*(sj6))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((cj6)*(npx)))+(((IkReal(-1.00000000000000))*(npy)*(sj6))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
IkReal x629=IKatan2(((((cj6)*(npy)))+(((npx)*(sj6)))), ((((cj6)*(npx)))+(((IkReal(-1.00000000000000))*(npy)*(sj6)))));
j4array[0]=((IkReal(-1.00000000000000))*(x629));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
j4array[1]=((IkReal(3.14159265358979))+(((IkReal(-1.00000000000000))*(x629))));
sj4array[1]=IKsin(j4array[1]);
cj4array[1]=IKcos(j4array[1]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
if( j4array[1] > IKPI )
{
    j4array[1]-=IK2PI;
}
else if( j4array[1] < -IKPI )
{    j4array[1]+=IK2PI;
}
j4valid[1] = true;
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[1];
IkReal x630=IKcos(j4);
IkReal x631=IKsin(j4);
IkReal x632=((IkReal(1.00000000000000))*(sj6));
evalcond[0]=((((IkReal(-1.00000000000000))*(cj6)*(npy)*(x631)))+(((IkReal(-1.00000000000000))*(npx)*(x631)*(x632)))+(((cj6)*(npx)*(x630)))+(((IkReal(-1.00000000000000))*(npy)*(x630)*(x632))));
if( IKabs(evalcond[0]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

} else
{
if( 1 )
{
continue;

} else
{
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x633=((npy)*(sj6));
IkReal x634=((IkReal(41.0000000000000))*(sj3));
IkReal x635=((cj6)*(npx));
IkReal x636=((IkReal(125.000000000000))*(npx)*(npy));
IkReal x637=((IkReal(125.000000000000))*(cj6)*(sj6));
if( IKabs(((((IKabs(((((x634)*(x635)))+(((IkReal(-1.00000000000000))*(x633)*(x634))))) != 0)?((IkReal)1/(((((x634)*(x635)))+(((IkReal(-1.00000000000000))*(x633)*(x634)))))):(IkReal)1.0e30))*(((((IkReal(-125.000000000000))*(npx)*(sj6)*(x633)))+(((IkReal(-125.000000000000))*(cj6)*(npy)*(x633)))+(((IkReal(125.000000000000))*(cj6)*(npy)*(x635)))+(((IkReal(125.000000000000))*(npx)*(sj6)*(x635))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(0.0243902439024390))*(((IKabs(sj3) != 0)?((IkReal)1/(sj3)):(IkReal)1.0e30))*(((((IkReal(125.000000000000))*(x633)))+(((IkReal(-125.000000000000))*(x635))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((IKabs(((((x634)*(x635)))+(((IkReal(-1.00000000000000))*(x633)*(x634))))) != 0)?((IkReal)1/(((((x634)*(x635)))+(((IkReal(-1.00000000000000))*(x633)*(x634)))))):(IkReal)1.0e30))*(((((IkReal(-125.000000000000))*(npx)*(sj6)*(x633)))+(((IkReal(-125.000000000000))*(cj6)*(npy)*(x633)))+(((IkReal(125.000000000000))*(cj6)*(npy)*(x635)))+(((IkReal(125.000000000000))*(npx)*(sj6)*(x635)))))))+IKsqr(((IkReal(0.0243902439024390))*(((IKabs(sj3) != 0)?((IkReal)1/(sj3)):(IkReal)1.0e30))*(((((IkReal(125.000000000000))*(x633)))+(((IkReal(-125.000000000000))*(x635)))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((((IKabs(((((x634)*(x635)))+(((IkReal(-1.00000000000000))*(x633)*(x634))))) != 0)?((IkReal)1/(((((x634)*(x635)))+(((IkReal(-1.00000000000000))*(x633)*(x634)))))):(IkReal)1.0e30))*(((((IkReal(-125.000000000000))*(npx)*(sj6)*(x633)))+(((IkReal(-125.000000000000))*(cj6)*(npy)*(x633)))+(((IkReal(125.000000000000))*(cj6)*(npy)*(x635)))+(((IkReal(125.000000000000))*(npx)*(sj6)*(x635)))))), ((IkReal(0.0243902439024390))*(((IKabs(sj3) != 0)?((IkReal)1/(sj3)):(IkReal)1.0e30))*(((((IkReal(125.000000000000))*(x633)))+(((IkReal(-125.000000000000))*(x635)))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[4];
IkReal x638=IKcos(j4);
IkReal x639=IKsin(j4);
IkReal x640=((IkReal(0.328000000000000))*(sj3));
IkReal x641=((cj6)*(npx));
IkReal x642=((IkReal(1.00000000000000))*(npy));
IkReal x643=((sj6)*(x638));
IkReal x644=((IkReal(1.00000000000000))*(npx)*(sj6));
evalcond[0]=((((x639)*(x640)))+(((IkReal(-1.00000000000000))*(cj6)*(x642)))+(((IkReal(-1.00000000000000))*(x644))));
evalcond[1]=((((IkReal(-1.00000000000000))*(x641)))+(((npy)*(sj6)))+(((IkReal(-1.00000000000000))*(x638)*(x640))));
evalcond[2]=((((x639)*(x641)))+(((npx)*(x643)))+(((cj6)*(npy)*(x638)))+(((IkReal(-1.00000000000000))*(sj6)*(x639)*(x642))));
evalcond[3]=((((IkReal(-1.00000000000000))*(x642)*(x643)))+(((x638)*(x641)))+(((IkReal(-1.00000000000000))*(cj6)*(x639)*(x642)))+(((IkReal(-1.00000000000000))*(x639)*(x644)))+(x640));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x645=((npy)*(sj6));
IkReal x646=((IkReal(5125.00000000000))*(sj3));
IkReal x647=((cj6)*(npx));
if( IKabs(((((IKabs(((((IkReal(-1.00000000000000))*(cj6)*(npy)*(x646)))+(((IkReal(-1.00000000000000))*(npx)*(sj6)*(x646))))) != 0)?((IkReal)1/(((((IkReal(-1.00000000000000))*(cj6)*(npy)*(x646)))+(((IkReal(-1.00000000000000))*(npx)*(sj6)*(x646)))))):(IkReal)1.0e30))*(((((IkReal(-31250.0000000000))*(x645)*(x647)))+(((IkReal(15625.0000000000))*((x647)*(x647))))+(((IkReal(15625.0000000000))*((x645)*(x645))))+(((IkReal(-1681.00000000000))*((sj3)*(sj3)))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(0.0243902439024390))*(((IKabs(sj3) != 0)?((IkReal)1/(sj3)):(IkReal)1.0e30))*(((((IkReal(-125.000000000000))*(x647)))+(((IkReal(125.000000000000))*(x645))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((IKabs(((((IkReal(-1.00000000000000))*(cj6)*(npy)*(x646)))+(((IkReal(-1.00000000000000))*(npx)*(sj6)*(x646))))) != 0)?((IkReal)1/(((((IkReal(-1.00000000000000))*(cj6)*(npy)*(x646)))+(((IkReal(-1.00000000000000))*(npx)*(sj6)*(x646)))))):(IkReal)1.0e30))*(((((IkReal(-31250.0000000000))*(x645)*(x647)))+(((IkReal(15625.0000000000))*((x647)*(x647))))+(((IkReal(15625.0000000000))*((x645)*(x645))))+(((IkReal(-1681.00000000000))*((sj3)*(sj3))))))))+IKsqr(((IkReal(0.0243902439024390))*(((IKabs(sj3) != 0)?((IkReal)1/(sj3)):(IkReal)1.0e30))*(((((IkReal(-125.000000000000))*(x647)))+(((IkReal(125.000000000000))*(x645)))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((((IKabs(((((IkReal(-1.00000000000000))*(cj6)*(npy)*(x646)))+(((IkReal(-1.00000000000000))*(npx)*(sj6)*(x646))))) != 0)?((IkReal)1/(((((IkReal(-1.00000000000000))*(cj6)*(npy)*(x646)))+(((IkReal(-1.00000000000000))*(npx)*(sj6)*(x646)))))):(IkReal)1.0e30))*(((((IkReal(-31250.0000000000))*(x645)*(x647)))+(((IkReal(15625.0000000000))*((x647)*(x647))))+(((IkReal(15625.0000000000))*((x645)*(x645))))+(((IkReal(-1681.00000000000))*((sj3)*(sj3))))))), ((IkReal(0.0243902439024390))*(((IKabs(sj3) != 0)?((IkReal)1/(sj3)):(IkReal)1.0e30))*(((((IkReal(-125.000000000000))*(x647)))+(((IkReal(125.000000000000))*(x645)))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[4];
IkReal x648=IKcos(j4);
IkReal x649=IKsin(j4);
IkReal x650=((IkReal(0.328000000000000))*(sj3));
IkReal x651=((cj6)*(npx));
IkReal x652=((IkReal(1.00000000000000))*(npy));
IkReal x653=((sj6)*(x648));
IkReal x654=((IkReal(1.00000000000000))*(npx)*(sj6));
evalcond[0]=((((IkReal(-1.00000000000000))*(cj6)*(x652)))+(((x649)*(x650)))+(((IkReal(-1.00000000000000))*(x654))));
evalcond[1]=((((IkReal(-1.00000000000000))*(x651)))+(((npy)*(sj6)))+(((IkReal(-1.00000000000000))*(x648)*(x650))));
evalcond[2]=((((IkReal(-1.00000000000000))*(sj6)*(x649)*(x652)))+(((npx)*(x653)))+(((x649)*(x651)))+(((cj6)*(npy)*(x648))));
evalcond[3]=((((IkReal(-1.00000000000000))*(cj6)*(x649)*(x652)))+(((x648)*(x651)))+(x650)+(((IkReal(-1.00000000000000))*(x649)*(x654)))+(((IkReal(-1.00000000000000))*(x652)*(x653))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x655=((IkReal(125.000000000000))*(npy));
IkReal x656=((IkReal(125.000000000000))*(npx));
if( IKabs(((gconst15)*(((((sj6)*(x656)))+(((cj6)*(x655))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst15)*(((((sj6)*(x655)))+(((IkReal(-1.00000000000000))*(cj6)*(x656))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j4array[0]=IKatan2(((gconst15)*(((((sj6)*(x656)))+(((cj6)*(x655)))))), ((gconst15)*(((((sj6)*(x655)))+(((IkReal(-1.00000000000000))*(cj6)*(x656)))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[4];
IkReal x657=IKcos(j4);
IkReal x658=IKsin(j4);
IkReal x659=((IkReal(0.328000000000000))*(sj3));
IkReal x660=((cj6)*(npx));
IkReal x661=((IkReal(1.00000000000000))*(npy));
IkReal x662=((sj6)*(x657));
IkReal x663=((IkReal(1.00000000000000))*(npx)*(sj6));
evalcond[0]=((((IkReal(-1.00000000000000))*(cj6)*(x661)))+(((IkReal(-1.00000000000000))*(x663)))+(((x658)*(x659))));
evalcond[1]=((((IkReal(-1.00000000000000))*(x657)*(x659)))+(((npy)*(sj6)))+(((IkReal(-1.00000000000000))*(x660))));
evalcond[2]=((((cj6)*(npy)*(x657)))+(((npx)*(x662)))+(((x658)*(x660)))+(((IkReal(-1.00000000000000))*(sj6)*(x658)*(x661))));
evalcond[3]=((((x657)*(x660)))+(((IkReal(-1.00000000000000))*(x661)*(x662)))+(((IkReal(-1.00000000000000))*(x658)*(x663)))+(x659)+(((IkReal(-1.00000000000000))*(cj6)*(x658)*(x661))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
if( 1 )
{
continue;

} else
{
}
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x664=((IKabs(sj3) != 0)?((IkReal)1/(sj3)):(IkReal)1.0e30);
IkReal x665=((IkReal(125.000000000000))*(npy));
IkReal x666=((IkReal(0.0243902439024390))*(x664));
IkReal x667=((IkReal(125.000000000000))*(npx));
if( IKabs(((x666)*(((((cj6)*(x665)))+(((sj6)*(x667))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x666)*(((IKabs(cj5) != 0)?((IkReal)1/(cj5)):(IkReal)1.0e30))*(((((IkReal(-40.3750000000000))*(sj5)))+(((IkReal(-1.00000000000000))*(sj6)*(x665)))+(((IkReal(-41.0000000000000))*(cj3)*(sj5)))+(((cj6)*(x667))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x666)*(((((cj6)*(x665)))+(((sj6)*(x667)))))))+IKsqr(((x666)*(((IKabs(cj5) != 0)?((IkReal)1/(cj5)):(IkReal)1.0e30))*(((((IkReal(-40.3750000000000))*(sj5)))+(((IkReal(-1.00000000000000))*(sj6)*(x665)))+(((IkReal(-41.0000000000000))*(cj3)*(sj5)))+(((cj6)*(x667)))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x666)*(((((cj6)*(x665)))+(((sj6)*(x667)))))), ((x666)*(((IKabs(cj5) != 0)?((IkReal)1/(cj5)):(IkReal)1.0e30))*(((((IkReal(-40.3750000000000))*(sj5)))+(((IkReal(-1.00000000000000))*(sj6)*(x665)))+(((IkReal(-41.0000000000000))*(cj3)*(sj5)))+(((cj6)*(x667)))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x668=IKcos(j4);
IkReal x669=IKsin(j4);
IkReal x670=((npy)*(sj6));
IkReal x671=((IkReal(1.00000000000000))*(npx));
IkReal x672=((IkReal(0.328000000000000))*(cj3));
IkReal x673=((IkReal(0.328000000000000))*(sj3));
IkReal x674=((cj6)*(x668));
IkReal x675=((IkReal(1.00000000000000))*(cj6)*(npy));
IkReal x676=((sj5)*(x668));
IkReal x677=((cj5)*(x669));
IkReal x678=((cj5)*(x668));
evalcond[0]=((((IkReal(-1.00000000000000))*(sj6)*(x671)))+(((x669)*(x673)))+(((IkReal(-1.00000000000000))*(x675))));
evalcond[1]=((((IkReal(-1.00000000000000))*(npz)))+(((IkReal(0.323000000000000))*(cj5)))+(((cj5)*(x672)))+(((IkReal(-1.00000000000000))*(x673)*(x676))));
evalcond[2]=((((x673)*(x678)))+(((sj5)*(x672)))+(((IkReal(0.323000000000000))*(sj5)))+(x670)+(((IkReal(-1.00000000000000))*(cj6)*(x671))));
evalcond[3]=((((x670)*(x677)))+(((npy)*(x674)))+(((npx)*(sj6)*(x668)))+(((npz)*(sj5)*(x669)))+(((IkReal(-1.00000000000000))*(cj6)*(x671)*(x677))));
evalcond[4]=((((IkReal(-1.00000000000000))*(cj5)*(x671)*(x674)))+(((x670)*(x678)))+(((IkReal(-1.00000000000000))*(x669)*(x675)))+(x673)+(((npz)*(x676)))+(((IkReal(-1.00000000000000))*(sj6)*(x669)*(x671))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x679=((IKabs(sj3) != 0)?((IkReal)1/(sj3)):(IkReal)1.0e30);
IkReal x680=((IkReal(0.0243902439024390))*(x679));
if( IKabs(((x680)*(((((IkReal(125.000000000000))*(cj6)*(npy)))+(((IkReal(125.000000000000))*(npx)*(sj6))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x680)*(((IKabs(sj5) != 0)?((IkReal)1/(sj5)):(IkReal)1.0e30))*(((((IkReal(40.3750000000000))*(cj5)))+(((IkReal(-125.000000000000))*(npz)))+(((IkReal(41.0000000000000))*(cj3)*(cj5))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x680)*(((((IkReal(125.000000000000))*(cj6)*(npy)))+(((IkReal(125.000000000000))*(npx)*(sj6)))))))+IKsqr(((x680)*(((IKabs(sj5) != 0)?((IkReal)1/(sj5)):(IkReal)1.0e30))*(((((IkReal(40.3750000000000))*(cj5)))+(((IkReal(-125.000000000000))*(npz)))+(((IkReal(41.0000000000000))*(cj3)*(cj5)))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x680)*(((((IkReal(125.000000000000))*(cj6)*(npy)))+(((IkReal(125.000000000000))*(npx)*(sj6)))))), ((x680)*(((IKabs(sj5) != 0)?((IkReal)1/(sj5)):(IkReal)1.0e30))*(((((IkReal(40.3750000000000))*(cj5)))+(((IkReal(-125.000000000000))*(npz)))+(((IkReal(41.0000000000000))*(cj3)*(cj5)))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x681=IKcos(j4);
IkReal x682=IKsin(j4);
IkReal x683=((npy)*(sj6));
IkReal x684=((IkReal(1.00000000000000))*(npx));
IkReal x685=((IkReal(0.328000000000000))*(cj3));
IkReal x686=((IkReal(0.328000000000000))*(sj3));
IkReal x687=((cj6)*(x681));
IkReal x688=((IkReal(1.00000000000000))*(cj6)*(npy));
IkReal x689=((sj5)*(x681));
IkReal x690=((cj5)*(x682));
IkReal x691=((cj5)*(x681));
evalcond[0]=((((IkReal(-1.00000000000000))*(x688)))+(((x682)*(x686)))+(((IkReal(-1.00000000000000))*(sj6)*(x684))));
evalcond[1]=((((cj5)*(x685)))+(((IkReal(-1.00000000000000))*(npz)))+(((IkReal(0.323000000000000))*(cj5)))+(((IkReal(-1.00000000000000))*(x686)*(x689))));
evalcond[2]=((((x686)*(x691)))+(((IkReal(0.323000000000000))*(sj5)))+(((sj5)*(x685)))+(x683)+(((IkReal(-1.00000000000000))*(cj6)*(x684))));
evalcond[3]=((((npz)*(sj5)*(x682)))+(((IkReal(-1.00000000000000))*(cj6)*(x684)*(x690)))+(((npy)*(x687)))+(((npx)*(sj6)*(x681)))+(((x683)*(x690))));
evalcond[4]=((((npz)*(x689)))+(((IkReal(-1.00000000000000))*(sj6)*(x682)*(x684)))+(((IkReal(-1.00000000000000))*(cj5)*(x684)*(x687)))+(x686)+(((IkReal(-1.00000000000000))*(x682)*(x688)))+(((x683)*(x691))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x692=((IkReal(125.000000000000))*(cj6));
IkReal x693=((cj5)*(sj6));
IkReal x694=((npz)*(sj5));
IkReal x695=((IkReal(125.000000000000))*(npx));
IkReal x696=((cj5)*(npy));
IkReal x697=((IkReal(41.0000000000000))*(sj3));
if( IKabs(((IkReal(0.0243902439024390))*(((IKabs(sj3) != 0)?((IkReal)1/(sj3)):(IkReal)1.0e30))*(((((sj6)*(x695)))+(((npy)*(x692))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((IKabs(((((cj6)*(npy)*(x697)))+(((npx)*(sj6)*(x697))))) != 0)?((IkReal)1/(((((cj6)*(npy)*(x697)))+(((npx)*(sj6)*(x697)))))):(IkReal)1.0e30))*(((((x692)*(x693)*((npx)*(npx))))+(((cj6)*(npx)*(x692)*(x696)))+(((IkReal(-1.00000000000000))*(sj6)*(x694)*(x695)))+(((IkReal(-1.00000000000000))*(npy)*(sj6)*(x693)*(x695)))+(((IkReal(-1.00000000000000))*(npy)*(x692)*(x694)))+(((IkReal(-1.00000000000000))*(x692)*(x693)*((npy)*(npy)))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((IkReal(0.0243902439024390))*(((IKabs(sj3) != 0)?((IkReal)1/(sj3)):(IkReal)1.0e30))*(((((sj6)*(x695)))+(((npy)*(x692)))))))+IKsqr(((((IKabs(((((cj6)*(npy)*(x697)))+(((npx)*(sj6)*(x697))))) != 0)?((IkReal)1/(((((cj6)*(npy)*(x697)))+(((npx)*(sj6)*(x697)))))):(IkReal)1.0e30))*(((((x692)*(x693)*((npx)*(npx))))+(((cj6)*(npx)*(x692)*(x696)))+(((IkReal(-1.00000000000000))*(sj6)*(x694)*(x695)))+(((IkReal(-1.00000000000000))*(npy)*(sj6)*(x693)*(x695)))+(((IkReal(-1.00000000000000))*(npy)*(x692)*(x694)))+(((IkReal(-1.00000000000000))*(x692)*(x693)*((npy)*(npy))))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((IkReal(0.0243902439024390))*(((IKabs(sj3) != 0)?((IkReal)1/(sj3)):(IkReal)1.0e30))*(((((sj6)*(x695)))+(((npy)*(x692)))))), ((((IKabs(((((cj6)*(npy)*(x697)))+(((npx)*(sj6)*(x697))))) != 0)?((IkReal)1/(((((cj6)*(npy)*(x697)))+(((npx)*(sj6)*(x697)))))):(IkReal)1.0e30))*(((((x692)*(x693)*((npx)*(npx))))+(((cj6)*(npx)*(x692)*(x696)))+(((IkReal(-1.00000000000000))*(sj6)*(x694)*(x695)))+(((IkReal(-1.00000000000000))*(npy)*(sj6)*(x693)*(x695)))+(((IkReal(-1.00000000000000))*(npy)*(x692)*(x694)))+(((IkReal(-1.00000000000000))*(x692)*(x693)*((npy)*(npy))))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x698=IKcos(j4);
IkReal x699=IKsin(j4);
IkReal x700=((npy)*(sj6));
IkReal x701=((IkReal(1.00000000000000))*(npx));
IkReal x702=((IkReal(0.328000000000000))*(cj3));
IkReal x703=((IkReal(0.328000000000000))*(sj3));
IkReal x704=((cj6)*(x698));
IkReal x705=((IkReal(1.00000000000000))*(cj6)*(npy));
IkReal x706=((sj5)*(x698));
IkReal x707=((cj5)*(x699));
IkReal x708=((cj5)*(x698));
evalcond[0]=((((IkReal(-1.00000000000000))*(x705)))+(((IkReal(-1.00000000000000))*(sj6)*(x701)))+(((x699)*(x703))));
evalcond[1]=((((cj5)*(x702)))+(((IkReal(-1.00000000000000))*(npz)))+(((IkReal(-1.00000000000000))*(x703)*(x706)))+(((IkReal(0.323000000000000))*(cj5))));
evalcond[2]=((((x703)*(x708)))+(((sj5)*(x702)))+(((IkReal(-1.00000000000000))*(cj6)*(x701)))+(((IkReal(0.323000000000000))*(sj5)))+(x700));
evalcond[3]=((((npy)*(x704)))+(((x700)*(x707)))+(((IkReal(-1.00000000000000))*(cj6)*(x701)*(x707)))+(((npz)*(sj5)*(x699)))+(((npx)*(sj6)*(x698))));
evalcond[4]=((((IkReal(-1.00000000000000))*(cj5)*(x701)*(x704)))+(((x700)*(x708)))+(((IkReal(-1.00000000000000))*(sj6)*(x699)*(x701)))+(((npz)*(x706)))+(((IkReal(-1.00000000000000))*(x699)*(x705)))+(x703));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}
}
}

}

}

} else
{
{
IkReal j6array[2], cj6array[2], sj6array[2];
bool j6valid[2]={false};
_nj6 = 2;
IkReal x709=(sj5)*(sj5);
if( IKabs(((npx)*(sj5))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(-1.00000000000000))*(npy)*(sj5))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
IkReal x710=((IkReal(1.00000000000000))*(IKatan2(((npx)*(sj5)), ((IkReal(-1.00000000000000))*(npy)*(sj5)))));
if( (((((x709)*((npy)*(npy))))+(((x709)*((npx)*(npx)))))) < (IkReal)-0.00001 )
    continue;
if( (((((IKabs(IKabs(IKsqrt(((((x709)*((npy)*(npy))))+(((x709)*((npx)*(npx)))))))) != 0)?((IkReal)1/(IKabs(IKsqrt(((((x709)*((npy)*(npy))))+(((x709)*((npx)*(npx))))))))):(IkReal)1.0e30))*(((IkReal(-0.323000000000000))+(((cj5)*(npz)))+(((IkReal(-0.328000000000000))*(cj3))))))) < -1-IKFAST_SINCOS_THRESH || (((((IKabs(IKabs(IKsqrt(((((x709)*((npy)*(npy))))+(((x709)*((npx)*(npx)))))))) != 0)?((IkReal)1/(IKabs(IKsqrt(((((x709)*((npy)*(npy))))+(((x709)*((npx)*(npx))))))))):(IkReal)1.0e30))*(((IkReal(-0.323000000000000))+(((cj5)*(npz)))+(((IkReal(-0.328000000000000))*(cj3))))))) > 1+IKFAST_SINCOS_THRESH )
    continue;
IkReal x711=IKasin(((((IKabs(IKabs(IKsqrt(((((x709)*((npy)*(npy))))+(((x709)*((npx)*(npx)))))))) != 0)?((IkReal)1/(IKabs(IKsqrt(((((x709)*((npy)*(npy))))+(((x709)*((npx)*(npx))))))))):(IkReal)1.0e30))*(((IkReal(-0.323000000000000))+(((cj5)*(npz)))+(((IkReal(-0.328000000000000))*(cj3)))))));
j6array[0]=((((IkReal(-1.00000000000000))*(x711)))+(((IkReal(-1.00000000000000))*(x710))));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
j6array[1]=((IkReal(3.14159265358979))+(((IkReal(-1.00000000000000))*(x710)))+(x711));
sj6array[1]=IKsin(j6array[1]);
cj6array[1]=IKcos(j6array[1]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
if( j6array[1] > IKPI )
{
    j6array[1]-=IK2PI;
}
else if( j6array[1] < -IKPI )
{    j6array[1]+=IK2PI;
}
j6valid[1] = true;
for(int ij6 = 0; ij6 < 2; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 2; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];

{
IkReal dummyeval[2];
dummyeval[0]=sj3;
dummyeval[1]=((((cj6)*(npy)*(sj3)))+(((npx)*(sj3)*(sj6))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  || IKabs(dummyeval[1]) < 0.0000010000000000  )
{
{
IkReal dummyeval[2];
dummyeval[0]=sj3;
dummyeval[1]=sj5;
if( IKabs(dummyeval[0]) < 0.0000010000000000  || IKabs(dummyeval[1]) < 0.0000010000000000  )
{
{
IkReal dummyeval[2];
dummyeval[0]=sj3;
dummyeval[1]=cj5;
if( IKabs(dummyeval[0]) < 0.0000010000000000  || IKabs(dummyeval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[6];
IkReal x712=((IkReal(1.00000000000000))*(npy));
IkReal x713=((IkReal(1.00000000000000))*(npx));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(j3)), IkReal(6.28318530717959))));
evalcond[1]=((IkReal(-0.423801000000000))+(pp));
evalcond[2]=((((IkReal(-1.00000000000000))*(cj6)*(x712)))+(((IkReal(-1.00000000000000))*(sj6)*(x713))));
evalcond[3]=((((IkReal(-1.00000000000000))*(npz)))+(((IkReal(0.651000000000000))*(cj5))));
evalcond[4]=((IkReal(-0.651000000000000))+(((IkReal(-1.00000000000000))*(sj5)*(sj6)*(x712)))+(((cj5)*(npz)))+(((cj6)*(npx)*(sj5))));
evalcond[5]=((((IkReal(0.651000000000000))*(sj5)))+(((IkReal(-1.00000000000000))*(cj6)*(x713)))+(((npy)*(sj6))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  )
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
if( IKabs(((((cj6)*(npy)))+(((npx)*(sj6))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((npz)*(sj5)))+(((cj5)*(npy)*(sj6)))+(((IkReal(-1.00000000000000))*(cj5)*(cj6)*(npx))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
IkReal x714=IKatan2(((((cj6)*(npy)))+(((npx)*(sj6)))), ((((npz)*(sj5)))+(((cj5)*(npy)*(sj6)))+(((IkReal(-1.00000000000000))*(cj5)*(cj6)*(npx)))));
j4array[0]=((IkReal(-1.00000000000000))*(x714));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
j4array[1]=((IkReal(3.14159265358979))+(((IkReal(-1.00000000000000))*(x714))));
sj4array[1]=IKsin(j4array[1]);
cj4array[1]=IKcos(j4array[1]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
if( j4array[1] > IKPI )
{
    j4array[1]-=IK2PI;
}
else if( j4array[1] < -IKPI )
{    j4array[1]+=IK2PI;
}
j4valid[1] = true;
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[1];
IkReal x715=IKcos(j4);
IkReal x716=IKsin(j4);
IkReal x717=((IkReal(1.00000000000000))*(npx));
IkReal x718=((cj5)*(x715));
evalcond[0]=((((npy)*(sj6)*(x718)))+(((IkReal(-1.00000000000000))*(sj6)*(x716)*(x717)))+(((IkReal(-1.00000000000000))*(cj6)*(npy)*(x716)))+(((npz)*(sj5)*(x715)))+(((IkReal(-1.00000000000000))*(cj6)*(x717)*(x718))));
if( IKabs(evalcond[0]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

} else
{
IkReal x719=((IkReal(1.00000000000000))*(npy));
IkReal x720=((IkReal(1.00000000000000))*(npx));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(1.11022302462516e-16))+(j3)), IkReal(6.28318530717959))));
evalcond[1]=((IkReal(-2.50000000000000e-5))+(pp));
evalcond[2]=((((IkReal(-1.00000000000000))*(cj6)*(x719)))+(((IkReal(-1.00000000000000))*(sj6)*(x720))));
evalcond[3]=((((IkReal(-1.00000000000000))*(npz)))+(((IkReal(-0.00500000000000000))*(cj5))));
evalcond[4]=((IkReal(0.00500000000000000))+(((IkReal(-1.00000000000000))*(sj5)*(sj6)*(x719)))+(((cj5)*(npz)))+(((cj6)*(npx)*(sj5))));
evalcond[5]=((((npy)*(sj6)))+(((IkReal(-1.00000000000000))*(cj6)*(x720)))+(((IkReal(-0.00500000000000000))*(sj5))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  )
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
if( IKabs(((((cj6)*(npy)))+(((npx)*(sj6))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((npz)*(sj5)))+(((cj5)*(npy)*(sj6)))+(((IkReal(-1.00000000000000))*(cj5)*(cj6)*(npx))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
IkReal x721=IKatan2(((((cj6)*(npy)))+(((npx)*(sj6)))), ((((npz)*(sj5)))+(((cj5)*(npy)*(sj6)))+(((IkReal(-1.00000000000000))*(cj5)*(cj6)*(npx)))));
j4array[0]=((IkReal(-1.00000000000000))*(x721));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
j4array[1]=((IkReal(3.14159265358979))+(((IkReal(-1.00000000000000))*(x721))));
sj4array[1]=IKsin(j4array[1]);
cj4array[1]=IKcos(j4array[1]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
if( j4array[1] > IKPI )
{
    j4array[1]-=IK2PI;
}
else if( j4array[1] < -IKPI )
{    j4array[1]+=IK2PI;
}
j4valid[1] = true;
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[1];
IkReal x722=IKcos(j4);
IkReal x723=IKsin(j4);
IkReal x724=((IkReal(1.00000000000000))*(npx));
IkReal x725=((cj5)*(x722));
evalcond[0]=((((npy)*(sj6)*(x725)))+(((IkReal(-1.00000000000000))*(cj6)*(x724)*(x725)))+(((IkReal(-1.00000000000000))*(cj6)*(npy)*(x723)))+(((IkReal(-1.00000000000000))*(sj6)*(x723)*(x724)))+(((npz)*(sj5)*(x722))));
if( IKabs(evalcond[0]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

} else
{
IkReal x726=((IkReal(0.328000000000000))*(cj3));
IkReal x727=((cj6)*(npx));
IkReal x728=((npy)*(sj6));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(1.57079632679490))+(j5)), IkReal(6.28318530717959))));
evalcond[1]=((IkReal(-0.211913000000000))+(pp)+(((IkReal(-0.211888000000000))*(cj3))));
evalcond[2]=((IkReal(-0.323000000000000))+(((IkReal(-1.00000000000000))*(x726)))+(((IkReal(-1.00000000000000))*(x728)))+(x727));
evalcond[3]=((IkReal(0.323000000000000))+(((IkReal(-1.00000000000000))*(x727)))+(x726)+(x728));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst10;
gconst10=IKsign(sj3);
dummyeval[0]=sj3;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst11;
gconst11=IKsign(sj3);
dummyeval[0]=sj3;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[6];
IkReal x729=((IkReal(1.00000000000000))*(cj6));
IkReal x730=((npy)*(sj6));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(j3)), IkReal(6.28318530717959))));
evalcond[1]=((IkReal(-0.423801000000000))+(pp));
evalcond[2]=((((IkReal(-1.00000000000000))*(npy)*(x729)))+(((IkReal(-1.00000000000000))*(npx)*(sj6))));
evalcond[3]=((IkReal(-1.00000000000000))*(npz));
evalcond[4]=((IkReal(-0.651000000000000))+(((cj6)*(npx)))+(((IkReal(-1.00000000000000))*(x730))));
evalcond[5]=((IkReal(0.651000000000000))+(((IkReal(-1.00000000000000))*(npx)*(x729)))+(x730));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  )
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
if( IKabs(((((cj6)*(npy)))+(((npx)*(sj6))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(npz) < IKFAST_ATAN2_MAGTHRESH )
    continue;
IkReal x731=IKatan2(((((cj6)*(npy)))+(((npx)*(sj6)))), npz);
j4array[0]=((IkReal(-1.00000000000000))*(x731));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
j4array[1]=((IkReal(3.14159265358979))+(((IkReal(-1.00000000000000))*(x731))));
sj4array[1]=IKsin(j4array[1]);
cj4array[1]=IKcos(j4array[1]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
if( j4array[1] > IKPI )
{
    j4array[1]-=IK2PI;
}
else if( j4array[1] < -IKPI )
{    j4array[1]+=IK2PI;
}
j4valid[1] = true;
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[1];
IkReal x732=IKsin(j4);
IkReal x733=((IkReal(1.00000000000000))*(x732));
evalcond[0]=((((IkReal(-1.00000000000000))*(cj6)*(npy)*(x733)))+(((IkReal(-1.00000000000000))*(npx)*(sj6)*(x733)))+(((npz)*(IKcos(j4)))));
if( IKabs(evalcond[0]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

} else
{
IkReal x734=((IkReal(1.00000000000000))*(cj6));
IkReal x735=((npy)*(sj6));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(1.11022302462516e-16))+(j3)), IkReal(6.28318530717959))));
evalcond[1]=((IkReal(-2.50000000000000e-5))+(pp));
evalcond[2]=((((IkReal(-1.00000000000000))*(npy)*(x734)))+(((IkReal(-1.00000000000000))*(npx)*(sj6))));
evalcond[3]=((IkReal(-1.00000000000000))*(npz));
evalcond[4]=((IkReal(0.00500000000000000))+(((cj6)*(npx)))+(((IkReal(-1.00000000000000))*(x735))));
evalcond[5]=((IkReal(-0.00500000000000000))+(((IkReal(-1.00000000000000))*(npx)*(x734)))+(x735));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  )
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
if( IKabs(((((cj6)*(npy)))+(((npx)*(sj6))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(npz) < IKFAST_ATAN2_MAGTHRESH )
    continue;
IkReal x736=IKatan2(((((cj6)*(npy)))+(((npx)*(sj6)))), npz);
j4array[0]=((IkReal(-1.00000000000000))*(x736));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
j4array[1]=((IkReal(3.14159265358979))+(((IkReal(-1.00000000000000))*(x736))));
sj4array[1]=IKsin(j4array[1]);
cj4array[1]=IKcos(j4array[1]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
if( j4array[1] > IKPI )
{
    j4array[1]-=IK2PI;
}
else if( j4array[1] < -IKPI )
{    j4array[1]+=IK2PI;
}
j4valid[1] = true;
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[1];
IkReal x737=IKsin(j4);
IkReal x738=((IkReal(1.00000000000000))*(x737));
evalcond[0]=((((IkReal(-1.00000000000000))*(cj6)*(npy)*(x738)))+(((IkReal(-1.00000000000000))*(npx)*(sj6)*(x738)))+(((npz)*(IKcos(j4)))));
if( IKabs(evalcond[0]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

} else
{
if( 1 )
{
continue;

} else
{
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
if( IKabs(((gconst11)*(((((IkReal(125.000000000000))*(cj6)*(npy)))+(((IkReal(125.000000000000))*(npx)*(sj6))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(-125.000000000000))*(gconst11)*(npz))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j4array[0]=IKatan2(((gconst11)*(((((IkReal(125.000000000000))*(cj6)*(npy)))+(((IkReal(125.000000000000))*(npx)*(sj6)))))), ((IkReal(-125.000000000000))*(gconst11)*(npz)));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[4];
IkReal x739=IKsin(j4);
IkReal x740=IKcos(j4);
IkReal x741=((IkReal(0.328000000000000))*(sj3));
IkReal x742=((npx)*(sj6));
IkReal x743=((cj6)*(npy));
IkReal x744=((IkReal(1.00000000000000))*(x739));
evalcond[0]=((((x739)*(x741)))+(((IkReal(-1.00000000000000))*(x743)))+(((IkReal(-1.00000000000000))*(x742))));
evalcond[1]=((((IkReal(-1.00000000000000))*(npz)))+(((IkReal(-1.00000000000000))*(x740)*(x741))));
evalcond[2]=((((npz)*(x739)))+(((x740)*(x743)))+(((x740)*(x742))));
evalcond[3]=((((IkReal(-1.00000000000000))*(x742)*(x744)))+(x741)+(((npz)*(x740)))+(((IkReal(-1.00000000000000))*(x743)*(x744))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
if( IKabs(((gconst10)*(((((IkReal(125.000000000000))*(cj6)*(npy)))+(((IkReal(125.000000000000))*(npx)*(sj6))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(-125.000000000000))*(gconst10)*(npz))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j4array[0]=IKatan2(((gconst10)*(((((IkReal(125.000000000000))*(cj6)*(npy)))+(((IkReal(125.000000000000))*(npx)*(sj6)))))), ((IkReal(-125.000000000000))*(gconst10)*(npz)));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[4];
IkReal x745=IKsin(j4);
IkReal x746=IKcos(j4);
IkReal x747=((IkReal(0.328000000000000))*(sj3));
IkReal x748=((npx)*(sj6));
IkReal x749=((cj6)*(npy));
IkReal x750=((IkReal(1.00000000000000))*(x745));
evalcond[0]=((((x745)*(x747)))+(((IkReal(-1.00000000000000))*(x748)))+(((IkReal(-1.00000000000000))*(x749))));
evalcond[1]=((((IkReal(-1.00000000000000))*(x746)*(x747)))+(((IkReal(-1.00000000000000))*(npz))));
evalcond[2]=((((x746)*(x749)))+(((x746)*(x748)))+(((npz)*(x745))));
evalcond[3]=((x747)+(((IkReal(-1.00000000000000))*(x749)*(x750)))+(((npz)*(x746)))+(((IkReal(-1.00000000000000))*(x748)*(x750))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
IkReal x751=((IkReal(-0.323000000000000))+(((IkReal(-1.00000000000000))*(cj6)*(npx)))+(((npy)*(sj6)))+(((IkReal(-0.328000000000000))*(cj3))));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(4.71238898038469))+(j5)), IkReal(6.28318530717959))));
evalcond[1]=((IkReal(-0.211913000000000))+(pp)+(((IkReal(-0.211888000000000))*(cj3))));
evalcond[2]=x751;
evalcond[3]=x751;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst12;
gconst12=IKsign(sj3);
dummyeval[0]=sj3;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst13;
gconst13=IKsign(sj3);
dummyeval[0]=sj3;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[6];
IkReal x752=((IkReal(1.00000000000000))*(npx));
IkReal x753=((IkReal(-0.651000000000000))+(((IkReal(-1.00000000000000))*(cj6)*(x752)))+(((npy)*(sj6))));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(j3)), IkReal(6.28318530717959))));
evalcond[1]=((IkReal(-0.423801000000000))+(pp));
evalcond[2]=((((IkReal(-1.00000000000000))*(cj6)*(npy)))+(((IkReal(-1.00000000000000))*(sj6)*(x752))));
evalcond[3]=((IkReal(-1.00000000000000))*(npz));
evalcond[4]=x753;
evalcond[5]=x753;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  )
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
if( IKabs(((((cj6)*(npy)))+(((npx)*(sj6))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(-1.00000000000000))*(npz))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
IkReal x754=IKatan2(((((cj6)*(npy)))+(((npx)*(sj6)))), ((IkReal(-1.00000000000000))*(npz)));
j4array[0]=((IkReal(-1.00000000000000))*(x754));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
j4array[1]=((IkReal(3.14159265358979))+(((IkReal(-1.00000000000000))*(x754))));
sj4array[1]=IKsin(j4array[1]);
cj4array[1]=IKcos(j4array[1]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
if( j4array[1] > IKPI )
{
    j4array[1]-=IK2PI;
}
else if( j4array[1] < -IKPI )
{    j4array[1]+=IK2PI;
}
j4valid[1] = true;
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[1];
IkReal x755=IKsin(j4);
IkReal x756=((IkReal(1.00000000000000))*(x755));
evalcond[0]=((((IkReal(-1.00000000000000))*(cj6)*(npy)*(x756)))+(((IkReal(-1.00000000000000))*(npx)*(sj6)*(x756)))+(((IkReal(-1.00000000000000))*(npz)*(IKcos(j4)))));
if( IKabs(evalcond[0]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

} else
{
IkReal x757=((IkReal(1.00000000000000))*(npx));
IkReal x758=((IkReal(0.00500000000000000))+(((IkReal(-1.00000000000000))*(cj6)*(x757)))+(((npy)*(sj6))));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(1.11022302462516e-16))+(j3)), IkReal(6.28318530717959))));
evalcond[1]=((IkReal(-2.50000000000000e-5))+(pp));
evalcond[2]=((((IkReal(-1.00000000000000))*(cj6)*(npy)))+(((IkReal(-1.00000000000000))*(sj6)*(x757))));
evalcond[3]=((IkReal(-1.00000000000000))*(npz));
evalcond[4]=x758;
evalcond[5]=x758;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  )
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
if( IKabs(((((cj6)*(npy)))+(((npx)*(sj6))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(-1.00000000000000))*(npz))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
IkReal x759=IKatan2(((((cj6)*(npy)))+(((npx)*(sj6)))), ((IkReal(-1.00000000000000))*(npz)));
j4array[0]=((IkReal(-1.00000000000000))*(x759));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
j4array[1]=((IkReal(3.14159265358979))+(((IkReal(-1.00000000000000))*(x759))));
sj4array[1]=IKsin(j4array[1]);
cj4array[1]=IKcos(j4array[1]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
if( j4array[1] > IKPI )
{
    j4array[1]-=IK2PI;
}
else if( j4array[1] < -IKPI )
{    j4array[1]+=IK2PI;
}
j4valid[1] = true;
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[1];
IkReal x760=IKsin(j4);
IkReal x761=((IkReal(1.00000000000000))*(x760));
evalcond[0]=((((IkReal(-1.00000000000000))*(cj6)*(npy)*(x761)))+(((IkReal(-1.00000000000000))*(npz)*(IKcos(j4))))+(((IkReal(-1.00000000000000))*(npx)*(sj6)*(x761))));
if( IKabs(evalcond[0]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

} else
{
if( 1 )
{
continue;

} else
{
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
if( IKabs(((gconst13)*(((((IkReal(125.000000000000))*(cj6)*(npy)))+(((IkReal(125.000000000000))*(npx)*(sj6))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(125.000000000000))*(gconst13)*(npz))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j4array[0]=IKatan2(((gconst13)*(((((IkReal(125.000000000000))*(cj6)*(npy)))+(((IkReal(125.000000000000))*(npx)*(sj6)))))), ((IkReal(125.000000000000))*(gconst13)*(npz)));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[4];
IkReal x762=IKcos(j4);
IkReal x763=IKsin(j4);
IkReal x764=((IkReal(0.328000000000000))*(sj3));
IkReal x765=((IkReal(1.00000000000000))*(npz));
IkReal x766=((npx)*(sj6));
IkReal x767=((cj6)*(npy));
IkReal x768=((IkReal(1.00000000000000))*(x763));
evalcond[0]=((((x763)*(x764)))+(((IkReal(-1.00000000000000))*(x766)))+(((IkReal(-1.00000000000000))*(x767))));
evalcond[1]=((((IkReal(-1.00000000000000))*(x765)))+(((x762)*(x764))));
evalcond[2]=((((IkReal(-1.00000000000000))*(x763)*(x765)))+(((x762)*(x766)))+(((x762)*(x767))));
evalcond[3]=((((IkReal(-1.00000000000000))*(x762)*(x765)))+(((IkReal(-1.00000000000000))*(x766)*(x768)))+(((IkReal(-1.00000000000000))*(x767)*(x768)))+(x764));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
if( IKabs(((gconst12)*(((((IkReal(125.000000000000))*(cj6)*(npy)))+(((IkReal(125.000000000000))*(npx)*(sj6))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(125.000000000000))*(gconst12)*(npz))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j4array[0]=IKatan2(((gconst12)*(((((IkReal(125.000000000000))*(cj6)*(npy)))+(((IkReal(125.000000000000))*(npx)*(sj6)))))), ((IkReal(125.000000000000))*(gconst12)*(npz)));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[4];
IkReal x769=IKcos(j4);
IkReal x770=IKsin(j4);
IkReal x771=((IkReal(0.328000000000000))*(sj3));
IkReal x772=((IkReal(1.00000000000000))*(npz));
IkReal x773=((npx)*(sj6));
IkReal x774=((cj6)*(npy));
IkReal x775=((IkReal(1.00000000000000))*(x770));
evalcond[0]=((((x770)*(x771)))+(((IkReal(-1.00000000000000))*(x773)))+(((IkReal(-1.00000000000000))*(x774))));
evalcond[1]=((((x769)*(x771)))+(((IkReal(-1.00000000000000))*(x772))));
evalcond[2]=((((x769)*(x774)))+(((x769)*(x773)))+(((IkReal(-1.00000000000000))*(x770)*(x772))));
evalcond[3]=((((IkReal(-1.00000000000000))*(x774)*(x775)))+(((IkReal(-1.00000000000000))*(x769)*(x772)))+(x771)+(((IkReal(-1.00000000000000))*(x773)*(x775))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
IkReal x776=((IkReal(0.328000000000000))*(cj3));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(j5)), IkReal(6.28318530717959))));
evalcond[1]=((IkReal(-0.211913000000000))+(pp)+(((IkReal(-0.211888000000000))*(cj3))));
evalcond[2]=((IkReal(0.323000000000000))+(((IkReal(-1.00000000000000))*(npz)))+(x776));
evalcond[3]=((IkReal(-0.323000000000000))+(npz)+(((IkReal(-1.00000000000000))*(x776))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst14;
gconst14=IKsign(sj3);
dummyeval[0]=sj3;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[2];
IkReal x777=((IkReal(1.00000000000000))*(sj3));
dummyeval[0]=((((IkReal(-1.00000000000000))*(npx)*(sj6)*(x777)))+(((IkReal(-1.00000000000000))*(cj6)*(npy)*(x777))));
dummyeval[1]=sj3;
if( IKabs(dummyeval[0]) < 0.0000010000000000  || IKabs(dummyeval[1]) < 0.0000010000000000  )
{
{
IkReal dummyeval[2];
dummyeval[0]=((((npy)*(sj3)*(sj6)))+(((IkReal(-1.00000000000000))*(cj6)*(npx)*(sj3))));
dummyeval[1]=sj3;
if( IKabs(dummyeval[0]) < 0.0000010000000000  || IKabs(dummyeval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[6];
IkReal x778=((IkReal(1.00000000000000))*(npx));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(j3)), IkReal(6.28318530717959))));
evalcond[1]=((IkReal(-0.423801000000000))+(pp));
evalcond[2]=((((IkReal(-1.00000000000000))*(sj6)*(x778)))+(((IkReal(-1.00000000000000))*(cj6)*(npy))));
evalcond[3]=((IkReal(0.651000000000000))+(((IkReal(-1.00000000000000))*(npz))));
evalcond[4]=((IkReal(-0.651000000000000))+(npz));
evalcond[5]=((((IkReal(-1.00000000000000))*(cj6)*(x778)))+(((npy)*(sj6))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  )
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
if( IKabs(((((cj6)*(npy)))+(((npx)*(sj6))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((IkReal(-1.00000000000000))*(cj6)*(npx)))+(((npy)*(sj6))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
IkReal x779=IKatan2(((((cj6)*(npy)))+(((npx)*(sj6)))), ((((IkReal(-1.00000000000000))*(cj6)*(npx)))+(((npy)*(sj6)))));
j4array[0]=((IkReal(-1.00000000000000))*(x779));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
j4array[1]=((IkReal(3.14159265358979))+(((IkReal(-1.00000000000000))*(x779))));
sj4array[1]=IKsin(j4array[1]);
cj4array[1]=IKcos(j4array[1]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
if( j4array[1] > IKPI )
{
    j4array[1]-=IK2PI;
}
else if( j4array[1] < -IKPI )
{    j4array[1]+=IK2PI;
}
j4valid[1] = true;
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[1];
IkReal x780=IKcos(j4);
IkReal x781=IKsin(j4);
IkReal x782=((IkReal(1.00000000000000))*(npx));
evalcond[0]=((((npy)*(sj6)*(x780)))+(((IkReal(-1.00000000000000))*(sj6)*(x781)*(x782)))+(((IkReal(-1.00000000000000))*(cj6)*(npy)*(x781)))+(((IkReal(-1.00000000000000))*(cj6)*(x780)*(x782))));
if( IKabs(evalcond[0]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

} else
{
IkReal x783=((IkReal(1.00000000000000))*(npx));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(1.11022302462516e-16))+(j3)), IkReal(6.28318530717959))));
evalcond[1]=((IkReal(-2.50000000000000e-5))+(pp));
evalcond[2]=((((IkReal(-1.00000000000000))*(cj6)*(npy)))+(((IkReal(-1.00000000000000))*(sj6)*(x783))));
evalcond[3]=((IkReal(-0.00500000000000000))+(((IkReal(-1.00000000000000))*(npz))));
evalcond[4]=((IkReal(0.00500000000000000))+(npz));
evalcond[5]=((((IkReal(-1.00000000000000))*(cj6)*(x783)))+(((npy)*(sj6))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  )
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
if( IKabs(((((cj6)*(npy)))+(((npx)*(sj6))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((IkReal(-1.00000000000000))*(cj6)*(npx)))+(((npy)*(sj6))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
IkReal x784=IKatan2(((((cj6)*(npy)))+(((npx)*(sj6)))), ((((IkReal(-1.00000000000000))*(cj6)*(npx)))+(((npy)*(sj6)))));
j4array[0]=((IkReal(-1.00000000000000))*(x784));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
j4array[1]=((IkReal(3.14159265358979))+(((IkReal(-1.00000000000000))*(x784))));
sj4array[1]=IKsin(j4array[1]);
cj4array[1]=IKcos(j4array[1]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
if( j4array[1] > IKPI )
{
    j4array[1]-=IK2PI;
}
else if( j4array[1] < -IKPI )
{    j4array[1]+=IK2PI;
}
j4valid[1] = true;
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[1];
IkReal x785=IKcos(j4);
IkReal x786=IKsin(j4);
IkReal x787=((IkReal(1.00000000000000))*(npx));
evalcond[0]=((((IkReal(-1.00000000000000))*(cj6)*(x785)*(x787)))+(((npy)*(sj6)*(x785)))+(((IkReal(-1.00000000000000))*(cj6)*(npy)*(x786)))+(((IkReal(-1.00000000000000))*(sj6)*(x786)*(x787))));
if( IKabs(evalcond[0]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

} else
{
if( 1 )
{
continue;

} else
{
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x788=((npy)*(sj6));
IkReal x789=((IkReal(41.0000000000000))*(sj3));
IkReal x790=((cj6)*(npx));
IkReal x791=((IkReal(125.000000000000))*(npx)*(npy));
IkReal x792=((IkReal(125.000000000000))*(cj6)*(sj6));
if( IKabs(((((IKabs(((((x788)*(x789)))+(((IkReal(-1.00000000000000))*(x789)*(x790))))) != 0)?((IkReal)1/(((((x788)*(x789)))+(((IkReal(-1.00000000000000))*(x789)*(x790)))))):(IkReal)1.0e30))*(((((IkReal(-125.000000000000))*(cj6)*(npy)*(x790)))+(((IkReal(-125.000000000000))*(npx)*(sj6)*(x790)))+(((IkReal(125.000000000000))*(cj6)*(npy)*(x788)))+(((IkReal(125.000000000000))*(npx)*(sj6)*(x788))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(0.0243902439024390))*(((IKabs(sj3) != 0)?((IkReal)1/(sj3)):(IkReal)1.0e30))*(((((IkReal(125.000000000000))*(x790)))+(((IkReal(-125.000000000000))*(x788))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((IKabs(((((x788)*(x789)))+(((IkReal(-1.00000000000000))*(x789)*(x790))))) != 0)?((IkReal)1/(((((x788)*(x789)))+(((IkReal(-1.00000000000000))*(x789)*(x790)))))):(IkReal)1.0e30))*(((((IkReal(-125.000000000000))*(cj6)*(npy)*(x790)))+(((IkReal(-125.000000000000))*(npx)*(sj6)*(x790)))+(((IkReal(125.000000000000))*(cj6)*(npy)*(x788)))+(((IkReal(125.000000000000))*(npx)*(sj6)*(x788)))))))+IKsqr(((IkReal(0.0243902439024390))*(((IKabs(sj3) != 0)?((IkReal)1/(sj3)):(IkReal)1.0e30))*(((((IkReal(125.000000000000))*(x790)))+(((IkReal(-125.000000000000))*(x788)))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((((IKabs(((((x788)*(x789)))+(((IkReal(-1.00000000000000))*(x789)*(x790))))) != 0)?((IkReal)1/(((((x788)*(x789)))+(((IkReal(-1.00000000000000))*(x789)*(x790)))))):(IkReal)1.0e30))*(((((IkReal(-125.000000000000))*(cj6)*(npy)*(x790)))+(((IkReal(-125.000000000000))*(npx)*(sj6)*(x790)))+(((IkReal(125.000000000000))*(cj6)*(npy)*(x788)))+(((IkReal(125.000000000000))*(npx)*(sj6)*(x788)))))), ((IkReal(0.0243902439024390))*(((IKabs(sj3) != 0)?((IkReal)1/(sj3)):(IkReal)1.0e30))*(((((IkReal(125.000000000000))*(x790)))+(((IkReal(-125.000000000000))*(x788)))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[4];
IkReal x793=IKcos(j4);
IkReal x794=IKsin(j4);
IkReal x795=((IkReal(0.328000000000000))*(sj3));
IkReal x796=((IkReal(1.00000000000000))*(cj6));
IkReal x797=((npx)*(sj6));
IkReal x798=((npy)*(sj6));
evalcond[0]=((((IkReal(-1.00000000000000))*(npy)*(x796)))+(((IkReal(-1.00000000000000))*(x797)))+(((x794)*(x795))));
evalcond[1]=((((x793)*(x795)))+(((IkReal(-1.00000000000000))*(npx)*(x796)))+(x798));
evalcond[2]=((((x793)*(x797)))+(((IkReal(-1.00000000000000))*(npx)*(x794)*(x796)))+(((x794)*(x798)))+(((cj6)*(npy)*(x793))));
evalcond[3]=((((IkReal(-1.00000000000000))*(npy)*(x794)*(x796)))+(((x793)*(x798)))+(((IkReal(-1.00000000000000))*(x794)*(x797)))+(((IkReal(-1.00000000000000))*(npx)*(x793)*(x796)))+(x795));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x799=((npy)*(sj6));
IkReal x800=((IkReal(5125.00000000000))*(sj3));
IkReal x801=((cj6)*(npx));
if( IKabs(((((IKabs(((((IkReal(-1.00000000000000))*(cj6)*(npy)*(x800)))+(((IkReal(-1.00000000000000))*(npx)*(sj6)*(x800))))) != 0)?((IkReal)1/(((((IkReal(-1.00000000000000))*(cj6)*(npy)*(x800)))+(((IkReal(-1.00000000000000))*(npx)*(sj6)*(x800)))))):(IkReal)1.0e30))*(((((IkReal(-31250.0000000000))*(x799)*(x801)))+(((IkReal(15625.0000000000))*((x799)*(x799))))+(((IkReal(15625.0000000000))*((x801)*(x801))))+(((IkReal(-1681.00000000000))*((sj3)*(sj3)))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(0.0243902439024390))*(((IKabs(sj3) != 0)?((IkReal)1/(sj3)):(IkReal)1.0e30))*(((((IkReal(125.000000000000))*(x801)))+(((IkReal(-125.000000000000))*(x799))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((IKabs(((((IkReal(-1.00000000000000))*(cj6)*(npy)*(x800)))+(((IkReal(-1.00000000000000))*(npx)*(sj6)*(x800))))) != 0)?((IkReal)1/(((((IkReal(-1.00000000000000))*(cj6)*(npy)*(x800)))+(((IkReal(-1.00000000000000))*(npx)*(sj6)*(x800)))))):(IkReal)1.0e30))*(((((IkReal(-31250.0000000000))*(x799)*(x801)))+(((IkReal(15625.0000000000))*((x799)*(x799))))+(((IkReal(15625.0000000000))*((x801)*(x801))))+(((IkReal(-1681.00000000000))*((sj3)*(sj3))))))))+IKsqr(((IkReal(0.0243902439024390))*(((IKabs(sj3) != 0)?((IkReal)1/(sj3)):(IkReal)1.0e30))*(((((IkReal(125.000000000000))*(x801)))+(((IkReal(-125.000000000000))*(x799)))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((((IKabs(((((IkReal(-1.00000000000000))*(cj6)*(npy)*(x800)))+(((IkReal(-1.00000000000000))*(npx)*(sj6)*(x800))))) != 0)?((IkReal)1/(((((IkReal(-1.00000000000000))*(cj6)*(npy)*(x800)))+(((IkReal(-1.00000000000000))*(npx)*(sj6)*(x800)))))):(IkReal)1.0e30))*(((((IkReal(-31250.0000000000))*(x799)*(x801)))+(((IkReal(15625.0000000000))*((x799)*(x799))))+(((IkReal(15625.0000000000))*((x801)*(x801))))+(((IkReal(-1681.00000000000))*((sj3)*(sj3))))))), ((IkReal(0.0243902439024390))*(((IKabs(sj3) != 0)?((IkReal)1/(sj3)):(IkReal)1.0e30))*(((((IkReal(125.000000000000))*(x801)))+(((IkReal(-125.000000000000))*(x799)))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[4];
IkReal x802=IKcos(j4);
IkReal x803=IKsin(j4);
IkReal x804=((IkReal(0.328000000000000))*(sj3));
IkReal x805=((IkReal(1.00000000000000))*(cj6));
IkReal x806=((npx)*(sj6));
IkReal x807=((npy)*(sj6));
evalcond[0]=((((IkReal(-1.00000000000000))*(x806)))+(((x803)*(x804)))+(((IkReal(-1.00000000000000))*(npy)*(x805))));
evalcond[1]=((x807)+(((x802)*(x804)))+(((IkReal(-1.00000000000000))*(npx)*(x805))));
evalcond[2]=((((x803)*(x807)))+(((IkReal(-1.00000000000000))*(npx)*(x803)*(x805)))+(((x802)*(x806)))+(((cj6)*(npy)*(x802))));
evalcond[3]=((((IkReal(-1.00000000000000))*(x803)*(x806)))+(((IkReal(-1.00000000000000))*(npx)*(x802)*(x805)))+(((IkReal(-1.00000000000000))*(npy)*(x803)*(x805)))+(x804)+(((x802)*(x807))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x808=((IkReal(125.000000000000))*(npy));
IkReal x809=((IkReal(125.000000000000))*(npx));
if( IKabs(((gconst14)*(((((cj6)*(x808)))+(((sj6)*(x809))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst14)*(((((cj6)*(x809)))+(((IkReal(-1.00000000000000))*(sj6)*(x808))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j4array[0]=IKatan2(((gconst14)*(((((cj6)*(x808)))+(((sj6)*(x809)))))), ((gconst14)*(((((cj6)*(x809)))+(((IkReal(-1.00000000000000))*(sj6)*(x808)))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[4];
IkReal x810=IKcos(j4);
IkReal x811=IKsin(j4);
IkReal x812=((IkReal(0.328000000000000))*(sj3));
IkReal x813=((IkReal(1.00000000000000))*(cj6));
IkReal x814=((npx)*(sj6));
IkReal x815=((npy)*(sj6));
evalcond[0]=((((IkReal(-1.00000000000000))*(npy)*(x813)))+(((IkReal(-1.00000000000000))*(x814)))+(((x811)*(x812))));
evalcond[1]=((((IkReal(-1.00000000000000))*(npx)*(x813)))+(((x810)*(x812)))+(x815));
evalcond[2]=((((IkReal(-1.00000000000000))*(npx)*(x811)*(x813)))+(((cj6)*(npy)*(x810)))+(((x810)*(x814)))+(((x811)*(x815))));
evalcond[3]=((((IkReal(-1.00000000000000))*(npx)*(x810)*(x813)))+(((IkReal(-1.00000000000000))*(npy)*(x811)*(x813)))+(((x810)*(x815)))+(((IkReal(-1.00000000000000))*(x811)*(x814)))+(x812));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
IkReal x816=((IkReal(-0.323000000000000))+(((IkReal(-1.00000000000000))*(npz)))+(((IkReal(-0.328000000000000))*(cj3))));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(1.11022302462516e-16))+(j5)), IkReal(6.28318530717959))));
evalcond[1]=((IkReal(-0.211913000000000))+(pp)+(((IkReal(-0.211888000000000))*(cj3))));
evalcond[2]=x816;
evalcond[3]=x816;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst15;
gconst15=IKsign(sj3);
dummyeval[0]=sj3;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[2];
IkReal x817=((IkReal(1.00000000000000))*(sj3));
dummyeval[0]=((((IkReal(-1.00000000000000))*(cj6)*(npy)*(x817)))+(((IkReal(-1.00000000000000))*(npx)*(sj6)*(x817))));
dummyeval[1]=sj3;
if( IKabs(dummyeval[0]) < 0.0000010000000000  || IKabs(dummyeval[1]) < 0.0000010000000000  )
{
{
IkReal dummyeval[2];
dummyeval[0]=((((IkReal(-1.00000000000000))*(npy)*(sj3)*(sj6)))+(((cj6)*(npx)*(sj3))));
dummyeval[1]=sj3;
if( IKabs(dummyeval[0]) < 0.0000010000000000  || IKabs(dummyeval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[6];
IkReal x818=((IkReal(-0.651000000000000))+(((IkReal(-1.00000000000000))*(npz))));
IkReal x819=((IkReal(1.00000000000000))*(npx));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(j3)), IkReal(6.28318530717959))));
evalcond[1]=((IkReal(-0.423801000000000))+(pp));
evalcond[2]=((((IkReal(-1.00000000000000))*(sj6)*(x819)))+(((IkReal(-1.00000000000000))*(cj6)*(npy))));
evalcond[3]=x818;
evalcond[4]=x818;
evalcond[5]=((((npy)*(sj6)))+(((IkReal(-1.00000000000000))*(cj6)*(x819))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  )
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
if( IKabs(((((cj6)*(npy)))+(((npx)*(sj6))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((cj6)*(npx)))+(((IkReal(-1.00000000000000))*(npy)*(sj6))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
IkReal x820=IKatan2(((((cj6)*(npy)))+(((npx)*(sj6)))), ((((cj6)*(npx)))+(((IkReal(-1.00000000000000))*(npy)*(sj6)))));
j4array[0]=((IkReal(-1.00000000000000))*(x820));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
j4array[1]=((IkReal(3.14159265358979))+(((IkReal(-1.00000000000000))*(x820))));
sj4array[1]=IKsin(j4array[1]);
cj4array[1]=IKcos(j4array[1]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
if( j4array[1] > IKPI )
{
    j4array[1]-=IK2PI;
}
else if( j4array[1] < -IKPI )
{    j4array[1]+=IK2PI;
}
j4valid[1] = true;
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[1];
IkReal x821=IKcos(j4);
IkReal x822=IKsin(j4);
IkReal x823=((IkReal(1.00000000000000))*(sj6));
evalcond[0]=((((IkReal(-1.00000000000000))*(npy)*(x821)*(x823)))+(((IkReal(-1.00000000000000))*(npx)*(x822)*(x823)))+(((cj6)*(npx)*(x821)))+(((IkReal(-1.00000000000000))*(cj6)*(npy)*(x822))));
if( IKabs(evalcond[0]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

} else
{
IkReal x824=((IkReal(0.00500000000000000))+(((IkReal(-1.00000000000000))*(npz))));
IkReal x825=((IkReal(1.00000000000000))*(npx));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(1.11022302462516e-16))+(j3)), IkReal(6.28318530717959))));
evalcond[1]=((IkReal(-2.50000000000000e-5))+(pp));
evalcond[2]=((((IkReal(-1.00000000000000))*(cj6)*(npy)))+(((IkReal(-1.00000000000000))*(sj6)*(x825))));
evalcond[3]=x824;
evalcond[4]=x824;
evalcond[5]=((((IkReal(-1.00000000000000))*(cj6)*(x825)))+(((npy)*(sj6))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  )
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
if( IKabs(((((cj6)*(npy)))+(((npx)*(sj6))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((cj6)*(npx)))+(((IkReal(-1.00000000000000))*(npy)*(sj6))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
IkReal x826=IKatan2(((((cj6)*(npy)))+(((npx)*(sj6)))), ((((cj6)*(npx)))+(((IkReal(-1.00000000000000))*(npy)*(sj6)))));
j4array[0]=((IkReal(-1.00000000000000))*(x826));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
j4array[1]=((IkReal(3.14159265358979))+(((IkReal(-1.00000000000000))*(x826))));
sj4array[1]=IKsin(j4array[1]);
cj4array[1]=IKcos(j4array[1]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
if( j4array[1] > IKPI )
{
    j4array[1]-=IK2PI;
}
else if( j4array[1] < -IKPI )
{    j4array[1]+=IK2PI;
}
j4valid[1] = true;
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[1];
IkReal x827=IKcos(j4);
IkReal x828=IKsin(j4);
IkReal x829=((IkReal(1.00000000000000))*(sj6));
evalcond[0]=((((cj6)*(npx)*(x827)))+(((IkReal(-1.00000000000000))*(npx)*(x828)*(x829)))+(((IkReal(-1.00000000000000))*(cj6)*(npy)*(x828)))+(((IkReal(-1.00000000000000))*(npy)*(x827)*(x829))));
if( IKabs(evalcond[0]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

} else
{
if( 1 )
{
continue;

} else
{
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x830=((npy)*(sj6));
IkReal x831=((IkReal(41.0000000000000))*(sj3));
IkReal x832=((cj6)*(npx));
IkReal x833=((IkReal(125.000000000000))*(npx)*(npy));
IkReal x834=((IkReal(125.000000000000))*(cj6)*(sj6));
if( IKabs(((((IKabs(((((x831)*(x832)))+(((IkReal(-1.00000000000000))*(x830)*(x831))))) != 0)?((IkReal)1/(((((x831)*(x832)))+(((IkReal(-1.00000000000000))*(x830)*(x831)))))):(IkReal)1.0e30))*(((((IkReal(125.000000000000))*(cj6)*(npy)*(x832)))+(((IkReal(-125.000000000000))*(cj6)*(npy)*(x830)))+(((IkReal(-125.000000000000))*(npx)*(sj6)*(x830)))+(((IkReal(125.000000000000))*(npx)*(sj6)*(x832))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(0.0243902439024390))*(((IKabs(sj3) != 0)?((IkReal)1/(sj3)):(IkReal)1.0e30))*(((((IkReal(-125.000000000000))*(x832)))+(((IkReal(125.000000000000))*(x830))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((IKabs(((((x831)*(x832)))+(((IkReal(-1.00000000000000))*(x830)*(x831))))) != 0)?((IkReal)1/(((((x831)*(x832)))+(((IkReal(-1.00000000000000))*(x830)*(x831)))))):(IkReal)1.0e30))*(((((IkReal(125.000000000000))*(cj6)*(npy)*(x832)))+(((IkReal(-125.000000000000))*(cj6)*(npy)*(x830)))+(((IkReal(-125.000000000000))*(npx)*(sj6)*(x830)))+(((IkReal(125.000000000000))*(npx)*(sj6)*(x832)))))))+IKsqr(((IkReal(0.0243902439024390))*(((IKabs(sj3) != 0)?((IkReal)1/(sj3)):(IkReal)1.0e30))*(((((IkReal(-125.000000000000))*(x832)))+(((IkReal(125.000000000000))*(x830)))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((((IKabs(((((x831)*(x832)))+(((IkReal(-1.00000000000000))*(x830)*(x831))))) != 0)?((IkReal)1/(((((x831)*(x832)))+(((IkReal(-1.00000000000000))*(x830)*(x831)))))):(IkReal)1.0e30))*(((((IkReal(125.000000000000))*(cj6)*(npy)*(x832)))+(((IkReal(-125.000000000000))*(cj6)*(npy)*(x830)))+(((IkReal(-125.000000000000))*(npx)*(sj6)*(x830)))+(((IkReal(125.000000000000))*(npx)*(sj6)*(x832)))))), ((IkReal(0.0243902439024390))*(((IKabs(sj3) != 0)?((IkReal)1/(sj3)):(IkReal)1.0e30))*(((((IkReal(-125.000000000000))*(x832)))+(((IkReal(125.000000000000))*(x830)))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[4];
IkReal x835=IKcos(j4);
IkReal x836=IKsin(j4);
IkReal x837=((IkReal(0.328000000000000))*(sj3));
IkReal x838=((cj6)*(npx));
IkReal x839=((IkReal(1.00000000000000))*(npy));
IkReal x840=((sj6)*(x835));
IkReal x841=((IkReal(1.00000000000000))*(npx)*(sj6));
evalcond[0]=((((x836)*(x837)))+(((IkReal(-1.00000000000000))*(x841)))+(((IkReal(-1.00000000000000))*(cj6)*(x839))));
evalcond[1]=((((IkReal(-1.00000000000000))*(x835)*(x837)))+(((npy)*(sj6)))+(((IkReal(-1.00000000000000))*(x838))));
evalcond[2]=((((cj6)*(npy)*(x835)))+(((npx)*(x840)))+(((IkReal(-1.00000000000000))*(sj6)*(x836)*(x839)))+(((x836)*(x838))));
evalcond[3]=((((IkReal(-1.00000000000000))*(x836)*(x841)))+(((IkReal(-1.00000000000000))*(cj6)*(x836)*(x839)))+(((x835)*(x838)))+(((IkReal(-1.00000000000000))*(x839)*(x840)))+(x837));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x842=((npy)*(sj6));
IkReal x843=((IkReal(5125.00000000000))*(sj3));
IkReal x844=((cj6)*(npx));
if( IKabs(((((IKabs(((((IkReal(-1.00000000000000))*(cj6)*(npy)*(x843)))+(((IkReal(-1.00000000000000))*(npx)*(sj6)*(x843))))) != 0)?((IkReal)1/(((((IkReal(-1.00000000000000))*(cj6)*(npy)*(x843)))+(((IkReal(-1.00000000000000))*(npx)*(sj6)*(x843)))))):(IkReal)1.0e30))*(((((IkReal(-31250.0000000000))*(x842)*(x844)))+(((IkReal(15625.0000000000))*((x842)*(x842))))+(((IkReal(15625.0000000000))*((x844)*(x844))))+(((IkReal(-1681.00000000000))*((sj3)*(sj3)))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(0.0243902439024390))*(((IKabs(sj3) != 0)?((IkReal)1/(sj3)):(IkReal)1.0e30))*(((((IkReal(-125.000000000000))*(x844)))+(((IkReal(125.000000000000))*(x842))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((IKabs(((((IkReal(-1.00000000000000))*(cj6)*(npy)*(x843)))+(((IkReal(-1.00000000000000))*(npx)*(sj6)*(x843))))) != 0)?((IkReal)1/(((((IkReal(-1.00000000000000))*(cj6)*(npy)*(x843)))+(((IkReal(-1.00000000000000))*(npx)*(sj6)*(x843)))))):(IkReal)1.0e30))*(((((IkReal(-31250.0000000000))*(x842)*(x844)))+(((IkReal(15625.0000000000))*((x842)*(x842))))+(((IkReal(15625.0000000000))*((x844)*(x844))))+(((IkReal(-1681.00000000000))*((sj3)*(sj3))))))))+IKsqr(((IkReal(0.0243902439024390))*(((IKabs(sj3) != 0)?((IkReal)1/(sj3)):(IkReal)1.0e30))*(((((IkReal(-125.000000000000))*(x844)))+(((IkReal(125.000000000000))*(x842)))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((((IKabs(((((IkReal(-1.00000000000000))*(cj6)*(npy)*(x843)))+(((IkReal(-1.00000000000000))*(npx)*(sj6)*(x843))))) != 0)?((IkReal)1/(((((IkReal(-1.00000000000000))*(cj6)*(npy)*(x843)))+(((IkReal(-1.00000000000000))*(npx)*(sj6)*(x843)))))):(IkReal)1.0e30))*(((((IkReal(-31250.0000000000))*(x842)*(x844)))+(((IkReal(15625.0000000000))*((x842)*(x842))))+(((IkReal(15625.0000000000))*((x844)*(x844))))+(((IkReal(-1681.00000000000))*((sj3)*(sj3))))))), ((IkReal(0.0243902439024390))*(((IKabs(sj3) != 0)?((IkReal)1/(sj3)):(IkReal)1.0e30))*(((((IkReal(-125.000000000000))*(x844)))+(((IkReal(125.000000000000))*(x842)))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[4];
IkReal x845=IKcos(j4);
IkReal x846=IKsin(j4);
IkReal x847=((IkReal(0.328000000000000))*(sj3));
IkReal x848=((cj6)*(npx));
IkReal x849=((IkReal(1.00000000000000))*(npy));
IkReal x850=((sj6)*(x845));
IkReal x851=((IkReal(1.00000000000000))*(npx)*(sj6));
evalcond[0]=((((IkReal(-1.00000000000000))*(x851)))+(((x846)*(x847)))+(((IkReal(-1.00000000000000))*(cj6)*(x849))));
evalcond[1]=((((npy)*(sj6)))+(((IkReal(-1.00000000000000))*(x848)))+(((IkReal(-1.00000000000000))*(x845)*(x847))));
evalcond[2]=((((IkReal(-1.00000000000000))*(sj6)*(x846)*(x849)))+(((cj6)*(npy)*(x845)))+(((x846)*(x848)))+(((npx)*(x850))));
evalcond[3]=((((IkReal(-1.00000000000000))*(x846)*(x851)))+(((IkReal(-1.00000000000000))*(cj6)*(x846)*(x849)))+(((IkReal(-1.00000000000000))*(x849)*(x850)))+(((x845)*(x848)))+(x847));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x852=((IkReal(125.000000000000))*(npy));
IkReal x853=((IkReal(125.000000000000))*(npx));
if( IKabs(((gconst15)*(((((cj6)*(x852)))+(((sj6)*(x853))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst15)*(((((IkReal(-1.00000000000000))*(cj6)*(x853)))+(((sj6)*(x852))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j4array[0]=IKatan2(((gconst15)*(((((cj6)*(x852)))+(((sj6)*(x853)))))), ((gconst15)*(((((IkReal(-1.00000000000000))*(cj6)*(x853)))+(((sj6)*(x852)))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[4];
IkReal x854=IKcos(j4);
IkReal x855=IKsin(j4);
IkReal x856=((IkReal(0.328000000000000))*(sj3));
IkReal x857=((cj6)*(npx));
IkReal x858=((IkReal(1.00000000000000))*(npy));
IkReal x859=((sj6)*(x854));
IkReal x860=((IkReal(1.00000000000000))*(npx)*(sj6));
evalcond[0]=((((IkReal(-1.00000000000000))*(x860)))+(((x855)*(x856)))+(((IkReal(-1.00000000000000))*(cj6)*(x858))));
evalcond[1]=((((IkReal(-1.00000000000000))*(x857)))+(((npy)*(sj6)))+(((IkReal(-1.00000000000000))*(x854)*(x856))));
evalcond[2]=((((x855)*(x857)))+(((cj6)*(npy)*(x854)))+(((npx)*(x859)))+(((IkReal(-1.00000000000000))*(sj6)*(x855)*(x858))));
evalcond[3]=((((IkReal(-1.00000000000000))*(x858)*(x859)))+(((x854)*(x857)))+(((IkReal(-1.00000000000000))*(cj6)*(x855)*(x858)))+(x856)+(((IkReal(-1.00000000000000))*(x855)*(x860))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
if( 1 )
{
continue;

} else
{
}
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x861=((IKabs(sj3) != 0)?((IkReal)1/(sj3)):(IkReal)1.0e30);
IkReal x862=((IkReal(125.000000000000))*(npy));
IkReal x863=((IkReal(0.0243902439024390))*(x861));
IkReal x864=((IkReal(125.000000000000))*(npx));
if( IKabs(((x863)*(((((cj6)*(x862)))+(((sj6)*(x864))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x863)*(((IKabs(cj5) != 0)?((IkReal)1/(cj5)):(IkReal)1.0e30))*(((((IkReal(-40.3750000000000))*(sj5)))+(((IkReal(-1.00000000000000))*(sj6)*(x862)))+(((cj6)*(x864)))+(((IkReal(-41.0000000000000))*(cj3)*(sj5))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x863)*(((((cj6)*(x862)))+(((sj6)*(x864)))))))+IKsqr(((x863)*(((IKabs(cj5) != 0)?((IkReal)1/(cj5)):(IkReal)1.0e30))*(((((IkReal(-40.3750000000000))*(sj5)))+(((IkReal(-1.00000000000000))*(sj6)*(x862)))+(((cj6)*(x864)))+(((IkReal(-41.0000000000000))*(cj3)*(sj5)))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x863)*(((((cj6)*(x862)))+(((sj6)*(x864)))))), ((x863)*(((IKabs(cj5) != 0)?((IkReal)1/(cj5)):(IkReal)1.0e30))*(((((IkReal(-40.3750000000000))*(sj5)))+(((IkReal(-1.00000000000000))*(sj6)*(x862)))+(((cj6)*(x864)))+(((IkReal(-41.0000000000000))*(cj3)*(sj5)))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x865=IKcos(j4);
IkReal x866=IKsin(j4);
IkReal x867=((npy)*(sj6));
IkReal x868=((IkReal(1.00000000000000))*(npx));
IkReal x869=((IkReal(0.328000000000000))*(cj3));
IkReal x870=((IkReal(0.328000000000000))*(sj3));
IkReal x871=((cj6)*(x865));
IkReal x872=((IkReal(1.00000000000000))*(cj6)*(npy));
IkReal x873=((sj5)*(x865));
IkReal x874=((cj5)*(x866));
IkReal x875=((cj5)*(x865));
evalcond[0]=((((IkReal(-1.00000000000000))*(sj6)*(x868)))+(((x866)*(x870)))+(((IkReal(-1.00000000000000))*(x872))));
evalcond[1]=((((IkReal(-1.00000000000000))*(npz)))+(((IkReal(0.323000000000000))*(cj5)))+(((IkReal(-1.00000000000000))*(x870)*(x873)))+(((cj5)*(x869))));
evalcond[2]=((((x870)*(x875)))+(((sj5)*(x869)))+(((IkReal(-1.00000000000000))*(cj6)*(x868)))+(((IkReal(0.323000000000000))*(sj5)))+(x867));
evalcond[3]=((((npx)*(sj6)*(x865)))+(((x867)*(x874)))+(((npz)*(sj5)*(x866)))+(((npy)*(x871)))+(((IkReal(-1.00000000000000))*(cj6)*(x868)*(x874))));
evalcond[4]=((((x867)*(x875)))+(((IkReal(-1.00000000000000))*(x866)*(x872)))+(((IkReal(-1.00000000000000))*(sj6)*(x866)*(x868)))+(((IkReal(-1.00000000000000))*(cj5)*(x868)*(x871)))+(x870)+(((npz)*(x873))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x876=((IKabs(sj3) != 0)?((IkReal)1/(sj3)):(IkReal)1.0e30);
IkReal x877=((IkReal(0.0243902439024390))*(x876));
if( IKabs(((x877)*(((((IkReal(125.000000000000))*(cj6)*(npy)))+(((IkReal(125.000000000000))*(npx)*(sj6))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x877)*(((IKabs(sj5) != 0)?((IkReal)1/(sj5)):(IkReal)1.0e30))*(((((IkReal(40.3750000000000))*(cj5)))+(((IkReal(-125.000000000000))*(npz)))+(((IkReal(41.0000000000000))*(cj3)*(cj5))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x877)*(((((IkReal(125.000000000000))*(cj6)*(npy)))+(((IkReal(125.000000000000))*(npx)*(sj6)))))))+IKsqr(((x877)*(((IKabs(sj5) != 0)?((IkReal)1/(sj5)):(IkReal)1.0e30))*(((((IkReal(40.3750000000000))*(cj5)))+(((IkReal(-125.000000000000))*(npz)))+(((IkReal(41.0000000000000))*(cj3)*(cj5)))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x877)*(((((IkReal(125.000000000000))*(cj6)*(npy)))+(((IkReal(125.000000000000))*(npx)*(sj6)))))), ((x877)*(((IKabs(sj5) != 0)?((IkReal)1/(sj5)):(IkReal)1.0e30))*(((((IkReal(40.3750000000000))*(cj5)))+(((IkReal(-125.000000000000))*(npz)))+(((IkReal(41.0000000000000))*(cj3)*(cj5)))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x878=IKcos(j4);
IkReal x879=IKsin(j4);
IkReal x880=((npy)*(sj6));
IkReal x881=((IkReal(1.00000000000000))*(npx));
IkReal x882=((IkReal(0.328000000000000))*(cj3));
IkReal x883=((IkReal(0.328000000000000))*(sj3));
IkReal x884=((cj6)*(x878));
IkReal x885=((IkReal(1.00000000000000))*(cj6)*(npy));
IkReal x886=((sj5)*(x878));
IkReal x887=((cj5)*(x879));
IkReal x888=((cj5)*(x878));
evalcond[0]=((((x879)*(x883)))+(((IkReal(-1.00000000000000))*(x885)))+(((IkReal(-1.00000000000000))*(sj6)*(x881))));
evalcond[1]=((((IkReal(-1.00000000000000))*(x883)*(x886)))+(((IkReal(-1.00000000000000))*(npz)))+(((IkReal(0.323000000000000))*(cj5)))+(((cj5)*(x882))));
evalcond[2]=((((x883)*(x888)))+(((IkReal(0.323000000000000))*(sj5)))+(((sj5)*(x882)))+(x880)+(((IkReal(-1.00000000000000))*(cj6)*(x881))));
evalcond[3]=((((npx)*(sj6)*(x878)))+(((IkReal(-1.00000000000000))*(cj6)*(x881)*(x887)))+(((x880)*(x887)))+(((npy)*(x884)))+(((npz)*(sj5)*(x879))));
evalcond[4]=((((IkReal(-1.00000000000000))*(x879)*(x885)))+(((x880)*(x888)))+(((IkReal(-1.00000000000000))*(sj6)*(x879)*(x881)))+(((npz)*(x886)))+(x883)+(((IkReal(-1.00000000000000))*(cj5)*(x881)*(x884))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x889=((IkReal(125.000000000000))*(cj6));
IkReal x890=((cj5)*(sj6));
IkReal x891=((npz)*(sj5));
IkReal x892=((IkReal(125.000000000000))*(npx));
IkReal x893=((cj5)*(npy));
IkReal x894=((IkReal(41.0000000000000))*(sj3));
if( IKabs(((IkReal(0.0243902439024390))*(((IKabs(sj3) != 0)?((IkReal)1/(sj3)):(IkReal)1.0e30))*(((((npy)*(x889)))+(((sj6)*(x892))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((IKabs(((((cj6)*(npy)*(x894)))+(((npx)*(sj6)*(x894))))) != 0)?((IkReal)1/(((((cj6)*(npy)*(x894)))+(((npx)*(sj6)*(x894)))))):(IkReal)1.0e30))*(((((IkReal(-1.00000000000000))*(npy)*(x889)*(x891)))+(((IkReal(-1.00000000000000))*(x889)*(x890)*((npy)*(npy))))+(((cj6)*(npx)*(x889)*(x893)))+(((IkReal(-1.00000000000000))*(npy)*(sj6)*(x890)*(x892)))+(((x889)*(x890)*((npx)*(npx))))+(((IkReal(-1.00000000000000))*(sj6)*(x891)*(x892))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((IkReal(0.0243902439024390))*(((IKabs(sj3) != 0)?((IkReal)1/(sj3)):(IkReal)1.0e30))*(((((npy)*(x889)))+(((sj6)*(x892)))))))+IKsqr(((((IKabs(((((cj6)*(npy)*(x894)))+(((npx)*(sj6)*(x894))))) != 0)?((IkReal)1/(((((cj6)*(npy)*(x894)))+(((npx)*(sj6)*(x894)))))):(IkReal)1.0e30))*(((((IkReal(-1.00000000000000))*(npy)*(x889)*(x891)))+(((IkReal(-1.00000000000000))*(x889)*(x890)*((npy)*(npy))))+(((cj6)*(npx)*(x889)*(x893)))+(((IkReal(-1.00000000000000))*(npy)*(sj6)*(x890)*(x892)))+(((x889)*(x890)*((npx)*(npx))))+(((IkReal(-1.00000000000000))*(sj6)*(x891)*(x892)))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((IkReal(0.0243902439024390))*(((IKabs(sj3) != 0)?((IkReal)1/(sj3)):(IkReal)1.0e30))*(((((npy)*(x889)))+(((sj6)*(x892)))))), ((((IKabs(((((cj6)*(npy)*(x894)))+(((npx)*(sj6)*(x894))))) != 0)?((IkReal)1/(((((cj6)*(npy)*(x894)))+(((npx)*(sj6)*(x894)))))):(IkReal)1.0e30))*(((((IkReal(-1.00000000000000))*(npy)*(x889)*(x891)))+(((IkReal(-1.00000000000000))*(x889)*(x890)*((npy)*(npy))))+(((cj6)*(npx)*(x889)*(x893)))+(((IkReal(-1.00000000000000))*(npy)*(sj6)*(x890)*(x892)))+(((x889)*(x890)*((npx)*(npx))))+(((IkReal(-1.00000000000000))*(sj6)*(x891)*(x892)))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x895=IKcos(j4);
IkReal x896=IKsin(j4);
IkReal x897=((npy)*(sj6));
IkReal x898=((IkReal(1.00000000000000))*(npx));
IkReal x899=((IkReal(0.328000000000000))*(cj3));
IkReal x900=((IkReal(0.328000000000000))*(sj3));
IkReal x901=((cj6)*(x895));
IkReal x902=((IkReal(1.00000000000000))*(cj6)*(npy));
IkReal x903=((sj5)*(x895));
IkReal x904=((cj5)*(x896));
IkReal x905=((cj5)*(x895));
evalcond[0]=((((IkReal(-1.00000000000000))*(sj6)*(x898)))+(((IkReal(-1.00000000000000))*(x902)))+(((x896)*(x900))));
evalcond[1]=((((IkReal(-1.00000000000000))*(x900)*(x903)))+(((IkReal(-1.00000000000000))*(npz)))+(((IkReal(0.323000000000000))*(cj5)))+(((cj5)*(x899))));
evalcond[2]=((((IkReal(0.323000000000000))*(sj5)))+(((sj5)*(x899)))+(((x900)*(x905)))+(x897)+(((IkReal(-1.00000000000000))*(cj6)*(x898))));
evalcond[3]=((((npz)*(sj5)*(x896)))+(((npx)*(sj6)*(x895)))+(((x897)*(x904)))+(((IkReal(-1.00000000000000))*(cj6)*(x898)*(x904)))+(((npy)*(x901))));
evalcond[4]=((((IkReal(-1.00000000000000))*(x896)*(x902)))+(((IkReal(-1.00000000000000))*(cj5)*(x898)*(x901)))+(((IkReal(-1.00000000000000))*(sj6)*(x896)*(x898)))+(((x897)*(x905)))+(((npz)*(x903)))+(x900));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}
}
}

}

}
}
}
}
return solutions.GetNumSolutions()>0;
}
inline void rotationfunction0(IkSolutionListBase<IkReal>& solutions) {
for(int rotationiter = 0; rotationiter < 1; ++rotationiter) {
IkReal x110=((IkReal(1.00000000000000))*(sj6));
IkReal x111=((IkReal(1.00000000000000))*(sj5));
IkReal x112=((IkReal(1.00000000000000))*(sj3));
IkReal x113=((IkReal(1.00000000000000))*(cj3));
IkReal x114=((IkReal(1.00000000000000))*(cj6));
IkReal x115=((IkReal(1.00000000000000))*(sj4));
IkReal x116=((IkReal(-1.00000000000000))*(sj4));
IkReal x117=((IkReal(-1.00000000000000))*(sj5));
IkReal x118=((((IkReal(-1.00000000000000))*(r01)*(x110)))+(((cj6)*(r00))));
IkReal x119=((((IkReal(-1.00000000000000))*(r11)*(x110)))+(((cj6)*(r10))));
IkReal x120=((((IkReal(-1.00000000000000))*(r21)*(x110)))+(((cj6)*(r20))));
IkReal x121=((cj5)*(x118));
IkReal x122=((cj5)*(x119));
IkReal x123=((cj5)*(x120));
IkReal x124=((((IkReal(-1.00000000000000))*(r00)*(x110)))+(((IkReal(-1.00000000000000))*(r01)*(x114))));
IkReal x125=((((IkReal(-1.00000000000000))*(r11)*(x114)))+(((IkReal(-1.00000000000000))*(r10)*(x110))));
IkReal x126=((((IkReal(-1.00000000000000))*(r20)*(x110)))+(((IkReal(-1.00000000000000))*(r21)*(x114))));
IkReal x127=((((sj5)*(x118)))+(((cj5)*(r02))));
IkReal x128=((((cj5)*(r12)))+(((sj5)*(x119))));
IkReal x129=((((IkReal(-1.00000000000000))*(r12)*(x111)))+(x122));
IkReal x130=((x123)+(((IkReal(-1.00000000000000))*(r22)*(x111))));
IkReal x131=((((cj5)*(r22)))+(((sj5)*(x120))));
IkReal x132=((((x116)*(x124)))+(((cj4)*(((((r02)*(x117)))+(x121))))));
new_r00=((((cj3)*(x132)))+(((IkReal(-1.00000000000000))*(x112)*(x127))));
new_r01=((((cj4)*(x124)))+(((sj4)*(((x121)+(((IkReal(-1.00000000000000))*(r02)*(x111))))))));
new_r02=((((IkReal(-1.00000000000000))*(x113)*(x127)))+(((IkReal(-1.00000000000000))*(x112)*(x132))));
new_r10=((((IkReal(-1.00000000000000))*(x112)*(x128)))+(((cj3)*(((((cj4)*(((x122)+(((r12)*(x117)))))))+(((x116)*(x125))))))));
new_r11=((((sj4)*(x129)))+(((cj4)*(x125))));
new_r12=((((IkReal(-1.00000000000000))*(x113)*(x128)))+(((IkReal(-1.00000000000000))*(x112)*(((((IkReal(-1.00000000000000))*(x115)*(x125)))+(((cj4)*(x129))))))));
new_r20=((((IkReal(-1.00000000000000))*(x112)*(x131)))+(((cj3)*(((((cj4)*(((((r22)*(x117)))+(x123)))))+(((x116)*(x126))))))));
new_r21=((((sj4)*(x130)))+(((cj4)*(x126))));
new_r22=((((IkReal(-1.00000000000000))*(x113)*(x131)))+(((IkReal(-1.00000000000000))*(x112)*(((((IkReal(-1.00000000000000))*(x115)*(x126)))+(((cj4)*(x130))))))));
{
IkReal j1array[2], cj1array[2], sj1array[2];
bool j1valid[2]={false};
_nj1 = 2;
cj1array[0]=new_r22;
if( cj1array[0] >= -1-IKFAST_SINCOS_THRESH && cj1array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j1valid[0] = j1valid[1] = true;
    j1array[0] = IKacos(cj1array[0]);
    sj1array[0] = IKsin(j1array[0]);
    cj1array[1] = cj1array[0];
    j1array[1] = -j1array[0];
    sj1array[1] = -sj1array[0];
}
else if( isnan(cj1array[0]) )
{
    // probably any value will work
    j1valid[0] = true;
    cj1array[0] = 1; sj1array[0] = 0; j1array[0] = 0;
}
for(int ij1 = 0; ij1 < 2; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 2; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];

{
IkReal dummyeval[1];
IkReal gconst24;
gconst24=IKsign(sj1);
dummyeval[0]=sj1;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst22;
gconst22=IKsign((((new_r12)*(new_r12))+((new_r02)*(new_r02))));
dummyeval[0]=(((new_r12)*(new_r12))+((new_r02)*(new_r02)));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst23;
gconst23=IKsign(((((cj1)*((new_r12)*(new_r12))))+(((cj1)*((new_r02)*(new_r02))))));
dummyeval[0]=((((cj1)*((new_r12)*(new_r12))))+(((cj1)*((new_r02)*(new_r02)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[7];
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(1.57079632679490))+(j1)), IkReal(6.28318530717959))));
evalcond[1]=new_r22;
evalcond[2]=((IkReal(-1.00000000000000))*(new_r22));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  )
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
if( IKabs(new_r21) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(-1.00000000000000))*(new_r20))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(new_r21)+IKsqr(((IkReal(-1.00000000000000))*(new_r20)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(new_r21, ((IkReal(-1.00000000000000))*(new_r20)));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[2];
evalcond[0]=((IKcos(j2))+(new_r20));
evalcond[1]=((((IkReal(-1.00000000000000))*(IKsin(j2))))+(new_r21));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  )
{
continue;
}
}

{
IkReal dummyeval[1];
IkReal gconst30;
gconst30=IKsign(((((new_r01)*(new_r12)))+(((IkReal(-1.00000000000000))*(new_r02)*(new_r11)))));
dummyeval[0]=((((new_r01)*(new_r12)))+(((IkReal(-1.00000000000000))*(new_r02)*(new_r11))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst31;
gconst31=IKsign(((((new_r00)*(new_r12)))+(((IkReal(-1.00000000000000))*(new_r02)*(new_r10)))));
dummyeval[0]=((((new_r00)*(new_r12)))+(((IkReal(-1.00000000000000))*(new_r02)*(new_r10))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((gconst31)*(new_r00))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(-1.00000000000000))*(gconst31)*(new_r10))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j0array[0]=IKatan2(((gconst31)*(new_r00)), ((IkReal(-1.00000000000000))*(gconst31)*(new_r10)));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[6];
IkReal x133=IKcos(j0);
IkReal x134=IKsin(j0);
IkReal x135=((IkReal(1.00000000000000))*(x134));
evalcond[0]=((((new_r12)*(x133)))+(((IkReal(-1.00000000000000))*(new_r02)*(x135))));
evalcond[1]=((IkReal(-1.00000000000000))+(((new_r12)*(x134)))+(((new_r02)*(x133))));
evalcond[2]=((((IkReal(-1.00000000000000))*(sj2)))+(((IkReal(-1.00000000000000))*(new_r00)*(x135)))+(((new_r10)*(x133))));
evalcond[3]=((((IkReal(-1.00000000000000))*(new_r01)*(x135)))+(((IkReal(-1.00000000000000))*(cj2)))+(((new_r11)*(x133))));
evalcond[4]=((((new_r01)*(x133)))+(((new_r11)*(x134))));
evalcond[5]=((((new_r00)*(x133)))+(((new_r10)*(x134))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((gconst30)*(new_r01))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(-1.00000000000000))*(gconst30)*(new_r11))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j0array[0]=IKatan2(((gconst30)*(new_r01)), ((IkReal(-1.00000000000000))*(gconst30)*(new_r11)));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[6];
IkReal x136=IKcos(j0);
IkReal x137=IKsin(j0);
IkReal x138=((IkReal(1.00000000000000))*(x137));
evalcond[0]=((((new_r12)*(x136)))+(((IkReal(-1.00000000000000))*(new_r02)*(x138))));
evalcond[1]=((IkReal(-1.00000000000000))+(((new_r12)*(x137)))+(((new_r02)*(x136))));
evalcond[2]=((((IkReal(-1.00000000000000))*(sj2)))+(((IkReal(-1.00000000000000))*(new_r00)*(x138)))+(((new_r10)*(x136))));
evalcond[3]=((((IkReal(-1.00000000000000))*(new_r01)*(x138)))+(((IkReal(-1.00000000000000))*(cj2)))+(((new_r11)*(x136))));
evalcond[4]=((((new_r01)*(x136)))+(((new_r11)*(x137))));
evalcond[5]=((((new_r00)*(x136)))+(((new_r10)*(x137))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

} else
{
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(4.71238898038469))+(j1)), IkReal(6.28318530717959))));
evalcond[1]=new_r22;
evalcond[2]=new_r22;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  )
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
if( IKabs(((IkReal(-1.00000000000000))*(new_r21))) < IKFAST_ATAN2_MAGTHRESH && IKabs(new_r20) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((IkReal(-1.00000000000000))*(new_r21)))+IKsqr(new_r20)-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((IkReal(-1.00000000000000))*(new_r21)), new_r20);
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[2];
evalcond[0]=((new_r20)+(((IkReal(-1.00000000000000))*(IKcos(j2)))));
evalcond[1]=((IKsin(j2))+(new_r21));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  )
{
continue;
}
}

{
IkReal dummyeval[1];
IkReal gconst34;
gconst34=IKsign(((((IkReal(-1.00000000000000))*(new_r01)*(new_r12)))+(((new_r02)*(new_r11)))));
dummyeval[0]=((((IkReal(-1.00000000000000))*(new_r01)*(new_r12)))+(((new_r02)*(new_r11))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst35;
gconst35=IKsign(((((IkReal(-1.00000000000000))*(new_r00)*(new_r12)))+(((new_r02)*(new_r10)))));
dummyeval[0]=((((IkReal(-1.00000000000000))*(new_r00)*(new_r12)))+(((new_r02)*(new_r10))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((gconst35)*(new_r00))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(-1.00000000000000))*(gconst35)*(new_r10))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j0array[0]=IKatan2(((gconst35)*(new_r00)), ((IkReal(-1.00000000000000))*(gconst35)*(new_r10)));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[6];
IkReal x139=IKcos(j0);
IkReal x140=IKsin(j0);
IkReal x141=((IkReal(1.00000000000000))*(x140));
evalcond[0]=((((new_r12)*(x139)))+(((IkReal(-1.00000000000000))*(new_r02)*(x141))));
evalcond[1]=((IkReal(1.00000000000000))+(((new_r12)*(x140)))+(((new_r02)*(x139))));
evalcond[2]=((((IkReal(-1.00000000000000))*(sj2)))+(((new_r10)*(x139)))+(((IkReal(-1.00000000000000))*(new_r00)*(x141))));
evalcond[3]=((((IkReal(-1.00000000000000))*(new_r01)*(x141)))+(((IkReal(-1.00000000000000))*(cj2)))+(((new_r11)*(x139))));
evalcond[4]=((((new_r11)*(x140)))+(((new_r01)*(x139))));
evalcond[5]=((((new_r10)*(x140)))+(((new_r00)*(x139))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((gconst34)*(new_r01))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(-1.00000000000000))*(gconst34)*(new_r11))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j0array[0]=IKatan2(((gconst34)*(new_r01)), ((IkReal(-1.00000000000000))*(gconst34)*(new_r11)));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[6];
IkReal x142=IKcos(j0);
IkReal x143=IKsin(j0);
IkReal x144=((IkReal(1.00000000000000))*(x143));
evalcond[0]=((((new_r12)*(x142)))+(((IkReal(-1.00000000000000))*(new_r02)*(x144))));
evalcond[1]=((IkReal(1.00000000000000))+(((new_r12)*(x143)))+(((new_r02)*(x142))));
evalcond[2]=((((IkReal(-1.00000000000000))*(sj2)))+(((new_r10)*(x142)))+(((IkReal(-1.00000000000000))*(new_r00)*(x144))));
evalcond[3]=((((IkReal(-1.00000000000000))*(new_r01)*(x144)))+(((new_r11)*(x142)))+(((IkReal(-1.00000000000000))*(cj2))));
evalcond[4]=((((new_r01)*(x142)))+(((new_r11)*(x143))));
evalcond[5]=((((new_r00)*(x142)))+(((new_r10)*(x143))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

} else
{
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(j1)), IkReal(6.28318530717959))));
evalcond[1]=((IkReal(-1.00000000000000))+(new_r22));
evalcond[2]=new_r20;
evalcond[3]=new_r21;
evalcond[4]=((IkReal(-1.00000000000000))*(new_r20));
evalcond[5]=((IkReal(-1.00000000000000))*(new_r21));
evalcond[6]=((IkReal(1.00000000000000))+(((IkReal(-1.00000000000000))*(new_r22))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
{
IkReal j0array[2], cj0array[2], sj0array[2];
bool j0valid[2]={false};
_nj0 = 2;
if( IKabs(new_r02) < IKFAST_ATAN2_MAGTHRESH && IKabs(new_r12) < IKFAST_ATAN2_MAGTHRESH )
    continue;
IkReal x145=IKatan2(new_r02, new_r12);
j0array[0]=((IkReal(-1.00000000000000))*(x145));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
j0array[1]=((IkReal(3.14159265358979))+(((IkReal(-1.00000000000000))*(x145))));
sj0array[1]=IKsin(j0array[1]);
cj0array[1]=IKcos(j0array[1]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
if( j0array[1] > IKPI )
{
    j0array[1]-=IK2PI;
}
else if( j0array[1] < -IKPI )
{    j0array[1]+=IK2PI;
}
j0valid[1] = true;
for(int ij0 = 0; ij0 < 2; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 2; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[1];
evalcond[0]=((((IkReal(-1.00000000000000))*(new_r02)*(IKsin(j0))))+(((new_r12)*(IKcos(j0)))));
if( IKabs(evalcond[0]) > 0.000001  )
{
continue;
}
}

{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
if( IKabs(((((IkReal(-1.00000000000000))*(cj0)*(new_r01)))+(((IkReal(-1.00000000000000))*(new_r11)*(sj0))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((new_r10)*(sj0)))+(((cj0)*(new_r00))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((IkReal(-1.00000000000000))*(cj0)*(new_r01)))+(((IkReal(-1.00000000000000))*(new_r11)*(sj0)))))+IKsqr(((((new_r10)*(sj0)))+(((cj0)*(new_r00)))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((((IkReal(-1.00000000000000))*(cj0)*(new_r01)))+(((IkReal(-1.00000000000000))*(new_r11)*(sj0)))), ((((new_r10)*(sj0)))+(((cj0)*(new_r00)))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[4];
IkReal x146=IKsin(j2);
IkReal x147=((IkReal(1.00000000000000))*(sj0));
IkReal x148=((IkReal(1.00000000000000))*(IKcos(j2)));
evalcond[0]=((((IkReal(-1.00000000000000))*(x146)))+(((cj0)*(new_r10)))+(((IkReal(-1.00000000000000))*(new_r00)*(x147))));
evalcond[1]=((((IkReal(-1.00000000000000))*(new_r01)*(x147)))+(((IkReal(-1.00000000000000))*(x148)))+(((cj0)*(new_r11))));
evalcond[2]=((((new_r11)*(sj0)))+(x146)+(((cj0)*(new_r01))));
evalcond[3]=((((IkReal(-1.00000000000000))*(x148)))+(((new_r10)*(sj0)))+(((cj0)*(new_r00))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

} else
{
IkReal x149=((IkReal(1.00000000000000))+(new_r22));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(1.11022302462516e-16))+(j1)), IkReal(6.28318530717959))));
evalcond[1]=x149;
evalcond[2]=new_r20;
evalcond[3]=new_r21;
evalcond[4]=new_r20;
evalcond[5]=new_r21;
evalcond[6]=x149;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
{
IkReal j0array[2], cj0array[2], sj0array[2];
bool j0valid[2]={false};
_nj0 = 2;
if( IKabs(new_r02) < IKFAST_ATAN2_MAGTHRESH && IKabs(new_r12) < IKFAST_ATAN2_MAGTHRESH )
    continue;
IkReal x150=IKatan2(new_r02, new_r12);
j0array[0]=((IkReal(-1.00000000000000))*(x150));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
j0array[1]=((IkReal(3.14159265358979))+(((IkReal(-1.00000000000000))*(x150))));
sj0array[1]=IKsin(j0array[1]);
cj0array[1]=IKcos(j0array[1]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
if( j0array[1] > IKPI )
{
    j0array[1]-=IK2PI;
}
else if( j0array[1] < -IKPI )
{    j0array[1]+=IK2PI;
}
j0valid[1] = true;
for(int ij0 = 0; ij0 < 2; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 2; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[1];
evalcond[0]=((((IkReal(-1.00000000000000))*(new_r02)*(IKsin(j0))))+(((new_r12)*(IKcos(j0)))));
if( IKabs(evalcond[0]) > 0.000001  )
{
continue;
}
}

{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
if( IKabs(((((new_r11)*(sj0)))+(((cj0)*(new_r01))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((IkReal(-1.00000000000000))*(cj0)*(new_r00)))+(((IkReal(-1.00000000000000))*(new_r10)*(sj0))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((new_r11)*(sj0)))+(((cj0)*(new_r01)))))+IKsqr(((((IkReal(-1.00000000000000))*(cj0)*(new_r00)))+(((IkReal(-1.00000000000000))*(new_r10)*(sj0)))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((((new_r11)*(sj0)))+(((cj0)*(new_r01)))), ((((IkReal(-1.00000000000000))*(cj0)*(new_r00)))+(((IkReal(-1.00000000000000))*(new_r10)*(sj0)))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[4];
IkReal x151=IKcos(j2);
IkReal x152=((IkReal(1.00000000000000))*(sj0));
IkReal x153=((IkReal(1.00000000000000))*(IKsin(j2)));
evalcond[0]=((((IkReal(-1.00000000000000))*(x153)))+(((IkReal(-1.00000000000000))*(new_r00)*(x152)))+(((cj0)*(new_r10))));
evalcond[1]=((((IkReal(-1.00000000000000))*(x151)))+(((cj0)*(new_r11)))+(((IkReal(-1.00000000000000))*(new_r01)*(x152))));
evalcond[2]=((((IkReal(-1.00000000000000))*(x153)))+(((new_r11)*(sj0)))+(((cj0)*(new_r01))));
evalcond[3]=((((new_r10)*(sj0)))+(x151)+(((cj0)*(new_r00))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

} else
{
if( 1 )
{
continue;

} else
{
}
}
}
}
}
}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x154=((gconst23)*(new_r22)*(sj1));
if( IKabs(((new_r12)*(x154))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((new_r02)*(x154))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j0array[0]=IKatan2(((new_r12)*(x154)), ((new_r02)*(x154)));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[6];
IkReal x155=IKcos(j0);
IkReal x156=IKsin(j0);
IkReal x157=((IkReal(1.00000000000000))*(cj1));
IkReal x158=((IkReal(1.00000000000000))*(sj1));
IkReal x159=((new_r12)*(x156));
IkReal x160=((new_r02)*(x155));
evalcond[0]=((((new_r12)*(x155)))+(((IkReal(-1.00000000000000))*(new_r02)*(x156))));
evalcond[1]=((((IkReal(-1.00000000000000))*(x158)))+(x160)+(x159));
evalcond[2]=((((IkReal(-1.00000000000000))*(new_r22)*(x158)))+(((cj1)*(x160)))+(((cj1)*(x159))));
evalcond[3]=((((IkReal(-1.00000000000000))*(new_r20)*(x157)))+(((IkReal(-1.00000000000000))*(new_r10)*(x156)*(x158)))+(((IkReal(-1.00000000000000))*(new_r00)*(x155)*(x158))));
evalcond[4]=((((IkReal(-1.00000000000000))*(new_r01)*(x155)*(x158)))+(((IkReal(-1.00000000000000))*(new_r21)*(x157)))+(((IkReal(-1.00000000000000))*(new_r11)*(x156)*(x158))));
evalcond[5]=((IkReal(1.00000000000000))+(((IkReal(-1.00000000000000))*(x158)*(x160)))+(((IkReal(-1.00000000000000))*(x158)*(x159)))+(((IkReal(-1.00000000000000))*(new_r22)*(x157))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  )
{
continue;
}
}

{
IkReal dummyeval[1];
IkReal gconst25;
gconst25=IKsign(sj1);
dummyeval[0]=sj1;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=sj1;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=sj1;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[11];
IkReal x161=((((IkReal(-1.00000000000000))*(new_r02)*(sj0)))+(((cj0)*(new_r12))));
IkReal x162=((((new_r12)*(sj0)))+(((cj0)*(new_r02))));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(j1)), IkReal(6.28318530717959))));
evalcond[1]=((IkReal(-1.00000000000000))+(new_r22));
evalcond[2]=new_r20;
evalcond[3]=new_r21;
evalcond[4]=x161;
evalcond[5]=x161;
evalcond[6]=x162;
evalcond[7]=x162;
evalcond[8]=((IkReal(-1.00000000000000))*(new_r20));
evalcond[9]=((IkReal(-1.00000000000000))*(new_r21));
evalcond[10]=((IkReal(1.00000000000000))+(((IkReal(-1.00000000000000))*(new_r22))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  && IKabs(evalcond[10]) < 0.0000010000000000  )
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
if( IKabs(((((IkReal(-1.00000000000000))*(cj0)*(new_r01)))+(((IkReal(-1.00000000000000))*(new_r11)*(sj0))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((new_r10)*(sj0)))+(((cj0)*(new_r00))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((IkReal(-1.00000000000000))*(cj0)*(new_r01)))+(((IkReal(-1.00000000000000))*(new_r11)*(sj0)))))+IKsqr(((((new_r10)*(sj0)))+(((cj0)*(new_r00)))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((((IkReal(-1.00000000000000))*(cj0)*(new_r01)))+(((IkReal(-1.00000000000000))*(new_r11)*(sj0)))), ((((new_r10)*(sj0)))+(((cj0)*(new_r00)))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[4];
IkReal x163=IKsin(j2);
IkReal x164=((IkReal(1.00000000000000))*(sj0));
IkReal x165=((IkReal(1.00000000000000))*(IKcos(j2)));
evalcond[0]=((((IkReal(-1.00000000000000))*(new_r00)*(x164)))+(((IkReal(-1.00000000000000))*(x163)))+(((cj0)*(new_r10))));
evalcond[1]=((((IkReal(-1.00000000000000))*(x165)))+(((cj0)*(new_r11)))+(((IkReal(-1.00000000000000))*(new_r01)*(x164))));
evalcond[2]=((((new_r11)*(sj0)))+(x163)+(((cj0)*(new_r01))));
evalcond[3]=((((IkReal(-1.00000000000000))*(x165)))+(((new_r10)*(sj0)))+(((cj0)*(new_r00))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
IkReal x166=((IkReal(1.00000000000000))+(new_r22));
IkReal x167=((new_r12)*(sj0));
IkReal x168=((cj0)*(new_r02));
IkReal x169=((((IkReal(-1.00000000000000))*(new_r02)*(sj0)))+(((cj0)*(new_r12))));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(1.11022302462516e-16))+(j1)), IkReal(6.28318530717959))));
evalcond[1]=x166;
evalcond[2]=new_r20;
evalcond[3]=new_r21;
evalcond[4]=x169;
evalcond[5]=x169;
evalcond[6]=((x168)+(x167));
evalcond[7]=((((IkReal(-1.00000000000000))*(x167)))+(((IkReal(-1.00000000000000))*(x168))));
evalcond[8]=new_r20;
evalcond[9]=new_r21;
evalcond[10]=x166;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  && IKabs(evalcond[10]) < 0.0000010000000000  )
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
if( IKabs(((((new_r11)*(sj0)))+(((cj0)*(new_r01))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((IkReal(-1.00000000000000))*(cj0)*(new_r00)))+(((IkReal(-1.00000000000000))*(new_r10)*(sj0))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((new_r11)*(sj0)))+(((cj0)*(new_r01)))))+IKsqr(((((IkReal(-1.00000000000000))*(cj0)*(new_r00)))+(((IkReal(-1.00000000000000))*(new_r10)*(sj0)))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((((new_r11)*(sj0)))+(((cj0)*(new_r01)))), ((((IkReal(-1.00000000000000))*(cj0)*(new_r00)))+(((IkReal(-1.00000000000000))*(new_r10)*(sj0)))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[4];
IkReal x170=IKcos(j2);
IkReal x171=((IkReal(1.00000000000000))*(sj0));
IkReal x172=((IkReal(1.00000000000000))*(IKsin(j2)));
evalcond[0]=((((IkReal(-1.00000000000000))*(x172)))+(((cj0)*(new_r10)))+(((IkReal(-1.00000000000000))*(new_r00)*(x171))));
evalcond[1]=((((IkReal(-1.00000000000000))*(x170)))+(((IkReal(-1.00000000000000))*(new_r01)*(x171)))+(((cj0)*(new_r11))));
evalcond[2]=((((IkReal(-1.00000000000000))*(x172)))+(((new_r11)*(sj0)))+(((cj0)*(new_r01))));
evalcond[3]=((((new_r10)*(sj0)))+(x170)+(((cj0)*(new_r00))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
if( 1 )
{
continue;

} else
{
}
}
}
}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
if( IKabs(((((IkReal(-1.00000000000000))*(new_r00)*(sj0)))+(((cj0)*(new_r10))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(-1.00000000000000))*(new_r20)*(((IKabs(sj1) != 0)?((IkReal)1/(sj1)):(IkReal)1.0e30)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((IkReal(-1.00000000000000))*(new_r00)*(sj0)))+(((cj0)*(new_r10)))))+IKsqr(((IkReal(-1.00000000000000))*(new_r20)*(((IKabs(sj1) != 0)?((IkReal)1/(sj1)):(IkReal)1.0e30))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((((IkReal(-1.00000000000000))*(new_r00)*(sj0)))+(((cj0)*(new_r10)))), ((IkReal(-1.00000000000000))*(new_r20)*(((IKabs(sj1) != 0)?((IkReal)1/(sj1)):(IkReal)1.0e30))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[8];
IkReal x173=IKsin(j2);
IkReal x174=IKcos(j2);
IkReal x175=((IkReal(1.00000000000000))*(sj0));
IkReal x176=((IkReal(1.00000000000000))*(sj1));
IkReal x177=((cj0)*(new_r01));
IkReal x178=((cj0)*(new_r00));
IkReal x179=((new_r11)*(sj0));
IkReal x180=((new_r10)*(sj0));
IkReal x181=((IkReal(1.00000000000000))*(x174));
evalcond[0]=((((sj1)*(x174)))+(new_r20));
evalcond[1]=((new_r21)+(((IkReal(-1.00000000000000))*(x173)*(x176))));
evalcond[2]=((((IkReal(-1.00000000000000))*(x173)))+(((cj0)*(new_r10)))+(((IkReal(-1.00000000000000))*(new_r00)*(x175))));
evalcond[3]=((((IkReal(-1.00000000000000))*(x181)))+(((IkReal(-1.00000000000000))*(new_r01)*(x175)))+(((cj0)*(new_r11))));
evalcond[4]=((x179)+(x177)+(((cj1)*(x173))));
evalcond[5]=((x178)+(x180)+(((IkReal(-1.00000000000000))*(cj1)*(x181))));
evalcond[6]=((((IkReal(-1.00000000000000))*(new_r21)*(x176)))+(x173)+(((cj1)*(x177)))+(((cj1)*(x179))));
evalcond[7]=((((IkReal(-1.00000000000000))*(new_r20)*(x176)))+(((IkReal(-1.00000000000000))*(x181)))+(((cj1)*(x180)))+(((cj1)*(x178))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  || IKabs(evalcond[6]) > 0.000001  || IKabs(evalcond[7]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
if( IKabs(((new_r21)*(((IKabs(sj1) != 0)?((IkReal)1/(sj1)):(IkReal)1.0e30)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((IkReal(-1.00000000000000))*(new_r01)*(sj0)))+(((cj0)*(new_r11))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((new_r21)*(((IKabs(sj1) != 0)?((IkReal)1/(sj1)):(IkReal)1.0e30))))+IKsqr(((((IkReal(-1.00000000000000))*(new_r01)*(sj0)))+(((cj0)*(new_r11)))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((new_r21)*(((IKabs(sj1) != 0)?((IkReal)1/(sj1)):(IkReal)1.0e30))), ((((IkReal(-1.00000000000000))*(new_r01)*(sj0)))+(((cj0)*(new_r11)))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[8];
IkReal x182=IKsin(j2);
IkReal x183=IKcos(j2);
IkReal x184=((IkReal(1.00000000000000))*(sj0));
IkReal x185=((IkReal(1.00000000000000))*(sj1));
IkReal x186=((cj0)*(new_r01));
IkReal x187=((cj0)*(new_r00));
IkReal x188=((new_r11)*(sj0));
IkReal x189=((new_r10)*(sj0));
IkReal x190=((IkReal(1.00000000000000))*(x183));
evalcond[0]=((((sj1)*(x183)))+(new_r20));
evalcond[1]=((new_r21)+(((IkReal(-1.00000000000000))*(x182)*(x185))));
evalcond[2]=((((IkReal(-1.00000000000000))*(x182)))+(((cj0)*(new_r10)))+(((IkReal(-1.00000000000000))*(new_r00)*(x184))));
evalcond[3]=((((IkReal(-1.00000000000000))*(x190)))+(((IkReal(-1.00000000000000))*(new_r01)*(x184)))+(((cj0)*(new_r11))));
evalcond[4]=((x186)+(x188)+(((cj1)*(x182))));
evalcond[5]=((x187)+(x189)+(((IkReal(-1.00000000000000))*(cj1)*(x190))));
evalcond[6]=((((IkReal(-1.00000000000000))*(new_r21)*(x185)))+(x182)+(((cj1)*(x186)))+(((cj1)*(x188))));
evalcond[7]=((((IkReal(-1.00000000000000))*(x190)))+(((IkReal(-1.00000000000000))*(new_r20)*(x185)))+(((cj1)*(x187)))+(((cj1)*(x189))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  || IKabs(evalcond[6]) > 0.000001  || IKabs(evalcond[7]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
if( IKabs(((gconst25)*(new_r21))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(-1.00000000000000))*(gconst25)*(new_r20))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j2array[0]=IKatan2(((gconst25)*(new_r21)), ((IkReal(-1.00000000000000))*(gconst25)*(new_r20)));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[8];
IkReal x191=IKsin(j2);
IkReal x192=IKcos(j2);
IkReal x193=((IkReal(1.00000000000000))*(sj0));
IkReal x194=((IkReal(1.00000000000000))*(sj1));
IkReal x195=((cj0)*(new_r01));
IkReal x196=((cj0)*(new_r00));
IkReal x197=((new_r11)*(sj0));
IkReal x198=((new_r10)*(sj0));
IkReal x199=((IkReal(1.00000000000000))*(x192));
evalcond[0]=((((sj1)*(x192)))+(new_r20));
evalcond[1]=((((IkReal(-1.00000000000000))*(x191)*(x194)))+(new_r21));
evalcond[2]=((((IkReal(-1.00000000000000))*(x191)))+(((IkReal(-1.00000000000000))*(new_r00)*(x193)))+(((cj0)*(new_r10))));
evalcond[3]=((((IkReal(-1.00000000000000))*(x199)))+(((IkReal(-1.00000000000000))*(new_r01)*(x193)))+(((cj0)*(new_r11))));
evalcond[4]=((x197)+(x195)+(((cj1)*(x191))));
evalcond[5]=((x198)+(x196)+(((IkReal(-1.00000000000000))*(cj1)*(x199))));
evalcond[6]=((((IkReal(-1.00000000000000))*(new_r21)*(x194)))+(x191)+(((cj1)*(x195)))+(((cj1)*(x197))));
evalcond[7]=((((IkReal(-1.00000000000000))*(x199)))+(((IkReal(-1.00000000000000))*(new_r20)*(x194)))+(((cj1)*(x198)))+(((cj1)*(x196))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  || IKabs(evalcond[6]) > 0.000001  || IKabs(evalcond[7]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x200=((gconst22)*(sj1));
if( IKabs(((new_r12)*(x200))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((new_r02)*(x200))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j0array[0]=IKatan2(((new_r12)*(x200)), ((new_r02)*(x200)));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[6];
IkReal x201=IKcos(j0);
IkReal x202=IKsin(j0);
IkReal x203=((IkReal(1.00000000000000))*(cj1));
IkReal x204=((IkReal(1.00000000000000))*(sj1));
IkReal x205=((new_r12)*(x202));
IkReal x206=((new_r02)*(x201));
evalcond[0]=((((IkReal(-1.00000000000000))*(new_r02)*(x202)))+(((new_r12)*(x201))));
evalcond[1]=((((IkReal(-1.00000000000000))*(x204)))+(x206)+(x205));
evalcond[2]=((((IkReal(-1.00000000000000))*(new_r22)*(x204)))+(((cj1)*(x206)))+(((cj1)*(x205))));
evalcond[3]=((((IkReal(-1.00000000000000))*(new_r20)*(x203)))+(((IkReal(-1.00000000000000))*(new_r10)*(x202)*(x204)))+(((IkReal(-1.00000000000000))*(new_r00)*(x201)*(x204))));
evalcond[4]=((((IkReal(-1.00000000000000))*(new_r21)*(x203)))+(((IkReal(-1.00000000000000))*(new_r01)*(x201)*(x204)))+(((IkReal(-1.00000000000000))*(new_r11)*(x202)*(x204))));
evalcond[5]=((IkReal(1.00000000000000))+(((IkReal(-1.00000000000000))*(new_r22)*(x203)))+(((IkReal(-1.00000000000000))*(x204)*(x206)))+(((IkReal(-1.00000000000000))*(x204)*(x205))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  )
{
continue;
}
}

{
IkReal dummyeval[1];
IkReal gconst25;
gconst25=IKsign(sj1);
dummyeval[0]=sj1;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=sj1;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=sj1;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[11];
IkReal x207=((((IkReal(-1.00000000000000))*(new_r02)*(sj0)))+(((cj0)*(new_r12))));
IkReal x208=((((new_r12)*(sj0)))+(((cj0)*(new_r02))));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(j1)), IkReal(6.28318530717959))));
evalcond[1]=((IkReal(-1.00000000000000))+(new_r22));
evalcond[2]=new_r20;
evalcond[3]=new_r21;
evalcond[4]=x207;
evalcond[5]=x207;
evalcond[6]=x208;
evalcond[7]=x208;
evalcond[8]=((IkReal(-1.00000000000000))*(new_r20));
evalcond[9]=((IkReal(-1.00000000000000))*(new_r21));
evalcond[10]=((IkReal(1.00000000000000))+(((IkReal(-1.00000000000000))*(new_r22))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  && IKabs(evalcond[10]) < 0.0000010000000000  )
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
if( IKabs(((((IkReal(-1.00000000000000))*(cj0)*(new_r01)))+(((IkReal(-1.00000000000000))*(new_r11)*(sj0))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((new_r10)*(sj0)))+(((cj0)*(new_r00))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((IkReal(-1.00000000000000))*(cj0)*(new_r01)))+(((IkReal(-1.00000000000000))*(new_r11)*(sj0)))))+IKsqr(((((new_r10)*(sj0)))+(((cj0)*(new_r00)))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((((IkReal(-1.00000000000000))*(cj0)*(new_r01)))+(((IkReal(-1.00000000000000))*(new_r11)*(sj0)))), ((((new_r10)*(sj0)))+(((cj0)*(new_r00)))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[4];
IkReal x209=IKsin(j2);
IkReal x210=((IkReal(1.00000000000000))*(sj0));
IkReal x211=((IkReal(1.00000000000000))*(IKcos(j2)));
evalcond[0]=((((IkReal(-1.00000000000000))*(new_r00)*(x210)))+(((cj0)*(new_r10)))+(((IkReal(-1.00000000000000))*(x209))));
evalcond[1]=((((IkReal(-1.00000000000000))*(new_r01)*(x210)))+(((IkReal(-1.00000000000000))*(x211)))+(((cj0)*(new_r11))));
evalcond[2]=((((new_r11)*(sj0)))+(x209)+(((cj0)*(new_r01))));
evalcond[3]=((((new_r10)*(sj0)))+(((cj0)*(new_r00)))+(((IkReal(-1.00000000000000))*(x211))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
IkReal x212=((IkReal(1.00000000000000))+(new_r22));
IkReal x213=((new_r12)*(sj0));
IkReal x214=((cj0)*(new_r02));
IkReal x215=((((IkReal(-1.00000000000000))*(new_r02)*(sj0)))+(((cj0)*(new_r12))));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(1.11022302462516e-16))+(j1)), IkReal(6.28318530717959))));
evalcond[1]=x212;
evalcond[2]=new_r20;
evalcond[3]=new_r21;
evalcond[4]=x215;
evalcond[5]=x215;
evalcond[6]=((x213)+(x214));
evalcond[7]=((((IkReal(-1.00000000000000))*(x213)))+(((IkReal(-1.00000000000000))*(x214))));
evalcond[8]=new_r20;
evalcond[9]=new_r21;
evalcond[10]=x212;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  && IKabs(evalcond[10]) < 0.0000010000000000  )
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
if( IKabs(((((new_r11)*(sj0)))+(((cj0)*(new_r01))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((IkReal(-1.00000000000000))*(cj0)*(new_r00)))+(((IkReal(-1.00000000000000))*(new_r10)*(sj0))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((new_r11)*(sj0)))+(((cj0)*(new_r01)))))+IKsqr(((((IkReal(-1.00000000000000))*(cj0)*(new_r00)))+(((IkReal(-1.00000000000000))*(new_r10)*(sj0)))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((((new_r11)*(sj0)))+(((cj0)*(new_r01)))), ((((IkReal(-1.00000000000000))*(cj0)*(new_r00)))+(((IkReal(-1.00000000000000))*(new_r10)*(sj0)))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[4];
IkReal x216=IKcos(j2);
IkReal x217=((IkReal(1.00000000000000))*(sj0));
IkReal x218=((IkReal(1.00000000000000))*(IKsin(j2)));
evalcond[0]=((((IkReal(-1.00000000000000))*(x218)))+(((IkReal(-1.00000000000000))*(new_r00)*(x217)))+(((cj0)*(new_r10))));
evalcond[1]=((((IkReal(-1.00000000000000))*(x216)))+(((IkReal(-1.00000000000000))*(new_r01)*(x217)))+(((cj0)*(new_r11))));
evalcond[2]=((((new_r11)*(sj0)))+(((cj0)*(new_r01)))+(((IkReal(-1.00000000000000))*(x218))));
evalcond[3]=((((new_r10)*(sj0)))+(x216)+(((cj0)*(new_r00))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
if( 1 )
{
continue;

} else
{
}
}
}
}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
if( IKabs(((((IkReal(-1.00000000000000))*(new_r00)*(sj0)))+(((cj0)*(new_r10))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(-1.00000000000000))*(new_r20)*(((IKabs(sj1) != 0)?((IkReal)1/(sj1)):(IkReal)1.0e30)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((IkReal(-1.00000000000000))*(new_r00)*(sj0)))+(((cj0)*(new_r10)))))+IKsqr(((IkReal(-1.00000000000000))*(new_r20)*(((IKabs(sj1) != 0)?((IkReal)1/(sj1)):(IkReal)1.0e30))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((((IkReal(-1.00000000000000))*(new_r00)*(sj0)))+(((cj0)*(new_r10)))), ((IkReal(-1.00000000000000))*(new_r20)*(((IKabs(sj1) != 0)?((IkReal)1/(sj1)):(IkReal)1.0e30))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[8];
IkReal x219=IKsin(j2);
IkReal x220=IKcos(j2);
IkReal x221=((IkReal(1.00000000000000))*(sj0));
IkReal x222=((IkReal(1.00000000000000))*(sj1));
IkReal x223=((cj0)*(new_r01));
IkReal x224=((cj0)*(new_r00));
IkReal x225=((new_r11)*(sj0));
IkReal x226=((new_r10)*(sj0));
IkReal x227=((IkReal(1.00000000000000))*(x220));
evalcond[0]=((((sj1)*(x220)))+(new_r20));
evalcond[1]=((((IkReal(-1.00000000000000))*(x219)*(x222)))+(new_r21));
evalcond[2]=((((IkReal(-1.00000000000000))*(x219)))+(((cj0)*(new_r10)))+(((IkReal(-1.00000000000000))*(new_r00)*(x221))));
evalcond[3]=((((IkReal(-1.00000000000000))*(new_r01)*(x221)))+(((cj0)*(new_r11)))+(((IkReal(-1.00000000000000))*(x227))));
evalcond[4]=((x223)+(x225)+(((cj1)*(x219))));
evalcond[5]=((x224)+(x226)+(((IkReal(-1.00000000000000))*(cj1)*(x227))));
evalcond[6]=((((cj1)*(x225)))+(((cj1)*(x223)))+(x219)+(((IkReal(-1.00000000000000))*(new_r21)*(x222))));
evalcond[7]=((((cj1)*(x226)))+(((cj1)*(x224)))+(((IkReal(-1.00000000000000))*(new_r20)*(x222)))+(((IkReal(-1.00000000000000))*(x227))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  || IKabs(evalcond[6]) > 0.000001  || IKabs(evalcond[7]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
if( IKabs(((new_r21)*(((IKabs(sj1) != 0)?((IkReal)1/(sj1)):(IkReal)1.0e30)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((IkReal(-1.00000000000000))*(new_r01)*(sj0)))+(((cj0)*(new_r11))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((new_r21)*(((IKabs(sj1) != 0)?((IkReal)1/(sj1)):(IkReal)1.0e30))))+IKsqr(((((IkReal(-1.00000000000000))*(new_r01)*(sj0)))+(((cj0)*(new_r11)))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((new_r21)*(((IKabs(sj1) != 0)?((IkReal)1/(sj1)):(IkReal)1.0e30))), ((((IkReal(-1.00000000000000))*(new_r01)*(sj0)))+(((cj0)*(new_r11)))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[8];
IkReal x228=IKsin(j2);
IkReal x229=IKcos(j2);
IkReal x230=((IkReal(1.00000000000000))*(sj0));
IkReal x231=((IkReal(1.00000000000000))*(sj1));
IkReal x232=((cj0)*(new_r01));
IkReal x233=((cj0)*(new_r00));
IkReal x234=((new_r11)*(sj0));
IkReal x235=((new_r10)*(sj0));
IkReal x236=((IkReal(1.00000000000000))*(x229));
evalcond[0]=((((sj1)*(x229)))+(new_r20));
evalcond[1]=((new_r21)+(((IkReal(-1.00000000000000))*(x228)*(x231))));
evalcond[2]=((((cj0)*(new_r10)))+(((IkReal(-1.00000000000000))*(new_r00)*(x230)))+(((IkReal(-1.00000000000000))*(x228))));
evalcond[3]=((((IkReal(-1.00000000000000))*(x236)))+(((IkReal(-1.00000000000000))*(new_r01)*(x230)))+(((cj0)*(new_r11))));
evalcond[4]=((((cj1)*(x228)))+(x232)+(x234));
evalcond[5]=((x233)+(x235)+(((IkReal(-1.00000000000000))*(cj1)*(x236))));
evalcond[6]=((((cj1)*(x232)))+(((cj1)*(x234)))+(((IkReal(-1.00000000000000))*(new_r21)*(x231)))+(x228));
evalcond[7]=((((cj1)*(x233)))+(((cj1)*(x235)))+(((IkReal(-1.00000000000000))*(new_r20)*(x231)))+(((IkReal(-1.00000000000000))*(x236))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  || IKabs(evalcond[6]) > 0.000001  || IKabs(evalcond[7]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
if( IKabs(((gconst25)*(new_r21))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(-1.00000000000000))*(gconst25)*(new_r20))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j2array[0]=IKatan2(((gconst25)*(new_r21)), ((IkReal(-1.00000000000000))*(gconst25)*(new_r20)));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[8];
IkReal x237=IKsin(j2);
IkReal x238=IKcos(j2);
IkReal x239=((IkReal(1.00000000000000))*(sj0));
IkReal x240=((IkReal(1.00000000000000))*(sj1));
IkReal x241=((cj0)*(new_r01));
IkReal x242=((cj0)*(new_r00));
IkReal x243=((new_r11)*(sj0));
IkReal x244=((new_r10)*(sj0));
IkReal x245=((IkReal(1.00000000000000))*(x238));
evalcond[0]=((((sj1)*(x238)))+(new_r20));
evalcond[1]=((((IkReal(-1.00000000000000))*(x237)*(x240)))+(new_r21));
evalcond[2]=((((IkReal(-1.00000000000000))*(x237)))+(((cj0)*(new_r10)))+(((IkReal(-1.00000000000000))*(new_r00)*(x239))));
evalcond[3]=((((IkReal(-1.00000000000000))*(x245)))+(((IkReal(-1.00000000000000))*(new_r01)*(x239)))+(((cj0)*(new_r11))));
evalcond[4]=((((cj1)*(x237)))+(x243)+(x241));
evalcond[5]=((((IkReal(-1.00000000000000))*(cj1)*(x245)))+(x242)+(x244));
evalcond[6]=((((IkReal(-1.00000000000000))*(new_r21)*(x240)))+(((cj1)*(x241)))+(((cj1)*(x243)))+(x237));
evalcond[7]=((((cj1)*(x242)))+(((cj1)*(x244)))+(((IkReal(-1.00000000000000))*(new_r20)*(x240)))+(((IkReal(-1.00000000000000))*(x245))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  || IKabs(evalcond[6]) > 0.000001  || IKabs(evalcond[7]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
if( IKabs(((gconst24)*(new_r21))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(-1.00000000000000))*(gconst24)*(new_r20))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j2array[0]=IKatan2(((gconst24)*(new_r21)), ((IkReal(-1.00000000000000))*(gconst24)*(new_r20)));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[2];
evalcond[0]=((((sj1)*(IKcos(j2))))+(new_r20));
evalcond[1]=((((IkReal(-1.00000000000000))*(sj1)*(IKsin(j2))))+(new_r21));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  )
{
continue;
}
}

{
IkReal dummyeval[1];
IkReal gconst26;
gconst26=IKsign((((new_r12)*(new_r12))+((new_r02)*(new_r02))));
dummyeval[0]=(((new_r12)*(new_r12))+((new_r02)*(new_r02)));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst27;
gconst27=IKsign(((((IkReal(-1.00000000000000))*(new_r11)*(new_r12)))+(((IkReal(-1.00000000000000))*(new_r01)*(new_r02)))));
dummyeval[0]=((((IkReal(-1.00000000000000))*(new_r11)*(new_r12)))+(((IkReal(-1.00000000000000))*(new_r01)*(new_r02))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x246=((cj1)*(gconst27)*(sj2));
if( IKabs(((new_r12)*(x246))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((new_r02)*(x246))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j0array[0]=IKatan2(((new_r12)*(x246)), ((new_r02)*(x246)));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[12];
IkReal x247=IKcos(j0);
IkReal x248=IKsin(j0);
IkReal x249=((IkReal(1.00000000000000))*(cj2));
IkReal x250=((IkReal(1.00000000000000))*(sj1));
IkReal x251=((IkReal(1.00000000000000))*(cj1));
IkReal x252=((new_r10)*(x248));
IkReal x253=((new_r01)*(x247));
IkReal x254=((new_r00)*(x247));
IkReal x255=((IkReal(1.00000000000000))*(x248));
IkReal x256=((new_r11)*(x248));
IkReal x257=((new_r12)*(x248));
IkReal x258=((new_r02)*(x247));
evalcond[0]=((((new_r12)*(x247)))+(((IkReal(-1.00000000000000))*(new_r02)*(x255))));
evalcond[1]=((x258)+(x257)+(((IkReal(-1.00000000000000))*(x250))));
evalcond[2]=((((IkReal(-1.00000000000000))*(sj2)))+(((IkReal(-1.00000000000000))*(new_r00)*(x255)))+(((new_r10)*(x247))));
evalcond[3]=((((IkReal(-1.00000000000000))*(new_r01)*(x255)))+(((IkReal(-1.00000000000000))*(x249)))+(((new_r11)*(x247))));
evalcond[4]=((((cj1)*(sj2)))+(x256)+(x253));
evalcond[5]=((((IkReal(-1.00000000000000))*(cj1)*(x249)))+(x254)+(x252));
evalcond[6]=((((cj1)*(x258)))+(((cj1)*(x257)))+(((IkReal(-1.00000000000000))*(new_r22)*(x250))));
evalcond[7]=((((IkReal(-1.00000000000000))*(x250)*(x254)))+(((IkReal(-1.00000000000000))*(x250)*(x252)))+(((IkReal(-1.00000000000000))*(new_r20)*(x251))));
evalcond[8]=((((IkReal(-1.00000000000000))*(new_r21)*(x251)))+(((IkReal(-1.00000000000000))*(x250)*(x256)))+(((IkReal(-1.00000000000000))*(x250)*(x253))));
evalcond[9]=((((IkReal(-1.00000000000000))*(new_r21)*(x250)))+(sj2)+(((cj1)*(x256)))+(((cj1)*(x253))));
evalcond[10]=((IkReal(1.00000000000000))+(((IkReal(-1.00000000000000))*(x250)*(x257)))+(((IkReal(-1.00000000000000))*(x250)*(x258)))+(((IkReal(-1.00000000000000))*(new_r22)*(x251))));
evalcond[11]=((((cj1)*(x254)))+(((cj1)*(x252)))+(((IkReal(-1.00000000000000))*(x249)))+(((IkReal(-1.00000000000000))*(new_r20)*(x250))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  || IKabs(evalcond[6]) > 0.000001  || IKabs(evalcond[7]) > 0.000001  || IKabs(evalcond[8]) > 0.000001  || IKabs(evalcond[9]) > 0.000001  || IKabs(evalcond[10]) > 0.000001  || IKabs(evalcond[11]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x259=((gconst26)*(sj1));
if( IKabs(((new_r12)*(x259))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((new_r02)*(x259))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j0array[0]=IKatan2(((new_r12)*(x259)), ((new_r02)*(x259)));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[12];
IkReal x260=IKcos(j0);
IkReal x261=IKsin(j0);
IkReal x262=((IkReal(1.00000000000000))*(cj2));
IkReal x263=((IkReal(1.00000000000000))*(sj1));
IkReal x264=((IkReal(1.00000000000000))*(cj1));
IkReal x265=((new_r10)*(x261));
IkReal x266=((new_r01)*(x260));
IkReal x267=((new_r00)*(x260));
IkReal x268=((IkReal(1.00000000000000))*(x261));
IkReal x269=((new_r11)*(x261));
IkReal x270=((new_r12)*(x261));
IkReal x271=((new_r02)*(x260));
evalcond[0]=((((new_r12)*(x260)))+(((IkReal(-1.00000000000000))*(new_r02)*(x268))));
evalcond[1]=((x270)+(x271)+(((IkReal(-1.00000000000000))*(x263))));
evalcond[2]=((((IkReal(-1.00000000000000))*(sj2)))+(((IkReal(-1.00000000000000))*(new_r00)*(x268)))+(((new_r10)*(x260))));
evalcond[3]=((((IkReal(-1.00000000000000))*(new_r01)*(x268)))+(((IkReal(-1.00000000000000))*(x262)))+(((new_r11)*(x260))));
evalcond[4]=((((cj1)*(sj2)))+(x266)+(x269));
evalcond[5]=((((IkReal(-1.00000000000000))*(cj1)*(x262)))+(x265)+(x267));
evalcond[6]=((((IkReal(-1.00000000000000))*(new_r22)*(x263)))+(((cj1)*(x271)))+(((cj1)*(x270))));
evalcond[7]=((((IkReal(-1.00000000000000))*(x263)*(x265)))+(((IkReal(-1.00000000000000))*(x263)*(x267)))+(((IkReal(-1.00000000000000))*(new_r20)*(x264))));
evalcond[8]=((((IkReal(-1.00000000000000))*(x263)*(x269)))+(((IkReal(-1.00000000000000))*(x263)*(x266)))+(((IkReal(-1.00000000000000))*(new_r21)*(x264))));
evalcond[9]=((sj2)+(((cj1)*(x266)))+(((cj1)*(x269)))+(((IkReal(-1.00000000000000))*(new_r21)*(x263))));
evalcond[10]=((IkReal(1.00000000000000))+(((IkReal(-1.00000000000000))*(x263)*(x270)))+(((IkReal(-1.00000000000000))*(x263)*(x271)))+(((IkReal(-1.00000000000000))*(new_r22)*(x264))));
evalcond[11]=((((cj1)*(x265)))+(((cj1)*(x267)))+(((IkReal(-1.00000000000000))*(new_r20)*(x263)))+(((IkReal(-1.00000000000000))*(x262))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  || IKabs(evalcond[6]) > 0.000001  || IKabs(evalcond[7]) > 0.000001  || IKabs(evalcond[8]) > 0.000001  || IKabs(evalcond[9]) > 0.000001  || IKabs(evalcond[10]) > 0.000001  || IKabs(evalcond[11]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}
}
}
}
}static inline void polyroots6(IkReal rawcoeffs[6+1], IkReal rawroots[6], int& numroots)
{
    using std::complex;
    IKFAST_ASSERT(rawcoeffs[0] != 0);
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    const IkReal tolsqrt = sqrt(std::numeric_limits<IkReal>::epsilon());
    complex<IkReal> coeffs[6];
    const int maxsteps = 110;
    for(int i = 0; i < 6; ++i) {
        coeffs[i] = complex<IkReal>(rawcoeffs[i+1]/rawcoeffs[0]);
    }
    complex<IkReal> roots[6];
    IkReal err[6];
    roots[0] = complex<IkReal>(1,0);
    roots[1] = complex<IkReal>(0.4,0.9); // any complex number not a root of unity works
    err[0] = 1.0;
    err[1] = 1.0;
    for(int i = 2; i < 6; ++i) {
        roots[i] = roots[i-1]*roots[1];
        err[i] = 1.0;
    }
    for(int step = 0; step < maxsteps; ++step) {
        bool changed = false;
        for(int i = 0; i < 6; ++i) {
            if ( err[i] >= tol ) {
                changed = true;
                // evaluate
                complex<IkReal> x = roots[i] + coeffs[0];
                for(int j = 1; j < 6; ++j) {
                    x = roots[i] * x + coeffs[j];
                }
                for(int j = 0; j < 6; ++j) {
                    if( i != j ) {
                        if( roots[i] != roots[j] ) {
                            x /= (roots[i] - roots[j]);
                        }
                    }
                }
                roots[i] -= x;
                err[i] = abs(x);
            }
        }
        if( !changed ) {
            break;
        }
    }

    numroots = 0;
    bool visited[6] = {false};
    for(int i = 0; i < 6; ++i) {
        if( !visited[i] ) {
            // might be a multiple root, in which case it will have more error than the other roots
            // find any neighboring roots, and take the average
            complex<IkReal> newroot=roots[i];
            int n = 1;
            for(int j = i+1; j < 6; ++j) {
                if( abs(roots[i]-roots[j]) < 8*tolsqrt ) {
                    newroot += roots[j];
                    n += 1;
                    visited[j] = true;
                }
            }
            if( n > 1 ) {
                newroot /= n;
            }
            // there are still cases where even the mean is not accurate enough, until a better multi-root algorithm is used, need to use the sqrt
            if( IKabs(imag(newroot)) < tolsqrt ) {
                rawroots[numroots++] = real(newroot);
            }
        }
    }
}
};


/// solves the inverse kinematics equations.
/// \param pfree is an array specifying the free joints of the chain.
IKFAST_API bool ComputeIk(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions) {
IKSolver solver;
return solver.ComputeIk(eetrans,eerot,pfree,solutions);
}

IKFAST_API const char* GetKinematicsHash() { return "<robot:genericrobot - cob3-8 (48215639a5decfe5393db8960efc6a8f)>"; }

IKFAST_API const char* GetIkFastVersion() { return IKFAST_STRINGIZE(IKFAST_VERSION); }

#ifdef IKFAST_NAMESPACE
} // end namespace
#endif

#ifndef IKFAST_NO_MAIN
#include <stdio.h>
#include <stdlib.h>
#ifdef IKFAST_NAMESPACE
using namespace IKFAST_NAMESPACE;
#endif
int main(int argc, char** argv)
{
    if( argc != 12+GetNumFreeParameters()+1 ) {
        printf("\nUsage: ./ik r00 r01 r02 t0 r10 r11 r12 t1 r20 r21 r22 t2 free0 ...\n\n"
               "Returns the ik solutions given the transformation of the end effector specified by\n"
               "a 3x3 rotation R (rXX), and a 3x1 translation (tX).\n"
               "There are %d free parameters that have to be specified.\n\n",GetNumFreeParameters());
        return 1;
    }

    IkSolutionList<IkReal> solutions;
    std::vector<IkReal> vfree(GetNumFreeParameters());
    IkReal eerot[9],eetrans[3];
    eerot[0] = atof(argv[1]); eerot[1] = atof(argv[2]); eerot[2] = atof(argv[3]); eetrans[0] = atof(argv[4]);
    eerot[3] = atof(argv[5]); eerot[4] = atof(argv[6]); eerot[5] = atof(argv[7]); eetrans[1] = atof(argv[8]);
    eerot[6] = atof(argv[9]); eerot[7] = atof(argv[10]); eerot[8] = atof(argv[11]); eetrans[2] = atof(argv[12]);
    for(std::size_t i = 0; i < vfree.size(); ++i)
        vfree[i] = atof(argv[13+i]);
    bool bSuccess = ComputeIk(eetrans, eerot, vfree.size() > 0 ? &vfree[0] : NULL, solutions);

    if( !bSuccess ) {
        fprintf(stderr,"Failed to get ik solution\n");
        return -1;
    }

    printf("Found %d ik solutions:\n", (int)solutions.GetNumSolutions());
    std::vector<IkReal> solvalues(GetNumJoints());
    for(std::size_t i = 0; i < solutions.GetNumSolutions(); ++i) {
        const IkSolutionBase<IkReal>& sol = solutions.GetSolution(i);
        printf("sol%d (free=%d): ", (int)i, (int)sol.GetFree().size());
        std::vector<IkReal> vsolfree(sol.GetFree().size());
        sol.GetSolution(&solvalues[0],vsolfree.size()>0?&vsolfree[0]:NULL);
        for( std::size_t j = 0; j < solvalues.size(); ++j)
            printf("%.15f, ", solvalues[j]);
        printf("\n");
    }
    return 0;
}

#endif
